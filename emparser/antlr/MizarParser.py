# Generated from c:\dev\mimosa-project\emparser\emparser\antlr\Mizar.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0092")
        buf.write("\u065e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\3\2\3\2\3\2\3\3\3\3\7\3\u0154\n\3\f\3\16\3\u0157")
        buf.write("\13\3\3\4\3\4\3\4\5\4\u015c\n\4\3\5\3\5\3\5\3\5\7\5\u0162")
        buf.write("\n\5\f\5\16\5\u0165\13\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\7\7\u016f\n\7\f\7\16\7\u0172\13\7\3\7\3\7\3\b\3\b\3")
        buf.write("\t\3\t\3\t\3\t\7\t\u017c\n\t\f\t\16\t\u017f\13\t\3\t\3")
        buf.write("\t\3\n\3\n\3\13\6\13\u0186\n\13\r\13\16\13\u0187\3\f\3")
        buf.write("\f\7\f\u018c\n\f\f\f\16\f\u018f\13\f\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u0198\n\r\3\16\3\16\3\16\3\16\7\16\u019e")
        buf.write("\n\16\f\16\16\16\u01a1\13\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\7\20\u01ac\n\20\f\20\16\20\u01af")
        buf.write("\13\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3")
        buf.write("\24\3\24\3\25\3\25\3\25\3\25\7\25\u01c0\n\25\f\25\16\25")
        buf.write("\u01c3\13\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\7\26\u01ce\n\26\f\26\16\26\u01d1\13\26\3\26\3\26\3")
        buf.write("\27\3\27\3\27\7\27\u01d8\n\27\f\27\16\27\u01db\13\27\3")
        buf.write("\27\3\27\3\30\3\30\3\30\5\30\u01e2\n\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\5\31\u01ea\n\31\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u01f0\n\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\5\34\u01fb\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u0202")
        buf.write("\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u0209\n\36\3\36\3")
        buf.write("\36\3\36\5\36\u020e\n\36\3\36\3\36\3\36\3\36\3\36\3\37")
        buf.write("\3\37\3\37\7\37\u0218\n\37\f\37\16\37\u021b\13\37\3 \3")
        buf.write(" \3!\3!\3!\7!\u0222\n!\f!\16!\u0225\13!\3\"\3\"\3\"\7")
        buf.write("\"\u022a\n\"\f\"\16\"\u022d\13\"\3#\3#\3$\3$\3%\3%\3%")
        buf.write("\7%\u0236\n%\f%\16%\u0239\13%\3%\3%\3&\3&\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\5(\u0245\n(\3(\3(\5(\u0249\n(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u0251\n(\3(\7(\u0254\n(\f(\16(\u0257\13(\3)\3")
        buf.write(")\3)\5)\u025c\n)\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\5,\u0268")
        buf.write("\n,\3-\3-\3-\3-\5-\u026e\n-\3-\3-\5-\u0272\n-\3.\3.\3")
        buf.write("/\3/\3/\3/\5/\u027a\n/\3/\3/\3/\3/\5/\u0280\n/\5/\u0282")
        buf.write("\n/\3\60\3\60\3\60\7\60\u0287\n\60\f\60\16\60\u028a\13")
        buf.write("\60\3\61\3\61\5\61\u028e\n\61\3\61\3\61\3\61\3\62\3\62")
        buf.write("\3\62\3\62\3\63\3\63\3\63\5\63\u029a\n\63\3\63\3\63\5")
        buf.write("\63\u029e\n\63\3\63\3\63\3\63\7\63\u02a3\n\63\f\63\16")
        buf.write("\63\u02a6\13\63\3\64\5\64\u02a9\n\64\3\64\3\64\5\64\u02ad")
        buf.write("\n\64\3\64\3\64\3\64\3\64\5\64\u02b3\n\64\3\65\3\65\3")
        buf.write("\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u02c4\n\67\38\38\39\39\3:\3:\3;\3;\3;")
        buf.write("\3;\5;\u02d0\n;\3;\3;\3;\7;\u02d5\n;\f;\16;\u02d8\13;")
        buf.write("\3<\5<\u02db\n<\3<\3<\5<\u02df\n<\3=\3=\3=\3=\3>\3>\3")
        buf.write(">\3>\3>\3>\3?\3?\3?\3?\3?\3?\3@\3@\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3B\3B\3B\5B\u02fd\nB\3B\3B\3C\3C\3C\3C\3C\3C\3D\3D\3")
        buf.write("D\3D\3D\3D\3E\3E\3F\3F\3F\3F\3F\5F\u0314\nF\3G\3G\3G\5")
        buf.write("G\u0319\nG\3H\3H\3H\3H\3H\3H\3H\3I\7I\u0323\nI\fI\16I")
        buf.write("\u0326\13I\3J\5J\u0329\nJ\3J\5J\u032c\nJ\3J\3J\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3L\5L\u033f\nL\3L\3")
        buf.write("L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0351\n")
        buf.write("M\fM\16M\u0354\13M\5M\u0356\nM\3M\3M\3M\3N\3N\3N\3N\3")
        buf.write("N\3N\3O\3O\3O\3O\3O\3O\3O\3P\7P\u0369\nP\fP\16P\u036c")
        buf.write("\13P\3P\3P\3P\3P\5P\u0372\nP\3Q\3Q\3Q\3Q\3R\3R\3R\3S\3")
        buf.write("S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u0389\nT\fT\16")
        buf.write("T\u038c\13T\5T\u038e\nT\3T\3T\3T\3T\3U\3U\3V\3V\3V\7V")
        buf.write("\u0399\nV\fV\16V\u039c\13V\3W\3W\3X\3X\3Y\3Y\5Y\u03a4")
        buf.write("\nY\3Z\3Z\3Z\7Z\u03a9\nZ\fZ\16Z\u03ac\13Z\3Z\3Z\5Z\u03b0")
        buf.write("\nZ\3Z\3Z\3[\3[\3\\\3\\\3\\\7\\\u03b9\n\\\f\\\16\\\u03bc")
        buf.write("\13\\\3\\\3\\\5\\\u03c0\n\\\3\\\3\\\3\\\3]\3]\3^\3^\5")
        buf.write("^\u03c9\n^\3_\3_\3_\5_\u03ce\n_\3`\3`\3`\3`\3a\3a\3a\7")
        buf.write("a\u03d7\na\fa\16a\u03da\13a\3b\3b\3b\3b\3c\3c\3c\3c\3")
        buf.write("c\3c\3d\3d\3d\3d\3d\3d\3e\3e\3e\5e\u03ef\ne\3e\3e\3f\3")
        buf.write("f\3f\5f\u03f6\nf\3f\3f\3g\7g\u03fb\ng\fg\16g\u03fe\13")
        buf.write("g\3g\5g\u0401\ng\3g\3g\3g\3g\3g\3g\5g\u0409\ng\5g\u040b")
        buf.write("\ng\3h\6h\u040e\nh\rh\16h\u040f\3i\3i\3i\5i\u0415\ni\3")
        buf.write("i\3i\3i\3i\3i\3j\6j\u041d\nj\rj\16j\u041e\3k\3k\3k\5k")
        buf.write("\u0424\nk\3k\3k\3k\3k\3k\3l\3l\5l\u042d\nl\3m\3m\3m\3")
        buf.write("m\5m\u0433\nm\3n\3n\3n\3n\5n\u0439\nn\3n\3n\3o\3o\3o\5")
        buf.write("o\u0440\no\3p\3p\3p\3p\3q\3q\3q\3q\3r\3r\3r\3r\5r\u044e")
        buf.write("\nr\3r\3r\3s\3s\3s\5s\u0455\ns\3s\5s\u0458\ns\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\5t\u0461\nt\3u\3u\3u\3u\7u\u0467\nu\fu\16")
        buf.write("u\u046a\13u\3u\3u\3v\3v\3v\3v\3v\5v\u0473\nv\3w\5w\u0476")
        buf.write("\nw\3w\3w\5w\u047a\nw\3x\3x\3x\3x\5x\u0480\nx\3y\3y\3")
        buf.write("y\3y\3z\3z\3z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3{\3{\3|\3|\5")
        buf.write("|\u0496\n|\3|\3|\3|\5|\u049b\n|\7|\u049d\n|\f|\16|\u04a0")
        buf.write("\13|\3}\3}\3}\5}\u04a5\n}\3}\3}\3}\3}\3}\3}\3}\3}\6}\u04af")
        buf.write("\n}\r}\16}\u04b0\3}\3}\3~\3~\3~\5~\u04b8\n~\3~\3~\3~\3")
        buf.write("~\3~\3\177\3\177\5\177\u04c1\n\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u04c5\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\5\u0082\u04cd\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\5\u0083\u04d5\n\u0083\3\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u04da\n\u0084\f\u0084\16\u0084")
        buf.write("\u04dd\13\u0084\3\u0085\3\u0085\5\u0085\u04e1\n\u0085")
        buf.write("\3\u0086\3\u0086\5\u0086\u04e5\n\u0086\3\u0087\3\u0087")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u04f0\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u04f6\n\u0089\7\u0089\u04f8\n\u0089\f\u0089\16")
        buf.write("\u0089\u04fb\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u050c\n\u008e")
        buf.write("\f\u008e\16\u008e\u050f\13\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u0514\n\u008f\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0525\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\7\u0091\u053d\n\u0091\f\u0091\16\u0091\u0540")
        buf.write("\13\u0091\3\u0092\5\u0092\u0543\n\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u0547\n\u0092\3\u0092\3\u0092\5\u0092\u054b\n")
        buf.write("\u0092\3\u0092\3\u0092\5\u0092\u054f\n\u0092\3\u0092\3")
        buf.write("\u0092\3\u0092\7\u0092\u0554\n\u0092\f\u0092\16\u0092")
        buf.write("\u0557\13\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u055c")
        buf.write("\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092")
        buf.write("\u0563\n\u0092\r\u0092\16\u0092\u0564\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\5\u0092\u056b\n\u0092\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0571\n\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\5\u0093\u0576\n\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u057d\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0585\n\u0094")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u058c")
        buf.write("\n\u0096\f\u0096\16\u0096\u058f\13\u0096\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0098\3\u0098\3\u0098\7\u0098\u0597\n\u0098")
        buf.write("\f\u0098\16\u0098\u059a\13\u0098\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u05a7\n\u009b\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u05ad\n\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\5\u009c\u05b5\n\u009c\5\u009c")
        buf.write("\u05b7\n\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u05bc\n")
        buf.write("\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u05c1\n\u009d\5")
        buf.write("\u009d\u05c3\n\u009d\3\u009e\3\u009e\3\u009e\7\u009e\u05c8")
        buf.write("\n\u009e\f\u009e\16\u009e\u05cb\13\u009e\3\u009f\3\u009f")
        buf.write("\5\u009f\u05cf\n\u009f\3\u009f\6\u009f\u05d2\n\u009f\r")
        buf.write("\u009f\16\u009f\u05d3\3\u009f\3\u009f\7\u009f\u05d8\n")
        buf.write("\u009f\f\u009f\16\u009f\u05db\13\u009f\3\u009f\6\u009f")
        buf.write("\u05de\n\u009f\r\u009f\16\u009f\u05df\3\u009f\5\u009f")
        buf.write("\u05e3\n\u009f\3\u009f\5\u009f\u05e6\n\u009f\3\u009f\3")
        buf.write("\u009f\3\u009f\7\u009f\u05eb\n\u009f\f\u009f\16\u009f")
        buf.write("\u05ee\13\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0")
        buf.write("\u05fb\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u060d\n\u00a0")
        buf.write("\f\u00a0\16\u00a0\u0610\13\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\7\u00a0\u061c\n\u00a0\f\u00a0\16\u00a0\u061f\13\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u062d")
        buf.write("\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0634\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u063b\n\u00a2\3\u00a3\3\u00a3\3\u00a3\7\u00a3")
        buf.write("\u0640\n\u00a3\f\u00a3\16\u00a3\u0643\13\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0649\n\u00a4\f\u00a4")
        buf.write("\16\u00a4\u064c\13\u00a4\3\u00a5\3\u00a5\3\u00a5\7\u00a5")
        buf.write("\u0651\n\u00a5\f\u00a5\16\u00a5\u0654\13\u00a5\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u0658\n\u00a5\3\u00a6\3\u00a6\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\2\4\u0120\u013c\u00a8\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\2\21\3\2\7\16\4\2%%\u0089\u0089\4\2\"\",,\3\2-\60\4\2")
        buf.write("\61\62\u008d\u008d\4\2\63\64\u008e\u008e\3\2\66:\4\2<")
        buf.write("<\u0087\u0087\3\2FK\4\2\6\6PP\3\2Z[\3\2pq\3\2uv\4\2##")
        buf.write("||\3\2}\u0086\2\u0686\2\u014e\3\2\2\2\4\u0151\3\2\2\2")
        buf.write("\6\u015b\3\2\2\2\b\u015d\3\2\2\2\n\u0168\3\2\2\2\f\u016a")
        buf.write("\3\2\2\2\16\u0175\3\2\2\2\20\u0177\3\2\2\2\22\u0182\3")
        buf.write("\2\2\2\24\u0185\3\2\2\2\26\u0189\3\2\2\2\30\u0197\3\2")
        buf.write("\2\2\32\u0199\3\2\2\2\34\u01a4\3\2\2\2\36\u01a8\3\2\2")
        buf.write("\2 \u01b0\3\2\2\2\"\u01b2\3\2\2\2$\u01b5\3\2\2\2&\u01b8")
        buf.write("\3\2\2\2(\u01bb\3\2\2\2*\u01c6\3\2\2\2,\u01d4\3\2\2\2")
        buf.write(".\u01e1\3\2\2\2\60\u01e9\3\2\2\2\62\u01eb\3\2\2\2\64\u01f3")
        buf.write("\3\2\2\2\66\u01fa\3\2\2\28\u01fc\3\2\2\2:\u0203\3\2\2")
        buf.write("\2<\u0214\3\2\2\2>\u021c\3\2\2\2@\u021e\3\2\2\2B\u0226")
        buf.write("\3\2\2\2D\u022e\3\2\2\2F\u0230\3\2\2\2H\u0232\3\2\2\2")
        buf.write("J\u023c\3\2\2\2L\u023e\3\2\2\2N\u0241\3\2\2\2P\u0258\3")
        buf.write("\2\2\2R\u025d\3\2\2\2T\u025f\3\2\2\2V\u0267\3\2\2\2X\u026d")
        buf.write("\3\2\2\2Z\u0273\3\2\2\2\\\u0279\3\2\2\2^\u0283\3\2\2\2")
        buf.write("`\u028d\3\2\2\2b\u0292\3\2\2\2d\u0296\3\2\2\2f\u02b2\3")
        buf.write("\2\2\2h\u02b4\3\2\2\2j\u02b8\3\2\2\2l\u02c3\3\2\2\2n\u02c5")
        buf.write("\3\2\2\2p\u02c7\3\2\2\2r\u02c9\3\2\2\2t\u02cb\3\2\2\2")
        buf.write("v\u02da\3\2\2\2x\u02e0\3\2\2\2z\u02e4\3\2\2\2|\u02ea\3")
        buf.write("\2\2\2~\u02f0\3\2\2\2\u0080\u02f2\3\2\2\2\u0082\u02f9")
        buf.write("\3\2\2\2\u0084\u0300\3\2\2\2\u0086\u0306\3\2\2\2\u0088")
        buf.write("\u030c\3\2\2\2\u008a\u0313\3\2\2\2\u008c\u0318\3\2\2\2")
        buf.write("\u008e\u031a\3\2\2\2\u0090\u0324\3\2\2\2\u0092\u0328\3")
        buf.write("\2\2\2\u0094\u032f\3\2\2\2\u0096\u0338\3\2\2\2\u0098\u0343")
        buf.write("\3\2\2\2\u009a\u035a\3\2\2\2\u009c\u0360\3\2\2\2\u009e")
        buf.write("\u036a\3\2\2\2\u00a0\u0373\3\2\2\2\u00a2\u0377\3\2\2\2")
        buf.write("\u00a4\u037a\3\2\2\2\u00a6\u037d\3\2\2\2\u00a8\u0393\3")
        buf.write("\2\2\2\u00aa\u0395\3\2\2\2\u00ac\u039d\3\2\2\2\u00ae\u039f")
        buf.write("\3\2\2\2\u00b0\u03a3\3\2\2\2\u00b2\u03a5\3\2\2\2\u00b4")
        buf.write("\u03b3\3\2\2\2\u00b6\u03b5\3\2\2\2\u00b8\u03c4\3\2\2\2")
        buf.write("\u00ba\u03c8\3\2\2\2\u00bc\u03cd\3\2\2\2\u00be\u03cf\3")
        buf.write("\2\2\2\u00c0\u03d3\3\2\2\2\u00c2\u03db\3\2\2\2\u00c4\u03df")
        buf.write("\3\2\2\2\u00c6\u03e5\3\2\2\2\u00c8\u03eb\3\2\2\2\u00ca")
        buf.write("\u03f2\3\2\2\2\u00cc\u03fc\3\2\2\2\u00ce\u040d\3\2\2\2")
        buf.write("\u00d0\u0411\3\2\2\2\u00d2\u041c\3\2\2\2\u00d4\u0420\3")
        buf.write("\2\2\2\u00d6\u042c\3\2\2\2\u00d8\u0432\3\2\2\2\u00da\u0434")
        buf.write("\3\2\2\2\u00dc\u043f\3\2\2\2\u00de\u0441\3\2\2\2\u00e0")
        buf.write("\u0445\3\2\2\2\u00e2\u0449\3\2\2\2\u00e4\u0457\3\2\2\2")
        buf.write("\u00e6\u0460\3\2\2\2\u00e8\u0462\3\2\2\2\u00ea\u0472\3")
        buf.write("\2\2\2\u00ec\u0479\3\2\2\2\u00ee\u047f\3\2\2\2\u00f0\u0481")
        buf.write("\3\2\2\2\u00f2\u0485\3\2\2\2\u00f4\u048c\3\2\2\2\u00f6")
        buf.write("\u0495\3\2\2\2\u00f8\u04a4\3\2\2\2\u00fa\u04b7\3\2\2\2")
        buf.write("\u00fc\u04c0\3\2\2\2\u00fe\u04c4\3\2\2\2\u0100\u04c6\3")
        buf.write("\2\2\2\u0102\u04cc\3\2\2\2\u0104\u04ce\3\2\2\2\u0106\u04d6")
        buf.write("\3\2\2\2\u0108\u04e0\3\2\2\2\u010a\u04e4\3\2\2\2\u010c")
        buf.write("\u04e6\3\2\2\2\u010e\u04e8\3\2\2\2\u0110\u04ea\3\2\2\2")
        buf.write("\u0112\u04fc\3\2\2\2\u0114\u0501\3\2\2\2\u0116\u0503\3")
        buf.write("\2\2\2\u0118\u0505\3\2\2\2\u011a\u0507\3\2\2\2\u011c\u0513")
        buf.write("\3\2\2\2\u011e\u0517\3\2\2\2\u0120\u0524\3\2\2\2\u0122")
        buf.write("\u056a\3\2\2\2\u0124\u057c\3\2\2\2\u0126\u0584\3\2\2\2")
        buf.write("\u0128\u0586\3\2\2\2\u012a\u0588\3\2\2\2\u012c\u0590\3")
        buf.write("\2\2\2\u012e\u0593\3\2\2\2\u0130\u059b\3\2\2\2\u0132\u059e")
        buf.write("\3\2\2\2\u0134\u05a6\3\2\2\2\u0136\u05b6\3\2\2\2\u0138")
        buf.write("\u05c2\3\2\2\2\u013a\u05c4\3\2\2\2\u013c\u05e5\3\2\2\2")
        buf.write("\u013e\u062c\3\2\2\2\u0140\u0633\3\2\2\2\u0142\u063a\3")
        buf.write("\2\2\2\u0144\u063c\3\2\2\2\u0146\u0644\3\2\2\2\u0148\u064d")
        buf.write("\3\2\2\2\u014a\u0659\3\2\2\2\u014c\u065b\3\2\2\2\u014e")
        buf.write("\u014f\5\4\3\2\u014f\u0150\5\24\13\2\u0150\3\3\2\2\2\u0151")
        buf.write("\u0155\7\3\2\2\u0152\u0154\5\6\4\2\u0153\u0152\3\2\2\2")
        buf.write("\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156\3")
        buf.write("\2\2\2\u0156\5\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u015c")
        buf.write("\5\b\5\2\u0159\u015c\5\f\7\2\u015a\u015c\5\20\t\2\u015b")
        buf.write("\u0158\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015a\3\2\2\2")
        buf.write("\u015c\7\3\2\2\2\u015d\u015e\7\4\2\2\u015e\u0163\5\n\6")
        buf.write("\2\u015f\u0160\7\5\2\2\u0160\u0162\5\n\6\2\u0161\u015f")
        buf.write("\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0166\u0167\7\6\2\2\u0167\t\3\2\2\2\u0168\u0169\7\u008f")
        buf.write("\2\2\u0169\13\3\2\2\2\u016a\u016b\t\2\2\2\u016b\u0170")
        buf.write("\5\16\b\2\u016c\u016d\7\5\2\2\u016d\u016f\5\16\b\2\u016e")
        buf.write("\u016c\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2")
        buf.write("\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2\u0172\u0170\3")
        buf.write("\2\2\2\u0173\u0174\7\6\2\2\u0174\r\3\2\2\2\u0175\u0176")
        buf.write("\7\u008f\2\2\u0176\17\3\2\2\2\u0177\u0178\7\17\2\2\u0178")
        buf.write("\u017d\5\22\n\2\u0179\u017a\7\5\2\2\u017a\u017c\5\22\n")
        buf.write("\2\u017b\u0179\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b")
        buf.write("\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0180\3\2\2\2\u017f")
        buf.write("\u017d\3\2\2\2\u0180\u0181\7\6\2\2\u0181\21\3\2\2\2\u0182")
        buf.write("\u0183\7\u008f\2\2\u0183\23\3\2\2\2\u0184\u0186\5\26\f")
        buf.write("\2\u0185\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0185")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\25\3\2\2\2\u0189\u018d")
        buf.write("\7\20\2\2\u018a\u018c\5\30\r\2\u018b\u018a\3\2\2\2\u018c")
        buf.write("\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2")
        buf.write("\u018e\27\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0198\5\32")
        buf.write("\16\2\u0191\u0198\5\"\22\2\u0192\u0198\5$\23\2\u0193\u0198")
        buf.write("\5&\24\2\u0194\u0198\5\u00a2R\2\u0195\u0198\5\u00a4S\2")
        buf.write("\u0196\u0198\5\u00ba^\2\u0197\u0190\3\2\2\2\u0197\u0191")
        buf.write("\3\2\2\2\u0197\u0192\3\2\2\2\u0197\u0193\3\2\2\2\u0197")
        buf.write("\u0194\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0196\3\2\2\2")
        buf.write("\u0198\31\3\2\2\2\u0199\u019a\7\21\2\2\u019a\u019f\5\34")
        buf.write("\17\2\u019b\u019c\7\5\2\2\u019c\u019e\5\34\17\2\u019d")
        buf.write("\u019b\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u019d\3\2\2\2")
        buf.write("\u019f\u01a0\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019f\3")
        buf.write("\2\2\2\u01a2\u01a3\7\6\2\2\u01a3\33\3\2\2\2\u01a4\u01a5")
        buf.write("\5\36\20\2\u01a5\u01a6\7\22\2\2\u01a6\u01a7\5\u0132\u009a")
        buf.write("\2\u01a7\35\3\2\2\2\u01a8\u01ad\5 \21\2\u01a9\u01aa\7")
        buf.write("\5\2\2\u01aa\u01ac\5 \21\2\u01ab\u01a9\3\2\2\2\u01ac\u01af")
        buf.write("\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae")
        buf.write("\37\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b1\7\u0090\2")
        buf.write("\2\u01b1!\3\2\2\2\u01b2\u01b3\5(\25\2\u01b3\u01b4\7\6")
        buf.write("\2\2\u01b4#\3\2\2\2\u01b5\u01b6\5*\26\2\u01b6\u01b7\7")
        buf.write("\6\2\2\u01b7%\3\2\2\2\u01b8\u01b9\5,\27\2\u01b9\u01ba")
        buf.write("\7\6\2\2\u01ba\'\3\2\2\2\u01bb\u01c1\7\23\2\2\u01bc\u01c0")
        buf.write("\5.\30\2\u01bd\u01c0\5\66\34\2\u01be\u01c0\58\35\2\u01bf")
        buf.write("\u01bc\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01be\3\2\2\2")
        buf.write("\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3")
        buf.write("\2\2\2\u01c2\u01c4\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c5")
        buf.write("\7\24\2\2\u01c5)\3\2\2\2\u01c6\u01cf\7\25\2\2\u01c7\u01ce")
        buf.write("\5\62\32\2\u01c8\u01ce\5\u008cG\2\u01c9\u01ce\5\u0098")
        buf.write("M\2\u01ca\u01ce\5\u009aN\2\u01cb\u01ce\5\u009cO\2\u01cc")
        buf.write("\u01ce\5\u00ba^\2\u01cd\u01c7\3\2\2\2\u01cd\u01c8\3\2")
        buf.write("\2\2\u01cd\u01c9\3\2\2\2\u01cd\u01ca\3\2\2\2\u01cd\u01cb")
        buf.write("\3\2\2\2\u01cd\u01cc\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2\3\2\2\2")
        buf.write("\u01d1\u01cf\3\2\2\2\u01d2\u01d3\7\24\2\2\u01d3+\3\2\2")
        buf.write("\2\u01d4\u01d9\7\26\2\2\u01d5\u01d8\5\62\32\2\u01d6\u01d8")
        buf.write("\5\60\31\2\u01d7\u01d5\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8")
        buf.write("\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01dd\7")
        buf.write("\24\2\2\u01dd-\3\2\2\2\u01de\u01e2\5\62\32\2\u01df\u01e2")
        buf.write("\5\64\33\2\u01e0\u01e2\5\u00ba^\2\u01e1\u01de\3\2\2\2")
        buf.write("\u01e1\u01df\3\2\2\2\u01e1\u01e0\3\2\2\2\u01e2/\3\2\2")
        buf.write("\2\u01e3\u01ea\5\u0084C\2\u01e4\u01ea\5\u0086D\2\u01e5")
        buf.write("\u01ea\5j\66\2\u01e6\u01ea\5T+\2\u01e7\u01ea\5z>\2\u01e8")
        buf.write("\u01ea\5|?\2\u01e9\u01e3\3\2\2\2\u01e9\u01e4\3\2\2\2\u01e9")
        buf.write("\u01e5\3\2\2\2\u01e9\u01e6\3\2\2\2\u01e9\u01e7\3\2\2\2")
        buf.write("\u01e9\u01e8\3\2\2\2\u01ea\61\3\2\2\2\u01eb\u01ec\7\27")
        buf.write("\2\2\u01ec\u01ef\5\u0126\u0094\2\u01ed\u01ee\7\30\2\2")
        buf.write("\u01ee\u01f0\5\u011a\u008e\2\u01ef\u01ed\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2\7\6\2\2")
        buf.write("\u01f2\63\3\2\2\2\u01f3\u01f4\5\u00dco\2\u01f4\65\3\2")
        buf.write("\2\2\u01f5\u01fb\5:\36\2\u01f6\u01fb\5N(\2\u01f7\u01fb")
        buf.write("\5d\63\2\u01f8\u01fb\5t;\2\u01f9\u01fb\5\u0080A\2\u01fa")
        buf.write("\u01f5\3\2\2\2\u01fa\u01f6\3\2\2\2\u01fa\u01f7\3\2\2\2")
        buf.write("\u01fa\u01f8\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fb\67\3\2")
        buf.write("\2\2\u01fc\u0201\7\31\2\2\u01fd\u0202\5N(\2\u01fe\u0202")
        buf.write("\5d\63\2\u01ff\u0202\5t;\2\u0200\u0202\5\u0080A\2\u0201")
        buf.write("\u01fd\3\2\2\2\u0201\u01fe\3\2\2\2\u0201\u01ff\3\2\2\2")
        buf.write("\u0201\u0200\3\2\2\2\u02029\3\2\2\2\u0203\u0208\7\32\2")
        buf.write("\2\u0204\u0205\7\33\2\2\u0205\u0206\5<\37\2\u0206\u0207")
        buf.write("\7\34\2\2\u0207\u0209\3\2\2\2\u0208\u0204\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020d\5> \2\u020b")
        buf.write("\u020c\7\35\2\2\u020c\u020e\5@!\2\u020d\u020b\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\7")
        buf.write("\36\2\2\u0210\u0211\5B\"\2\u0211\u0212\7\37\2\2\u0212")
        buf.write("\u0213\7\6\2\2\u0213;\3\2\2\2\u0214\u0219\5\u0136\u009c")
        buf.write("\2\u0215\u0216\7\5\2\2\u0216\u0218\5\u0136\u009c\2\u0217")
        buf.write("\u0215\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2")
        buf.write("\u0219\u021a\3\2\2\2\u021a=\3\2\2\2\u021b\u0219\3\2\2")
        buf.write("\2\u021c\u021d\7\u008a\2\2\u021d?\3\2\2\2\u021e\u0223")
        buf.write("\5D#\2\u021f\u0220\7\5\2\2\u0220\u0222\5D#\2\u0221\u021f")
        buf.write("\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224A\3\2\2\2\u0225\u0223\3\2\2\2\u0226")
        buf.write("\u022b\5H%\2\u0227\u0228\7\5\2\2\u0228\u022a\5H%\2\u0229")
        buf.write("\u0227\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3\2\2\2")
        buf.write("\u022b\u022c\3\2\2\2\u022cC\3\2\2\2\u022d\u022b\3\2\2")
        buf.write("\2\u022e\u022f\5F$\2\u022fE\3\2\2\2\u0230\u0231\7\u0090")
        buf.write("\2\2\u0231G\3\2\2\2\u0232\u0237\5J&\2\u0233\u0234\7\5")
        buf.write("\2\2\u0234\u0236\5J&\2\u0235\u0233\3\2\2\2\u0236\u0239")
        buf.write("\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238")
        buf.write("\u023a\3\2\2\2\u0239\u0237\3\2\2\2\u023a\u023b\5L\'\2")
        buf.write("\u023bI\3\2\2\2\u023c\u023d\7\u008b\2\2\u023dK\3\2\2\2")
        buf.write("\u023e\u023f\7 \2\2\u023f\u0240\5\u0132\u009a\2\u0240")
        buf.write("M\3\2\2\2\u0241\u0242\7!\2\2\u0242\u0250\5P)\2\u0243\u0245")
        buf.write("\5L\'\2\u0244\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0248\3\2\2\2\u0246\u0247\7\"\2\2\u0247\u0249\5V,\2\u0248")
        buf.write("\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\3\2\2\2")
        buf.write("\u024a\u024b\7\6\2\2\u024b\u0251\5\u009eP\2\u024c\u024d")
        buf.write("\7#\2\2\u024d\u024e\5\u0132\u009a\2\u024e\u024f\7\6\2")
        buf.write("\2\u024f\u0251\3\2\2\2\u0250\u0244\3\2\2\2\u0250\u024c")
        buf.write("\3\2\2\2\u0251\u0255\3\2\2\2\u0252\u0254\5b\62\2\u0253")
        buf.write("\u0252\3\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2")
        buf.write("\u0255\u0256\3\2\2\2\u0256O\3\2\2\2\u0257\u0255\3\2\2")
        buf.write("\2\u0258\u025b\5R*\2\u0259\u025a\7$\2\2\u025a\u025c\5")
        buf.write("@!\2\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025cQ\3")
        buf.write("\2\2\2\u025d\u025e\t\3\2\2\u025eS\3\2\2\2\u025f\u0260")
        buf.write("\7&\2\2\u0260\u0261\5P)\2\u0261\u0262\7\22\2\2\u0262\u0263")
        buf.write("\5P)\2\u0263\u0264\7\6\2\2\u0264U\3\2\2\2\u0265\u0268")
        buf.write("\5X-\2\u0266\u0268\5\\/\2\u0267\u0265\3\2\2\2\u0267\u0266")
        buf.write("\3\2\2\2\u0268W\3\2\2\2\u0269\u026a\7\'\2\2\u026a\u026b")
        buf.write("\5Z.\2\u026b\u026c\7\'\2\2\u026c\u026e\3\2\2\2\u026d\u0269")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0271\3\2\2\2\u026f")
        buf.write("\u0272\5\u011e\u0090\2\u0270\u0272\5\u013c\u009f\2\u0271")
        buf.write("\u026f\3\2\2\2\u0271\u0270\3\2\2\2\u0272Y\3\2\2\2\u0273")
        buf.write("\u0274\7\u0090\2\2\u0274[\3\2\2\2\u0275\u0276\7\'\2\2")
        buf.write("\u0276\u0277\5Z.\2\u0277\u0278\7\'\2\2\u0278\u027a\3\2")
        buf.write("\2\2\u0279\u0275\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027b\u0281\5^\60\2\u027c\u027f\7(\2\2\u027d")
        buf.write("\u0280\5\u011e\u0090\2\u027e\u0280\5\u013c\u009f\2\u027f")
        buf.write("\u027d\3\2\2\2\u027f\u027e\3\2\2\2\u0280\u0282\3\2\2\2")
        buf.write("\u0281\u027c\3\2\2\2\u0281\u0282\3\2\2\2\u0282]\3\2\2")
        buf.write("\2\u0283\u0288\5`\61\2\u0284\u0285\7\5\2\2\u0285\u0287")
        buf.write("\5`\61\2\u0286\u0284\3\2\2\2\u0287\u028a\3\2\2\2\u0288")
        buf.write("\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289_\3\2\2\2\u028a")
        buf.write("\u0288\3\2\2\2\u028b\u028e\5\u011e\u0090\2\u028c\u028e")
        buf.write("\5\u013c\u009f\2\u028d\u028b\3\2\2\2\u028d\u028c\3\2\2")
        buf.write("\2\u028e\u028f\3\2\2\2\u028f\u0290\7)\2\2\u0290\u0291")
        buf.write("\5\u011e\u0090\2\u0291a\3\2\2\2\u0292\u0293\7*\2\2\u0293")
        buf.write("\u0294\5\u00fc\177\2\u0294\u0295\7\6\2\2\u0295c\3\2\2")
        buf.write("\2\u0296\u0297\7+\2\2\u0297\u0299\5f\64\2\u0298\u029a")
        buf.write("\5L\'\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u029d\3\2\2\2\u029b\u029c\t\4\2\2\u029c\u029e\5V,\2\u029d")
        buf.write("\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f\3\2\2\2")
        buf.write("\u029f\u02a0\7\6\2\2\u02a0\u02a4\5\u009eP\2\u02a1\u02a3")
        buf.write("\5h\65\2\u02a2\u02a1\3\2\2\2\u02a3\u02a6\3\2\2\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5e\3\2\2\2\u02a6")
        buf.write("\u02a4\3\2\2\2\u02a7\u02a9\5l\67\2\u02a8\u02a7\3\2\2\2")
        buf.write("\u02a8\u02a9\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\5")
        buf.write("n8\2\u02ab\u02ad\5l\67\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02b3\3\2\2\2\u02ae\u02af\5p9\2\u02af\u02b0")
        buf.write("\5@!\2\u02b0\u02b1\5r:\2\u02b1\u02b3\3\2\2\2\u02b2\u02a8")
        buf.write("\3\2\2\2\u02b2\u02ae\3\2\2\2\u02b3g\3\2\2\2\u02b4\u02b5")
        buf.write("\t\5\2\2\u02b5\u02b6\5\u00fc\177\2\u02b6\u02b7\7\6\2\2")
        buf.write("\u02b7i\3\2\2\2\u02b8\u02b9\7&\2\2\u02b9\u02ba\5f\64\2")
        buf.write("\u02ba\u02bb\7\22\2\2\u02bb\u02bc\5f\64\2\u02bc\u02bd")
        buf.write("\7\6\2\2\u02bdk\3\2\2\2\u02be\u02c4\5D#\2\u02bf\u02c0")
        buf.write("\7\33\2\2\u02c0\u02c1\5@!\2\u02c1\u02c2\7\34\2\2\u02c2")
        buf.write("\u02c4\3\2\2\2\u02c3\u02be\3\2\2\2\u02c3\u02bf\3\2\2\2")
        buf.write("\u02c4m\3\2\2\2\u02c5\u02c6\7\u0088\2\2\u02c6o\3\2\2\2")
        buf.write("\u02c7\u02c8\t\6\2\2\u02c8q\3\2\2\2\u02c9\u02ca\t\7\2")
        buf.write("\2\u02cas\3\2\2\2\u02cb\u02cc\7\65\2\2\u02cc\u02cf\5v")
        buf.write("<\2\u02cd\u02ce\7\"\2\2\u02ce\u02d0\5V,\2\u02cf\u02cd")
        buf.write("\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1")
        buf.write("\u02d2\7\6\2\2\u02d2\u02d6\5\u009eP\2\u02d3\u02d5\5x=")
        buf.write("\2\u02d4\u02d3\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6\u02d4")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7u\3\2\2\2\u02d8\u02d6")
        buf.write("\3\2\2\2\u02d9\u02db\5@!\2\u02da\u02d9\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02de\5~@\2\u02dd\u02df")
        buf.write("\5@!\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02dfw")
        buf.write("\3\2\2\2\u02e0\u02e1\t\b\2\2\u02e1\u02e2\5\u00fc\177\2")
        buf.write("\u02e2\u02e3\7\6\2\2\u02e3y\3\2\2\2\u02e4\u02e5\7&\2\2")
        buf.write("\u02e5\u02e6\5v<\2\u02e6\u02e7\7\22\2\2\u02e7\u02e8\5")
        buf.write("v<\2\u02e8\u02e9\7\6\2\2\u02e9{\3\2\2\2\u02ea\u02eb\7")
        buf.write(";\2\2\u02eb\u02ec\5v<\2\u02ec\u02ed\7\22\2\2\u02ed\u02ee")
        buf.write("\5v<\2\u02ee\u02ef\7\6\2\2\u02ef}\3\2\2\2\u02f0\u02f1")
        buf.write("\t\t\2\2\u02f1\177\3\2\2\2\u02f2\u02f3\7=\2\2\u02f3\u02f4")
        buf.write("\5\u0082B\2\u02f4\u02f5\7\"\2\2\u02f5\u02f6\5V,\2\u02f6")
        buf.write("\u02f7\7\6\2\2\u02f7\u02f8\5\u009eP\2\u02f8\u0081\3\2")
        buf.write("\2\2\u02f9\u02fa\5D#\2\u02fa\u02fc\7#\2\2\u02fb\u02fd")
        buf.write("\5\u008aF\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u02ff\5\u0088E\2\u02ff\u0083\3\2")
        buf.write("\2\2\u0300\u0301\7&\2\2\u0301\u0302\5\u0082B\2\u0302\u0303")
        buf.write("\7\22\2\2\u0303\u0304\5\u0082B\2\u0304\u0305\7\6\2\2\u0305")
        buf.write("\u0085\3\2\2\2\u0306\u0307\7;\2\2\u0307\u0308\5\u0082")
        buf.write("B\2\u0308\u0309\7\22\2\2\u0309\u030a\5\u0082B\2\u030a")
        buf.write("\u030b\7\6\2\2\u030b\u0087\3\2\2\2\u030c\u030d\7\u008c")
        buf.write("\2\2\u030d\u0089\3\2\2\2\u030e\u0314\5@!\2\u030f\u0310")
        buf.write("\7\33\2\2\u0310\u0311\5@!\2\u0311\u0312\7\34\2\2\u0312")
        buf.write("\u0314\3\2\2\2\u0313\u030e\3\2\2\2\u0313\u030f\3\2\2\2")
        buf.write("\u0314\u008b\3\2\2\2\u0315\u0319\5\u008eH\2\u0316\u0319")
        buf.write("\5\u0094K\2\u0317\u0319\5\u0096L\2\u0318\u0315\3\2\2\2")
        buf.write("\u0318\u0316\3\2\2\2\u0318\u0317\3\2\2\2\u0319\u008d\3")
        buf.write("\2\2\2\u031a\u031b\7>\2\2\u031b\u031c\5\u0090I\2\u031c")
        buf.write("\u031d\7\22\2\2\u031d\u031e\5\u0132\u009a\2\u031e\u031f")
        buf.write("\7\6\2\2\u031f\u0320\5\u009eP\2\u0320\u008f\3\2\2\2\u0321")
        buf.write("\u0323\5\u0092J\2\u0322\u0321\3\2\2\2\u0323\u0326\3\2")
        buf.write("\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0091")
        buf.write("\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0329\7?\2\2\u0328")
        buf.write("\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b\3\2\2\2")
        buf.write("\u032a\u032c\5\u0142\u00a2\2\u032b\u032a\3\2\2\2\u032b")
        buf.write("\u032c\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032e\5\u0088")
        buf.write("E\2\u032e\u0093\3\2\2\2\u032f\u0330\7>\2\2\u0330\u0331")
        buf.write("\5\u0090I\2\u0331\u0332\7 \2\2\u0332\u0333\5\u0090I\2")
        buf.write("\u0333\u0334\7\22\2\2\u0334\u0335\5\u0132\u009a\2\u0335")
        buf.write("\u0336\7\6\2\2\u0336\u0337\5\u009eP\2\u0337\u0095\3\2")
        buf.write("\2\2\u0338\u0339\7>\2\2\u0339\u033a\5\u013c\u009f\2\u033a")
        buf.write("\u033b\7 \2\2\u033b\u033e\5\u0090I\2\u033c\u033d\7\22")
        buf.write("\2\2\u033d\u033f\5\u0132\u009a\2\u033e\u033c\3\2\2\2\u033e")
        buf.write("\u033f\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0341\7\6\2\2")
        buf.write("\u0341\u0342\5\u009eP\2\u0342\u0097\3\2\2\2\u0343\u0344")
        buf.write("\7@\2\2\u0344\u0345\5f\64\2\u0345\u0346\7A\2\2\u0346\u0355")
        buf.write("\5f\64\2\u0347\u0348\7B\2\2\u0348\u0349\5D#\2\u0349\u034a")
        buf.write("\7<\2\2\u034a\u0352\5D#\2\u034b\u034c\7\5\2\2\u034c\u034d")
        buf.write("\5D#\2\u034d\u034e\7<\2\2\u034e\u034f\5D#\2\u034f\u0351")
        buf.write("\3\2\2\2\u0350\u034b\3\2\2\2\u0351\u0354\3\2\2\2\u0352")
        buf.write("\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0356\3\2\2\2")
        buf.write("\u0354\u0352\3\2\2\2\u0355\u0347\3\2\2\2\u0355\u0356\3")
        buf.write("\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358\7\6\2\2\u0358\u0359")
        buf.write("\5\u009eP\2\u0359\u0099\3\2\2\2\u035a\u035b\7*\2\2\u035b")
        buf.write("\u035c\7$\2\2\u035c\u035d\5\u0132\u009a\2\u035d\u035e")
        buf.write("\5\u00fc\177\2\u035e\u035f\7\6\2\2\u035f\u009b\3\2\2\2")
        buf.write("\u0360\u0361\7C\2\2\u0361\u0362\5\u013c\u009f\2\u0362")
        buf.write("\u0363\7D\2\2\u0363\u0364\5\u013c\u009f\2\u0364\u0365")
        buf.write("\7\6\2\2\u0365\u0366\5\u009eP\2\u0366\u009d\3\2\2\2\u0367")
        buf.write("\u0369\5\u00a0Q\2\u0368\u0367\3\2\2\2\u0369\u036c\3\2")
        buf.write("\2\2\u036a\u0368\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0371")
        buf.write("\3\2\2\2\u036c\u036a\3\2\2\2\u036d\u036e\7E\2\2\u036e")
        buf.write("\u036f\5\u00fc\177\2\u036f\u0370\7\6\2\2\u0370\u0372\3")
        buf.write("\2\2\2\u0371\u036d\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u009f")
        buf.write("\3\2\2\2\u0373\u0374\t\n\2\2\u0374\u0375\5\u00fc\177\2")
        buf.write("\u0375\u0376\7\6\2\2\u0376\u00a1\3\2\2\2\u0377\u0378\7")
        buf.write("L\2\2\u0378\u0379\5\u00f0y\2\u0379\u00a3\3\2\2\2\u037a")
        buf.write("\u037b\5\u00a6T\2\u037b\u037c\7\6\2\2\u037c\u00a5\3\2")
        buf.write("\2\2\u037d\u037e\7M\2\2\u037e\u037f\5\u00a8U\2\u037f\u0380")
        buf.write("\7\61\2\2\u0380\u0381\5\u00aaV\2\u0381\u0382\7\63\2\2")
        buf.write("\u0382\u0383\7\'\2\2\u0383\u038d\5\u00acW\2\u0384\u0385")
        buf.write("\7N\2\2\u0385\u038a\5\u00aeX\2\u0386\u0387\7O\2\2\u0387")
        buf.write("\u0389\5\u00aeX\2\u0388\u0386\3\2\2\2\u0389\u038c\3\2")
        buf.write("\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038e")
        buf.write("\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u0384\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\t\13\2")
        buf.write("\2\u0390\u0391\5\u00ccg\2\u0391\u0392\7\24\2\2\u0392\u00a7")
        buf.write("\3\2\2\2\u0393\u0394\7\u0090\2\2\u0394\u00a9\3\2\2\2\u0395")
        buf.write("\u039a\5\u00b0Y\2\u0396\u0397\7\5\2\2\u0397\u0399\5\u00b0")
        buf.write("Y\2\u0398\u0396\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u00ab\3\2\2\2\u039c")
        buf.write("\u039a\3\2\2\2\u039d\u039e\5\u011e\u0090\2\u039e\u00ad")
        buf.write("\3\2\2\2\u039f\u03a0\5\u011c\u008f\2\u03a0\u00af\3\2\2")
        buf.write("\2\u03a1\u03a4\5\u00b2Z\2\u03a2\u03a4\5\u00b6\\\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a2\3\2\2\2\u03a4\u00b1\3\2\2\2")
        buf.write("\u03a5\u03aa\5\u00b4[\2\u03a6\u03a7\7\5\2\2\u03a7\u03a9")
        buf.write("\5\u00b4[\2\u03a8\u03a6\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa")
        buf.write("\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ad\u03af\7\62\2\2\u03ae\u03b0")
        buf.write("\5\u013a\u009e\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2")
        buf.write("\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\7\64\2\2\u03b2\u00b3")
        buf.write("\3\2\2\2\u03b3\u03b4\7\u0090\2\2\u03b4\u00b5\3\2\2\2\u03b5")
        buf.write("\u03ba\5\u00b8]\2\u03b6\u03b7\7\5\2\2\u03b7\u03b9\5\u00b8")
        buf.write("]\2\u03b8\u03b6\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba\u03b8")
        buf.write("\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd\3\2\2\2\u03bc")
        buf.write("\u03ba\3\2\2\2\u03bd\u03bf\7\33\2\2\u03be\u03c0\5\u013a")
        buf.write("\u009e\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c2\7\34\2\2\u03c2\u03c3\5L\'\2")
        buf.write("\u03c3\u00b7\3\2\2\2\u03c4\u03c5\7\u0090\2\2\u03c5\u00b9")
        buf.write("\3\2\2\2\u03c6\u03c9\5\u00ecw\2\u03c7\u03c9\5\u00bc_\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2\2\2\u03c9\u00bb\3")
        buf.write("\2\2\2\u03ca\u03ce\5\u00be`\2\u03cb\u03ce\5\u00c4c\2\u03cc")
        buf.write("\u03ce\5\u00c6d\2\u03cd\u03ca\3\2\2\2\u03cd\u03cb\3\2")
        buf.write("\2\2\u03cd\u03cc\3\2\2\2\u03ce\u00bd\3\2\2\2\u03cf\u03d0")
        buf.write("\7%\2\2\u03d0\u03d1\5\u00c0a\2\u03d1\u03d2\7\6\2\2\u03d2")
        buf.write("\u00bf\3\2\2\2\u03d3\u03d8\5\u00c2b\2\u03d4\u03d5\7\5")
        buf.write("\2\2\u03d5\u03d7\5\u00c2b\2\u03d6\u03d4\3\2\2\2\u03d7")
        buf.write("\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2")
        buf.write("\u03d9\u00c1\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03dc\5")
        buf.write("F$\2\u03dc\u03dd\7<\2\2\u03dd\u03de\5\u013c\u009f\2\u03de")
        buf.write("\u00c3\3\2\2\2\u03df\u03e0\7Q\2\2\u03e0\u03e1\5\u00c8")
        buf.write("e\2\u03e1\u03e2\7<\2\2\u03e2\u03e3\5\u013c\u009f\2\u03e3")
        buf.write("\u03e4\7\6\2\2\u03e4\u00c5\3\2\2\2\u03e5\u03e6\7R\2\2")
        buf.write("\u03e6\u03e7\5\u00caf\2\u03e7\u03e8\7\"\2\2\u03e8\u03e9")
        buf.write("\5\u011e\u0090\2\u03e9\u03ea\7\6\2\2\u03ea\u00c7\3\2\2")
        buf.write("\2\u03eb\u03ec\5\u00b8]\2\u03ec\u03ee\7\33\2\2\u03ed\u03ef")
        buf.write("\5\u013a\u009e\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2")
        buf.write("\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\7\34\2\2\u03f1\u00c9")
        buf.write("\3\2\2\2\u03f2\u03f3\5\u00b4[\2\u03f3\u03f5\7\62\2\2\u03f4")
        buf.write("\u03f6\5\u013a\u009e\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\7\64\2\2\u03f8")
        buf.write("\u00cb\3\2\2\2\u03f9\u03fb\5\u00d6l\2\u03fa\u03f9\3\2")
        buf.write("\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u040a\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff")
        buf.write("\u0401\7S\2\2\u0400\u03ff\3\2\2\2\u0400\u0401\3\2\2\2")
        buf.write("\u0401\u0402\3\2\2\2\u0402\u0403\7T\2\2\u0403\u0404\7")
        buf.write("U\2\2\u0404\u0405\5\u00fe\u0080\2\u0405\u0408\7\6\2\2")
        buf.write("\u0406\u0409\5\u00ceh\2\u0407\u0409\5\u00d2j\2\u0408\u0406")
        buf.write("\3\2\2\2\u0408\u0407\3\2\2\2\u0409\u040b\3\2\2\2\u040a")
        buf.write("\u0400\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u00cd\3\2\2\2")
        buf.write("\u040c\u040e\5\u00d0i\2\u040d\u040c\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410")
        buf.write("\u00cf\3\2\2\2\u0411\u0414\7V\2\2\u0412\u0415\5\u011c")
        buf.write("\u008f\2\u0413\u0415\5\u011a\u008e\2\u0414\u0412\3\2\2")
        buf.write("\2\u0414\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417")
        buf.write("\7\6\2\2\u0417\u0418\5\u00ccg\2\u0418\u0419\7\24\2\2\u0419")
        buf.write("\u041a\7\6\2\2\u041a\u00d1\3\2\2\2\u041b\u041d\5\u00d4")
        buf.write("k\2\u041c\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041c")
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u00d3\3\2\2\2\u0420")
        buf.write("\u0423\7W\2\2\u0421\u0424\5\u011c\u008f\2\u0422\u0424")
        buf.write("\5\u011a\u008e\2\u0423\u0421\3\2\2\2\u0423\u0422\3\2\2")
        buf.write("\2\u0424\u0425\3\2\2\2\u0425\u0426\7\6\2\2\u0426\u0427")
        buf.write("\5\u00ccg\2\u0427\u0428\7\24\2\2\u0428\u0429\7\6\2\2\u0429")
        buf.write("\u00d5\3\2\2\2\u042a\u042d\5\u00ba^\2\u042b\u042d\5\u00d8")
        buf.write("m\2\u042c\u042a\3\2\2\2\u042c\u042b\3\2\2\2\u042d\u00d7")
        buf.write("\3\2\2\2\u042e\u0433\5\u00dan\2\u042f\u0433\5\u00dco\2")
        buf.write("\u0430\u0433\5\u00e4s\2\u0431\u0433\5\u00e8u\2\u0432\u042e")
        buf.write("\3\2\2\2\u0432\u042f\3\2\2\2\u0432\u0430\3\2\2\2\u0432")
        buf.write("\u0431\3\2\2\2\u0433\u00d9\3\2\2\2\u0434\u0435\7\27\2")
        buf.write("\2\u0435\u0438\5\u0126\u0094\2\u0436\u0437\7\30\2\2\u0437")
        buf.write("\u0439\5\u011a\u008e\2\u0438\u0436\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\7\6\2\2\u043b")
        buf.write("\u00db\3\2\2\2\u043c\u0440\5\u00dep\2\u043d\u0440\5\u00e0")
        buf.write("q\2\u043e\u0440\5\u00e2r\2\u043f\u043c\3\2\2\2\u043f\u043d")
        buf.write("\3\2\2\2\u043f\u043e\3\2\2\2\u0440\u00dd\3\2\2\2\u0441")
        buf.write("\u0442\7X\2\2\u0442\u0443\5\u011c\u008f\2\u0443\u0444")
        buf.write("\7\6\2\2\u0444\u00df\3\2\2\2\u0445\u0446\7X\2\2\u0446")
        buf.write("\u0447\5\u011a\u008e\2\u0447\u0448\7\6\2\2\u0448\u00e1")
        buf.write("\3\2\2\2\u0449\u044a\7Y\2\2\u044a\u044d\5\u0126\u0094")
        buf.write("\2\u044b\u044c\7\30\2\2\u044c\u044e\5\u011a\u008e\2\u044d")
        buf.write("\u044b\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2")
        buf.write("\u044f\u0450\7\6\2\2\u0450\u00e3\3\2\2\2\u0451\u0454\t")
        buf.write("\f\2\2\u0452\u0455\5\u00f0y\2\u0453\u0455\5\u00f8}\2\u0454")
        buf.write("\u0452\3\2\2\2\u0454\u0453\3\2\2\2\u0455\u0458\3\2\2\2")
        buf.write("\u0456\u0458\5\u00e6t\2\u0457\u0451\3\2\2\2\u0457\u0456")
        buf.write("\3\2\2\2\u0458\u00e5\3\2\2\2\u0459\u045a\7Z\2\2\u045a")
        buf.write("\u0461\5\u00fa~\2\u045b\u045c\7\\\2\2\u045c\u045d\5\u00cc")
        buf.write("g\2\u045d\u045e\7\24\2\2\u045e\u045f\7\6\2\2\u045f\u0461")
        buf.write("\3\2\2\2\u0460\u0459\3\2\2\2\u0460\u045b\3\2\2\2\u0461")
        buf.write("\u00e7\3\2\2\2\u0462\u0463\7]\2\2\u0463\u0468\5\u00ea")
        buf.write("v\2\u0464\u0465\7\5\2\2\u0465\u0467\5\u00eav\2\u0466\u0464")
        buf.write("\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u046b\3\2\2\2\u046a\u0468\3\2\2\2")
        buf.write("\u046b\u046c\7\6\2\2\u046c\u00e9\3\2\2\2\u046d\u0473\5")
        buf.write("\u013c\u009f\2\u046e\u046f\5F$\2\u046f\u0470\7<\2\2\u0470")
        buf.write("\u0471\5\u013c\u009f\2\u0471\u0473\3\2\2\2\u0472\u046d")
        buf.write("\3\2\2\2\u0472\u046e\3\2\2\2\u0473\u00eb\3\2\2\2\u0474")
        buf.write("\u0476\7S\2\2\u0475\u0474\3\2\2\2\u0475\u0476\3\2\2\2")
        buf.write("\u0476\u0477\3\2\2\2\u0477\u047a\5\u00eex\2\u0478\u047a")
        buf.write("\5\u00fa~\2\u0479\u0475\3\2\2\2\u0479\u0478\3\2\2\2\u047a")
        buf.write("\u00ed\3\2\2\2\u047b\u0480\5\u00f0y\2\u047c\u0480\5\u00f2")
        buf.write("z\2\u047d\u0480\5\u00f4{\2\u047e\u0480\5\u00f8}\2\u047f")
        buf.write("\u047b\3\2\2\2\u047f\u047c\3\2\2\2\u047f\u047d\3\2\2\2")
        buf.write("\u047f\u047e\3\2\2\2\u0480\u00ef\3\2\2\2\u0481\u0482\5")
        buf.write("\u011c\u008f\2\u0482\u0483\5\u00fc\177\2\u0483\u0484\7")
        buf.write("\6\2\2\u0484\u00f1\3\2\2\2\u0485\u0486\7^\2\2\u0486\u0487")
        buf.write("\5\u0126\u0094\2\u0487\u0488\7\30\2\2\u0488\u0489\5\u011a")
        buf.write("\u008e\2\u0489\u048a\5\u00fe\u0080\2\u048a\u048b\7\6\2")
        buf.write("\2\u048b\u00f3\3\2\2\2\u048c\u048d\7_\2\2\u048d\u048e")
        buf.write("\5\u00f6|\2\u048e\u048f\7`\2\2\u048f\u0490\5\u0132\u009a")
        buf.write("\2\u0490\u0491\5\u00fe\u0080\2\u0491\u0492\7\6\2\2\u0492")
        buf.write("\u00f5\3\2\2\2\u0493\u0496\5\u00c2b\2\u0494\u0496\5F$")
        buf.write("\2\u0495\u0493\3\2\2\2\u0495\u0494\3\2\2\2\u0496\u049e")
        buf.write("\3\2\2\2\u0497\u049a\7\5\2\2\u0498\u049b\5\u00c2b\2\u0499")
        buf.write("\u049b\5F$\2\u049a\u0498\3\2\2\2\u049a\u0499\3\2\2\2\u049b")
        buf.write("\u049d\3\2\2\2\u049c\u0497\3\2\2\2\u049d\u04a0\3\2\2\2")
        buf.write("\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u00f7\3")
        buf.write("\2\2\2\u04a0\u049e\3\2\2\2\u04a1\u04a2\5Z.\2\u04a2\u04a3")
        buf.write("\7\'\2\2\u04a3\u04a5\3\2\2\2\u04a4\u04a1\3\2\2\2\u04a4")
        buf.write("\u04a5\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\5\u013c")
        buf.write("\u009f\2\u04a7\u04a8\7<\2\2\u04a8\u04a9\5\u013c\u009f")
        buf.write("\2\u04a9\u04ae\5\u00fe\u0080\2\u04aa\u04ab\7a\2\2\u04ab")
        buf.write("\u04ac\5\u013c\u009f\2\u04ac\u04ad\5\u00fe\u0080\2\u04ad")
        buf.write("\u04af\3\2\2\2\u04ae\u04aa\3\2\2\2\u04af\u04b0\3\2\2\2")
        buf.write("\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2\3")
        buf.write("\2\2\2\u04b2\u04b3\7\6\2\2\u04b3\u00f9\3\2\2\2\u04b4\u04b5")
        buf.write("\5Z.\2\u04b5\u04b6\7\'\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b4")
        buf.write("\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9")
        buf.write("\u04ba\7b\2\2\u04ba\u04bb\5\u00ccg\2\u04bb\u04bc\7\24")
        buf.write("\2\2\u04bc\u04bd\7\6\2\2\u04bd\u00fb\3\2\2\2\u04be\u04c1")
        buf.write("\5\u00fe\u0080\2\u04bf\u04c1\5\u0100\u0081\2\u04c0\u04be")
        buf.write("\3\2\2\2\u04c0\u04bf\3\2\2\2\u04c1\u00fd\3\2\2\2\u04c2")
        buf.write("\u04c5\5\u0102\u0082\2\u04c3\u04c5\5\u0104\u0083\2\u04c4")
        buf.write("\u04c2\3\2\2\2\u04c4\u04c3\3\2\2\2\u04c5\u00ff\3\2\2\2")
        buf.write("\u04c6\u04c7\7P\2\2\u04c7\u04c8\5\u00ccg\2\u04c8\u04c9")
        buf.write("\7\24\2\2\u04c9\u0101\3\2\2\2\u04ca\u04cb\7c\2\2\u04cb")
        buf.write("\u04cd\5\u0106\u0084\2\u04cc\u04ca\3\2\2\2\u04cc\u04cd")
        buf.write("\3\2\2\2\u04cd\u0103\3\2\2\2\u04ce\u04cf\7d\2\2\u04cf")
        buf.write("\u04d4\5\u010a\u0086\2\u04d0\u04d1\7\33\2\2\u04d1\u04d2")
        buf.write("\5\u0106\u0084\2\u04d2\u04d3\7\34\2\2\u04d3\u04d5\3\2")
        buf.write("\2\2\u04d4\u04d0\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u0105")
        buf.write("\3\2\2\2\u04d6\u04db\5\u0108\u0085\2\u04d7\u04d8\7\5\2")
        buf.write("\2\u04d8\u04da\5\u0108\u0085\2\u04d9\u04d7\3\2\2\2\u04da")
        buf.write("\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2")
        buf.write("\u04dc\u0107\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04e1\5")
        buf.write("\u010c\u0087\2\u04df\u04e1\5\u0110\u0089\2\u04e0\u04de")
        buf.write("\3\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u0109\3\2\2\2\u04e2")
        buf.write("\u04e5\5\u010e\u0088\2\u04e3\u04e5\5\u0112\u008a\2\u04e4")
        buf.write("\u04e2\3\2\2\2\u04e4\u04e3\3\2\2\2\u04e5\u010b\3\2\2\2")
        buf.write("\u04e6\u04e7\5Z.\2\u04e7\u010d\3\2\2\2\u04e8\u04e9\5\u00a8")
        buf.write("U\2\u04e9\u010f\3\2\2\2\u04ea\u04eb\5\16\b\2\u04eb\u04ef")
        buf.write("\7\'\2\2\u04ec\u04f0\5\u0114\u008b\2\u04ed\u04ee\7e\2")
        buf.write("\2\u04ee\u04f0\5\u0116\u008c\2\u04ef\u04ec\3\2\2\2\u04ef")
        buf.write("\u04ed\3\2\2\2\u04f0\u04f9\3\2\2\2\u04f1\u04f5\7\5\2\2")
        buf.write("\u04f2\u04f6\5\u0114\u008b\2\u04f3\u04f4\7e\2\2\u04f4")
        buf.write("\u04f6\5\u0116\u008c\2\u04f5\u04f2\3\2\2\2\u04f5\u04f3")
        buf.write("\3\2\2\2\u04f6\u04f8\3\2\2\2\u04f7\u04f1\3\2\2\2\u04f8")
        buf.write("\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2")
        buf.write("\u04fa\u0111\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fc\u04fd\5")
        buf.write("\16\b\2\u04fd\u04fe\7\'\2\2\u04fe\u04ff\7f\2\2\u04ff\u0500")
        buf.write("\5\u0118\u008d\2\u0500\u0113\3\2\2\2\u0501\u0502\7\u0091")
        buf.write("\2\2\u0502\u0115\3\2\2\2\u0503\u0504\7\u0091\2\2\u0504")
        buf.write("\u0117\3\2\2\2\u0505\u0506\7\u0091\2\2\u0506\u0119\3\2")
        buf.write("\2\2\u0507\u0508\7g\2\2\u0508\u050d\5\u011c\u008f\2\u0509")
        buf.write("\u050a\7O\2\2\u050a\u050c\5\u011c\u008f\2\u050b\u0509")
        buf.write("\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3\2\2\2\u050d")
        buf.write("\u050e\3\2\2\2\u050e\u011b\3\2\2\2\u050f\u050d\3\2\2\2")
        buf.write("\u0510\u0511\5Z.\2\u0511\u0512\7\'\2\2\u0512\u0514\3\2")
        buf.write("\2\2\u0513\u0510\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515")
        buf.write("\3\2\2\2\u0515\u0516\5\u011e\u0090\2\u0516\u011d\3\2\2")
        buf.write("\2\u0517\u0518\5\u0120\u0091\2\u0518\u011f\3\2\2\2\u0519")
        buf.write("\u051a\b\u0091\1\2\u051a\u051b\7\33\2\2\u051b\u051c\5")
        buf.write("\u0120\u0091\2\u051c\u051d\7\34\2\2\u051d\u0525\3\2\2")
        buf.write("\2\u051e\u0525\5\u0122\u0092\2\u051f\u0525\5\u0124\u0093")
        buf.write("\2\u0520\u0521\7m\2\2\u0521\u0525\5\u0120\u0091\5\u0522")
        buf.write("\u0525\7n\2\2\u0523\u0525\7o\2\2\u0524\u0519\3\2\2\2\u0524")
        buf.write("\u051e\3\2\2\2\u0524\u051f\3\2\2\2\u0524\u0520\3\2\2\2")
        buf.write("\u0524\u0522\3\2\2\2\u0524\u0523\3\2\2\2\u0525\u053e\3")
        buf.write("\2\2\2\u0526\u0527\f\13\2\2\u0527\u0528\7h\2\2\u0528\u053d")
        buf.write("\5\u0120\u0091\f\u0529\u052a\f\n\2\2\u052a\u052b\7h\2")
        buf.write("\2\u052b\u052c\7i\2\2\u052c\u052d\7h\2\2\u052d\u053d\5")
        buf.write("\u0120\u0091\13\u052e\u052f\f\t\2\2\u052f\u0530\7j\2\2")
        buf.write("\u0530\u053d\5\u0120\u0091\n\u0531\u0532\f\b\2\2\u0532")
        buf.write("\u0533\7j\2\2\u0533\u0534\7i\2\2\u0534\u0535\7j\2\2\u0535")
        buf.write("\u053d\5\u0120\u0091\t\u0536\u0537\f\7\2\2\u0537\u0538")
        buf.write("\7k\2\2\u0538\u053d\5\u0120\u0091\b\u0539\u053a\f\6\2")
        buf.write("\2\u053a\u053b\7l\2\2\u053b\u053d\5\u0120\u0091\7\u053c")
        buf.write("\u0526\3\2\2\2\u053c\u0529\3\2\2\2\u053c\u052e\3\2\2\2")
        buf.write("\u053c\u0531\3\2\2\2\u053c\u0536\3\2\2\2\u053c\u0539\3")
        buf.write("\2\2\2\u053d\u0540\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f")
        buf.write("\3\2\2\2\u053f\u0121\3\2\2\2\u0540\u053e\3\2\2\2\u0541")
        buf.write("\u0543\5\u0144\u00a3\2\u0542\u0541\3\2\2\2\u0542\u0543")
        buf.write("\3\2\2\2\u0543\u0546\3\2\2\2\u0544\u0545\t\r\2\2\u0545")
        buf.write("\u0547\7m\2\2\u0546\u0544\3\2\2\2\u0546\u0547\3\2\2\2")
        buf.write("\u0547\u0548\3\2\2\2\u0548\u054a\5~@\2\u0549\u054b\5\u0144")
        buf.write("\u00a3\2\u054a\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b")
        buf.write("\u0555\3\2\2\2\u054c\u054d\t\r\2\2\u054d\u054f\7m\2\2")
        buf.write("\u054e\u054c\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3")
        buf.write("\2\2\2\u0550\u0551\5~@\2\u0551\u0552\5\u0144\u00a3\2\u0552")
        buf.write("\u0554\3\2\2\2\u0553\u054e\3\2\2\2\u0554\u0557\3\2\2\2")
        buf.write("\u0555\u0553\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u056b\3")
        buf.write("\2\2\2\u0557\u0555\3\2\2\2\u0558\u0559\5\u00b4[\2\u0559")
        buf.write("\u055b\7\62\2\2\u055a\u055c\5\u0144\u00a3\2\u055b\u055a")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055d\3\2\2\2\u055d")
        buf.write("\u055e\7\64\2\2\u055e\u056b\3\2\2\2\u055f\u0560\5\u013c")
        buf.write("\u009f\2\u0560\u0562\7#\2\2\u0561\u0563\5\u0092J\2\u0562")
        buf.write("\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0562\3\2\2\2")
        buf.write("\u0564\u0565\3\2\2\2\u0565\u056b\3\2\2\2\u0566\u0567\5")
        buf.write("\u013c\u009f\2\u0567\u0568\7#\2\2\u0568\u0569\5\u0132")
        buf.write("\u009a\2\u0569\u056b\3\2\2\2\u056a\u0542\3\2\2\2\u056a")
        buf.write("\u0558\3\2\2\2\u056a\u055f\3\2\2\2\u056a\u0566\3\2\2\2")
        buf.write("\u056b\u0123\3\2\2\2\u056c\u056d\7\22\2\2\u056d\u0570")
        buf.write("\5\u0126\u0094\2\u056e\u056f\7r\2\2\u056f\u0571\5\u0120")
        buf.write("\u0091\2\u0570\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571")
        buf.write("\u0575\3\2\2\2\u0572\u0573\7s\2\2\u0573\u0576\5\u0120")
        buf.write("\u0091\2\u0574\u0576\5\u0124\u0093\2\u0575\u0572\3\2\2")
        buf.write("\2\u0575\u0574\3\2\2\2\u0576\u057d\3\2\2\2\u0577\u0578")
        buf.write("\7t\2\2\u0578\u0579\5\u0126\u0094\2\u0579\u057a\7r\2\2")
        buf.write("\u057a\u057b\5\u0120\u0091\2\u057b\u057d\3\2\2\2\u057c")
        buf.write("\u056c\3\2\2\2\u057c\u0577\3\2\2\2\u057d\u0125\3\2\2\2")
        buf.write("\u057e\u0585\5\u0128\u0095\2\u057f\u0585\5\u012a\u0096")
        buf.write("\2\u0580\u0581\5\u012a\u0096\2\u0581\u0582\7\5\2\2\u0582")
        buf.write("\u0583\5\u0128\u0095\2\u0583\u0585\3\2\2\2\u0584\u057e")
        buf.write("\3\2\2\2\u0584\u057f\3\2\2\2\u0584\u0580\3\2\2\2\u0585")
        buf.write("\u0127\3\2\2\2\u0586\u0587\5\u012e\u0098\2\u0587\u0129")
        buf.write("\3\2\2\2\u0588\u058d\5\u012c\u0097\2\u0589\u058a\7\5\2")
        buf.write("\2\u058a\u058c\5\u012c\u0097\2\u058b\u0589\3\2\2\2\u058c")
        buf.write("\u058f\3\2\2\2\u058d\u058b\3\2\2\2\u058d\u058e\3\2\2\2")
        buf.write("\u058e\u012b\3\2\2\2\u058f\u058d\3\2\2\2\u0590\u0591\5")
        buf.write("\u012e\u0098\2\u0591\u0592\5\u0130\u0099\2\u0592\u012d")
        buf.write("\3\2\2\2\u0593\u0598\5F$\2\u0594\u0595\7\5\2\2\u0595\u0597")
        buf.write("\5F$\2\u0596\u0594\3\2\2\2\u0597\u059a\3\2\2\2\u0598\u0596")
        buf.write("\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u012f\3\2\2\2\u059a")
        buf.write("\u0598\3\2\2\2\u059b\u059c\t\16\2\2\u059c\u059d\5\u0132")
        buf.write("\u009a\2\u059d\u0131\3\2\2\2\u059e\u059f\5\u0090I\2\u059f")
        buf.write("\u05a0\5\u0134\u009b\2\u05a0\u0133\3\2\2\2\u05a1\u05a2")
        buf.write("\7\33\2\2\u05a2\u05a3\5\u0138\u009d\2\u05a3\u05a4\7\34")
        buf.write("\2\2\u05a4\u05a7\3\2\2\2\u05a5\u05a7\5\u0138\u009d\2\u05a6")
        buf.write("\u05a1\3\2\2\2\u05a6\u05a5\3\2\2\2\u05a7\u0135\3\2\2\2")
        buf.write("\u05a8\u05a9\7\33\2\2\u05a9\u05ac\5> \2\u05aa\u05ab\7")
        buf.write("\35\2\2\u05ab\u05ad\5\u0144\u00a3\2\u05ac\u05aa\3\2\2")
        buf.write("\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af")
        buf.write("\7\34\2\2\u05af\u05b7\3\2\2\2\u05b0\u05b1\5\u0090I\2\u05b1")
        buf.write("\u05b4\5> \2\u05b2\u05b3\7\35\2\2\u05b3\u05b5\5\u0144")
        buf.write("\u00a3\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5")
        buf.write("\u05b7\3\2\2\2\u05b6\u05a8\3\2\2\2\u05b6\u05b0\3\2\2\2")
        buf.write("\u05b7\u0137\3\2\2\2\u05b8\u05bb\5R*\2\u05b9\u05ba\7$")
        buf.write("\2\2\u05ba\u05bc\5\u0144\u00a3\2\u05bb\u05b9\3\2\2\2\u05bb")
        buf.write("\u05bc\3\2\2\2\u05bc\u05c3\3\2\2\2\u05bd\u05c0\5> \2\u05be")
        buf.write("\u05bf\7\35\2\2\u05bf\u05c1\5\u0144\u00a3\2\u05c0\u05be")
        buf.write("\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c3\3\2\2\2\u05c2")
        buf.write("\u05b8\3\2\2\2\u05c2\u05bd\3\2\2\2\u05c3\u0139\3\2\2\2")
        buf.write("\u05c4\u05c9\5\u0132\u009a\2\u05c5\u05c6\7\5\2\2\u05c6")
        buf.write("\u05c8\5\u0132\u009a\2\u05c7\u05c5\3\2\2\2\u05c8\u05cb")
        buf.write("\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u013b\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc\u05ce\b\u009f")
        buf.write("\1\2\u05cd\u05cf\5\u0140\u00a1\2\u05ce\u05cd\3\2\2\2\u05ce")
        buf.write("\u05cf\3\2\2\2\u05cf\u05d9\3\2\2\2\u05d0\u05d2\5n8\2\u05d1")
        buf.write("\u05d0\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d1\3\2\2\2")
        buf.write("\u05d3\u05d4\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\5")
        buf.write("\u0140\u00a1\2\u05d6\u05d8\3\2\2\2\u05d7\u05d1\3\2\2\2")
        buf.write("\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da\3")
        buf.write("\2\2\2\u05da\u05dd\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc\u05de")
        buf.write("\5n8\2\u05dd\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05dd")
        buf.write("\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2\2\2\u05e1")
        buf.write("\u05e3\5\u0140\u00a1\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3")
        buf.write("\3\2\2\2\u05e3\u05e6\3\2\2\2\u05e4\u05e6\5\u013e\u00a0")
        buf.write("\2\u05e5\u05cc\3\2\2\2\u05e5\u05e4\3\2\2\2\u05e6\u05ec")
        buf.write("\3\2\2\2\u05e7\u05e8\f\4\2\2\u05e8\u05e9\7w\2\2\u05e9")
        buf.write("\u05eb\5\u0132\u009a\2\u05ea\u05e7\3\2\2\2\u05eb\u05ee")
        buf.write("\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed")
        buf.write("\u013d\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05f0\7\33\2")
        buf.write("\2\u05f0\u05f1\5\u013c\u009f\2\u05f1\u05f2\7\34\2\2\u05f2")
        buf.write("\u062d\3\2\2\2\u05f3\u05f4\5p9\2\u05f4\u05f5\5\u0144\u00a3")
        buf.write("\2\u05f5\u05f6\5r:\2\u05f6\u062d\3\2\2\2\u05f7\u05f8\5")
        buf.write("\u00b8]\2\u05f8\u05fa\7\33\2\2\u05f9\u05fb\5\u0144\u00a3")
        buf.write("\2\u05fa\u05f9\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc")
        buf.write("\3\2\2\2\u05fc\u05fd\7\34\2\2\u05fd\u062d\3\2\2\2\u05fe")
        buf.write("\u05ff\5> \2\u05ff\u0600\7\36\2\2\u0600\u0601\5\u0144")
        buf.write("\u00a3\2\u0601\u0602\7\37\2\2\u0602\u062d\3\2\2\2\u0603")
        buf.write("\u0604\7x\2\2\u0604\u0605\5> \2\u0605\u0606\7$\2\2\u0606")
        buf.write("\u0607\5\u013c\u009f\2\u0607\u062d\3\2\2\2\u0608\u062d")
        buf.write("\5F$\2\u0609\u060a\7\61\2\2\u060a\u060e\5\u013c\u009f")
        buf.write("\2\u060b\u060d\5\u0146\u00a4\2\u060c\u060b\3\2\2\2\u060d")
        buf.write("\u0610\3\2\2\2\u060e\u060c\3\2\2\2\u060e\u060f\3\2\2\2")
        buf.write("\u060f\u0611\3\2\2\2\u0610\u060e\3\2\2\2\u0611\u0612\7")
        buf.write("\'\2\2\u0612\u0613\5\u011e\u0090\2\u0613\u0614\7\63\2")
        buf.write("\2\u0614\u062d\3\2\2\2\u0615\u0616\7x\2\2\u0616\u0617")
        buf.write("\7%\2\2\u0617\u0618\7$\2\2\u0618\u0619\7y\2\2\u0619\u061d")
        buf.write("\5\u013c\u009f\2\u061a\u061c\5\u0146\u00a4\2\u061b\u061a")
        buf.write("\3\2\2\2\u061c\u061f\3\2\2\2\u061d\u061b\3\2\2\2\u061d")
        buf.write("\u061e\3\2\2\2\u061e\u062d\3\2\2\2\u061f\u061d\3\2\2\2")
        buf.write("\u0620\u062d\7\u0091\2\2\u0621\u0622\7x\2\2\u0622\u0623")
        buf.write("\5J&\2\u0623\u0624\7$\2\2\u0624\u0625\5\u013c\u009f\2")
        buf.write("\u0625\u062d\3\2\2\2\u0626\u0627\7x\2\2\u0627\u062d\5")
        buf.write("J&\2\u0628\u0629\7x\2\2\u0629\u062d\5\u0132\u009a\2\u062a")
        buf.write("\u062d\5\u014c\u00a7\2\u062b\u062d\7z\2\2\u062c\u05ef")
        buf.write("\3\2\2\2\u062c\u05f3\3\2\2\2\u062c\u05f7\3\2\2\2\u062c")
        buf.write("\u05fe\3\2\2\2\u062c\u0603\3\2\2\2\u062c\u0608\3\2\2\2")
        buf.write("\u062c\u0609\3\2\2\2\u062c\u0615\3\2\2\2\u062c\u0620\3")
        buf.write("\2\2\2\u062c\u0621\3\2\2\2\u062c\u0626\3\2\2\2\u062c\u0628")
        buf.write("\3\2\2\2\u062c\u062a\3\2\2\2\u062c\u062b\3\2\2\2\u062d")
        buf.write("\u013f\3\2\2\2\u062e\u0634\5\u013e\u00a0\2\u062f\u0630")
        buf.write("\7\33\2\2\u0630\u0631\5\u0144\u00a3\2\u0631\u0632\7\34")
        buf.write("\2\2\u0632\u0634\3\2\2\2\u0633\u062e\3\2\2\2\u0633\u062f")
        buf.write("\3\2\2\2\u0634\u0141\3\2\2\2\u0635\u063b\5\u0144\u00a3")
        buf.write("\2\u0636\u0637\7\33\2\2\u0637\u0638\5\u0144\u00a3\2\u0638")
        buf.write("\u0639\7\34\2\2\u0639\u063b\3\2\2\2\u063a\u0635\3\2\2")
        buf.write("\2\u063a\u0636\3\2\2\2\u063b\u0143\3\2\2\2\u063c\u0641")
        buf.write("\5\u013c\u009f\2\u063d\u063e\7\5\2\2\u063e\u0640\5\u013c")
        buf.write("\u009f\2\u063f\u063d\3\2\2\2\u0640\u0643\3\2\2\2\u0641")
        buf.write("\u063f\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0145\3\2\2\2")
        buf.write("\u0643\u0641\3\2\2\2\u0644\u0645\7{\2\2\u0645\u064a\5")
        buf.write("\u0148\u00a5\2\u0646\u0647\7\5\2\2\u0647\u0649\5\u0148")
        buf.write("\u00a5\2\u0648\u0646\3\2\2\2\u0649\u064c\3\2\2\2\u064a")
        buf.write("\u0648\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u0147\3\2\2\2")
        buf.write("\u064c\u064a\3\2\2\2\u064d\u0652\5\u014a\u00a6\2\u064e")
        buf.write("\u064f\7\5\2\2\u064f\u0651\5\u014a\u00a6\2\u0650\u064e")
        buf.write("\3\2\2\2\u0651\u0654\3\2\2\2\u0652\u0650\3\2\2\2\u0652")
        buf.write("\u0653\3\2\2\2\u0653\u0657\3\2\2\2\u0654\u0652\3\2\2\2")
        buf.write("\u0655\u0656\t\17\2\2\u0656\u0658\5\u0132\u009a\2\u0657")
        buf.write("\u0655\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0149\3\2\2\2")
        buf.write("\u0659\u065a\7\u0090\2\2\u065a\u014b\3\2\2\2\u065b\u065c")
        buf.write("\t\20\2\2\u065c\u014d\3\2\2\2\u009e\u0155\u015b\u0163")
        buf.write("\u0170\u017d\u0187\u018d\u0197\u019f\u01ad\u01bf\u01c1")
        buf.write("\u01cd\u01cf\u01d7\u01d9\u01e1\u01e9\u01ef\u01fa\u0201")
        buf.write("\u0208\u020d\u0219\u0223\u022b\u0237\u0244\u0248\u0250")
        buf.write("\u0255\u025b\u0267\u026d\u0271\u0279\u027f\u0281\u0288")
        buf.write("\u028d\u0299\u029d\u02a4\u02a8\u02ac\u02b2\u02c3\u02cf")
        buf.write("\u02d6\u02da\u02de\u02fc\u0313\u0318\u0324\u0328\u032b")
        buf.write("\u033e\u0352\u0355\u036a\u0371\u038a\u038d\u039a\u03a3")
        buf.write("\u03aa\u03af\u03ba\u03bf\u03c8\u03cd\u03d8\u03ee\u03f5")
        buf.write("\u03fc\u0400\u0408\u040a\u040f\u0414\u041e\u0423\u042c")
        buf.write("\u0432\u0438\u043f\u044d\u0454\u0457\u0460\u0468\u0472")
        buf.write("\u0475\u0479\u047f\u0495\u049a\u049e\u04a4\u04b0\u04b7")
        buf.write("\u04c0\u04c4\u04cc\u04d4\u04db\u04e0\u04e4\u04ef\u04f5")
        buf.write("\u04f9\u050d\u0513\u0524\u053c\u053e\u0542\u0546\u054a")
        buf.write("\u054e\u0555\u055b\u0564\u056a\u0570\u0575\u057c\u0584")
        buf.write("\u058d\u0598\u05a6\u05ac\u05b4\u05b6\u05bb\u05c0\u05c2")
        buf.write("\u05c9\u05ce\u05d3\u05d9\u05df\u05e2\u05e5\u05ec\u05fa")
        buf.write("\u060e\u061d\u062c\u0633\u063a\u0641\u064a\u0652\u0657")
        return buf.getvalue()


class MizarParser ( Parser ):

    grammarFileName = "Mizar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'environ'", "'vocabularies'", "','", 
                     "';'", "'notations'", "'constructors'", "'registrations'", 
                     "'definitions'", "'expansions'", "'equalities'", "'theorems'", 
                     "'schemes'", "'requirements'", "'begin'", "'reserve'", 
                     "'for'", "'definition'", "'end'", "'registration'", 
                     "'notation'", "'let'", "'such'", "'redefine'", "'struct'", 
                     "'('", "')'", "'over'", "'(#'", "'#)'", "'->'", "'mode'", 
                     "'means'", "'is'", "'of'", "'set'", "'synonym'", "':'", 
                     "'otherwise'", "'if'", "'sethood'", "'func'", "'equals'", 
                     "'commutativity'", "'idempotence'", "'involutiveness'", 
                     "'projectivity'", "'{'", "'['", "'}'", "']'", "'pred'", 
                     "'symmetry'", "'asymmetry'", "'connectedness'", "'reflexivity'", 
                     "'irreflexivity'", "'antonym'", "'='", "'attr'", "'cluster'", 
                     "'non'", "'identify'", "'with'", "'when'", "'reduce'", 
                     "'to'", "'correctness'", "'existence'", "'uniqueness'", 
                     "'coherence'", "'compatibility'", "'consistency'", 
                     "'reducibility'", "'theorem'", "'scheme'", "'provided'", 
                     "'and'", "'proof'", "'deffunc'", "'defpred'", "'then'", 
                     "'per'", "'cases'", "'case'", "'suppose'", "'assume'", 
                     "'given'", "'thus'", "'hence'", "'hereby'", "'take'", 
                     "'consider'", "'reconsider'", "'as'", "'.='", "'now'", 
                     "'by'", "'from'", "'def'", "'sch'", "'that'", "'&'", 
                     "'...'", "'or'", "'implies'", "'iff'", "'not'", "'contradiction'", 
                     "'thesis'", "'does'", "'do'", "'st'", "'holds'", "'ex'", 
                     "'being'", "'be'", "'qua'", "'the'", "'all'", "'it'", 
                     "'where'", "'are'", "'$1'", "'$2'", "'$3'", "'$4'", 
                     "'$5'", "'$6'", "'$7'", "'$8'", "'$9'", "'$10'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "PREDICATE_SYMBOL", "FUNCTOR_SYMBOL", 
                      "MODE_SYMBOL", "STRUCTURE_SYMBOL", "SELECTOR_SYMBOL", 
                      "ATTRIBUTE_SYMBOL", "LEFT_FUNCTOR_SYMBOL", "RIGHT_FUNCTOR_SYMBOL", 
                      "FILE_NAME", "IDENTIFIER", "NUMERAL", "WHITE_SPACE" ]

    RULE_article = 0
    RULE_environmentDeclaration = 1
    RULE_directive = 2
    RULE_vocabularyDirective = 3
    RULE_vocabularyName = 4
    RULE_libraryDirective = 5
    RULE_articleName = 6
    RULE_requirementDirective = 7
    RULE_requirement = 8
    RULE_textProper = 9
    RULE_section = 10
    RULE_textItem = 11
    RULE_reservation = 12
    RULE_reservationSegment = 13
    RULE_reservedIdentifiers = 14
    RULE_reservedIdentifier = 15
    RULE_definitionalItem = 16
    RULE_registrationItem = 17
    RULE_notationItem = 18
    RULE_definitionalBlock = 19
    RULE_registrationBlock = 20
    RULE_notationBlock = 21
    RULE_definitionItem = 22
    RULE_notationDeclaration = 23
    RULE_lociDeclaration = 24
    RULE_permissiveAssumption = 25
    RULE_definition = 26
    RULE_redefinition = 27
    RULE_structureDefinition = 28
    RULE_ancestors = 29
    RULE_structureSymbol = 30
    RULE_loci = 31
    RULE_fields = 32
    RULE_locus = 33
    RULE_variableIdentifier = 34
    RULE_fieldSegment = 35
    RULE_selectorSymbol = 36
    RULE_specification = 37
    RULE_modeDefinition = 38
    RULE_modePattern = 39
    RULE_modeSymbol = 40
    RULE_modeSynonym = 41
    RULE_definiens = 42
    RULE_simpleDefiniens = 43
    RULE_labelIdentifier = 44
    RULE_conditionalDefiniens = 45
    RULE_partialDefiniensList = 46
    RULE_partialDefiniens = 47
    RULE_modeProperty = 48
    RULE_functorDefinition = 49
    RULE_functorPattern = 50
    RULE_functorProperty = 51
    RULE_functorSynonym = 52
    RULE_functorLoci = 53
    RULE_functorSymbol = 54
    RULE_leftFunctorBracket = 55
    RULE_rightFunctorBracket = 56
    RULE_predicateDefinition = 57
    RULE_predicatePattern = 58
    RULE_predicateProperty = 59
    RULE_predicateSynonym = 60
    RULE_predicateAntonym = 61
    RULE_predicateSymbol = 62
    RULE_attributeDefinition = 63
    RULE_attributePattern = 64
    RULE_attributeSynonym = 65
    RULE_attributeAntonym = 66
    RULE_attributeSymbol = 67
    RULE_attributeLoci = 68
    RULE_clusterRegistration = 69
    RULE_existentialRegistration = 70
    RULE_adjectiveCluster = 71
    RULE_adjective = 72
    RULE_conditionalRegistration = 73
    RULE_functorialRegistration = 74
    RULE_identifyRegistration = 75
    RULE_propertyRegistration = 76
    RULE_reductionRegistration = 77
    RULE_correctnessConditions = 78
    RULE_correctnessCondition = 79
    RULE_theorem = 80
    RULE_schemeItem = 81
    RULE_schemeBlock = 82
    RULE_schemeIdentifier = 83
    RULE_schemeParameters = 84
    RULE_schemeConclusion = 85
    RULE_schemePremise = 86
    RULE_schemeSegment = 87
    RULE_predicateSegment = 88
    RULE_predicateIdentifier = 89
    RULE_functorSegment = 90
    RULE_functorIdentifier = 91
    RULE_auxiliaryItem = 92
    RULE_privateDefinition = 93
    RULE_constantDefinition = 94
    RULE_equatingList = 95
    RULE_equating = 96
    RULE_privateFunctorDefinition = 97
    RULE_privatePredicateDefinition = 98
    RULE_privateFunctorPattern = 99
    RULE_privatePredicatePattern = 100
    RULE_reasoning = 101
    RULE_caseList = 102
    RULE_case = 103
    RULE_supposeList = 104
    RULE_suppose = 105
    RULE_reasoningItem = 106
    RULE_skeletonItem = 107
    RULE_generalization = 108
    RULE_assumption = 109
    RULE_singleAssumption = 110
    RULE_collectiveAssumption = 111
    RULE_existentialAssumption = 112
    RULE_conclusion = 113
    RULE_diffuseConclusion = 114
    RULE_exemplification = 115
    RULE_example = 116
    RULE_statement = 117
    RULE_linkableStatement = 118
    RULE_compactStatement = 119
    RULE_choiceStatement = 120
    RULE_typeChangingStatement = 121
    RULE_typeChangeList = 122
    RULE_iterativeEquality = 123
    RULE_diffuseStatement = 124
    RULE_justification = 125
    RULE_simpleJustification = 126
    RULE_proof = 127
    RULE_straightforwardJustification = 128
    RULE_schemeJustification = 129
    RULE_references = 130
    RULE_reference = 131
    RULE_schemeReference = 132
    RULE_localReference = 133
    RULE_localSchemeReference = 134
    RULE_libraryReference = 135
    RULE_librarySchemeReference = 136
    RULE_theoremNumber = 137
    RULE_definitionNumber = 138
    RULE_schemeNumber = 139
    RULE_conditions = 140
    RULE_proposition = 141
    RULE_sentence = 142
    RULE_formulaExpression = 143
    RULE_atomicFormulaExpression = 144
    RULE_quantifiedFormulaExpression = 145
    RULE_qualifiedVariables = 146
    RULE_implicitlyQualifiedVariables = 147
    RULE_explicitlyQualifiedVariables = 148
    RULE_qualifiedSegment = 149
    RULE_variables = 150
    RULE_qualification = 151
    RULE_typeExpression = 152
    RULE_radixTypeExpression = 153
    RULE_structureTypeExpression = 154
    RULE_radixType = 155
    RULE_typeExpressionList = 156
    RULE_termExpression = 157
    RULE_unitaryTerm = 158
    RULE_arguments = 159
    RULE_adjectiveArguments = 160
    RULE_termExpressionList = 161
    RULE_postqualification = 162
    RULE_postqualifyingSegment = 163
    RULE_postqualifiedVariable = 164
    RULE_privateDefinitionParameter = 165

    ruleNames =  [ "article", "environmentDeclaration", "directive", "vocabularyDirective", 
                   "vocabularyName", "libraryDirective", "articleName", 
                   "requirementDirective", "requirement", "textProper", 
                   "section", "textItem", "reservation", "reservationSegment", 
                   "reservedIdentifiers", "reservedIdentifier", "definitionalItem", 
                   "registrationItem", "notationItem", "definitionalBlock", 
                   "registrationBlock", "notationBlock", "definitionItem", 
                   "notationDeclaration", "lociDeclaration", "permissiveAssumption", 
                   "definition", "redefinition", "structureDefinition", 
                   "ancestors", "structureSymbol", "loci", "fields", "locus", 
                   "variableIdentifier", "fieldSegment", "selectorSymbol", 
                   "specification", "modeDefinition", "modePattern", "modeSymbol", 
                   "modeSynonym", "definiens", "simpleDefiniens", "labelIdentifier", 
                   "conditionalDefiniens", "partialDefiniensList", "partialDefiniens", 
                   "modeProperty", "functorDefinition", "functorPattern", 
                   "functorProperty", "functorSynonym", "functorLoci", "functorSymbol", 
                   "leftFunctorBracket", "rightFunctorBracket", "predicateDefinition", 
                   "predicatePattern", "predicateProperty", "predicateSynonym", 
                   "predicateAntonym", "predicateSymbol", "attributeDefinition", 
                   "attributePattern", "attributeSynonym", "attributeAntonym", 
                   "attributeSymbol", "attributeLoci", "clusterRegistration", 
                   "existentialRegistration", "adjectiveCluster", "adjective", 
                   "conditionalRegistration", "functorialRegistration", 
                   "identifyRegistration", "propertyRegistration", "reductionRegistration", 
                   "correctnessConditions", "correctnessCondition", "theorem", 
                   "schemeItem", "schemeBlock", "schemeIdentifier", "schemeParameters", 
                   "schemeConclusion", "schemePremise", "schemeSegment", 
                   "predicateSegment", "predicateIdentifier", "functorSegment", 
                   "functorIdentifier", "auxiliaryItem", "privateDefinition", 
                   "constantDefinition", "equatingList", "equating", "privateFunctorDefinition", 
                   "privatePredicateDefinition", "privateFunctorPattern", 
                   "privatePredicatePattern", "reasoning", "caseList", "case", 
                   "supposeList", "suppose", "reasoningItem", "skeletonItem", 
                   "generalization", "assumption", "singleAssumption", "collectiveAssumption", 
                   "existentialAssumption", "conclusion", "diffuseConclusion", 
                   "exemplification", "example", "statement", "linkableStatement", 
                   "compactStatement", "choiceStatement", "typeChangingStatement", 
                   "typeChangeList", "iterativeEquality", "diffuseStatement", 
                   "justification", "simpleJustification", "proof", "straightforwardJustification", 
                   "schemeJustification", "references", "reference", "schemeReference", 
                   "localReference", "localSchemeReference", "libraryReference", 
                   "librarySchemeReference", "theoremNumber", "definitionNumber", 
                   "schemeNumber", "conditions", "proposition", "sentence", 
                   "formulaExpression", "atomicFormulaExpression", "quantifiedFormulaExpression", 
                   "qualifiedVariables", "implicitlyQualifiedVariables", 
                   "explicitlyQualifiedVariables", "qualifiedSegment", "variables", 
                   "qualification", "typeExpression", "radixTypeExpression", 
                   "structureTypeExpression", "radixType", "typeExpressionList", 
                   "termExpression", "unitaryTerm", "arguments", "adjectiveArguments", 
                   "termExpressionList", "postqualification", "postqualifyingSegment", 
                   "postqualifiedVariable", "privateDefinitionParameter" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    PREDICATE_SYMBOL=133
    FUNCTOR_SYMBOL=134
    MODE_SYMBOL=135
    STRUCTURE_SYMBOL=136
    SELECTOR_SYMBOL=137
    ATTRIBUTE_SYMBOL=138
    LEFT_FUNCTOR_SYMBOL=139
    RIGHT_FUNCTOR_SYMBOL=140
    FILE_NAME=141
    IDENTIFIER=142
    NUMERAL=143
    WHITE_SPACE=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ArticleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def environmentDeclaration(self):
            return self.getTypedRuleContext(MizarParser.EnvironmentDeclarationContext,0)


        def textProper(self):
            return self.getTypedRuleContext(MizarParser.TextProperContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_article

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticle" ):
                listener.enterArticle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticle" ):
                listener.exitArticle(self)




    def article(self):

        localctx = MizarParser.ArticleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_article)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.environmentDeclaration()
            self.state = 333
            self.textProper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DirectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.DirectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_environmentDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentDeclaration" ):
                listener.enterEnvironmentDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentDeclaration" ):
                listener.exitEnvironmentDeclaration(self)




    def environmentDeclaration(self):

        localctx = MizarParser.EnvironmentDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_environmentDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(MizarParser.T__0)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__1) | (1 << MizarParser.T__4) | (1 << MizarParser.T__5) | (1 << MizarParser.T__6) | (1 << MizarParser.T__7) | (1 << MizarParser.T__8) | (1 << MizarParser.T__9) | (1 << MizarParser.T__10) | (1 << MizarParser.T__11) | (1 << MizarParser.T__12))) != 0):
                self.state = 336
                self.directive()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabularyDirective(self):
            return self.getTypedRuleContext(MizarParser.VocabularyDirectiveContext,0)


        def libraryDirective(self):
            return self.getTypedRuleContext(MizarParser.LibraryDirectiveContext,0)


        def requirementDirective(self):
            return self.getTypedRuleContext(MizarParser.RequirementDirectiveContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)




    def directive(self):

        localctx = MizarParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_directive)
        try:
            self.state = 345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.vocabularyDirective()
                pass
            elif token in [MizarParser.T__4, MizarParser.T__5, MizarParser.T__6, MizarParser.T__7, MizarParser.T__8, MizarParser.T__9, MizarParser.T__10, MizarParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.libraryDirective()
                pass
            elif token in [MizarParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.requirementDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VocabularyDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabularyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.VocabularyNameContext)
            else:
                return self.getTypedRuleContext(MizarParser.VocabularyNameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_vocabularyDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVocabularyDirective" ):
                listener.enterVocabularyDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVocabularyDirective" ):
                listener.exitVocabularyDirective(self)




    def vocabularyDirective(self):

        localctx = MizarParser.VocabularyDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_vocabularyDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(MizarParser.T__1)
            self.state = 348
            self.vocabularyName()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 349
                self.match(MizarParser.T__2)
                self.state = 350
                self.vocabularyName()
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 356
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VocabularyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_vocabularyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVocabularyName" ):
                listener.enterVocabularyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVocabularyName" ):
                listener.exitVocabularyName(self)




    def vocabularyName(self):

        localctx = MizarParser.VocabularyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vocabularyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def articleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ArticleNameContext)
            else:
                return self.getTypedRuleContext(MizarParser.ArticleNameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_libraryDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDirective" ):
                listener.enterLibraryDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDirective" ):
                listener.exitLibraryDirective(self)




    def libraryDirective(self):

        localctx = MizarParser.LibraryDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_libraryDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__4) | (1 << MizarParser.T__5) | (1 << MizarParser.T__6) | (1 << MizarParser.T__7) | (1 << MizarParser.T__8) | (1 << MizarParser.T__9) | (1 << MizarParser.T__10) | (1 << MizarParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 361
            self.articleName()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 362
                self.match(MizarParser.T__2)
                self.state = 363
                self.articleName()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArticleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_articleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticleName" ):
                listener.enterArticleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticleName" ):
                listener.exitArticleName(self)




    def articleName(self):

        localctx = MizarParser.ArticleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_articleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RequirementContext)
            else:
                return self.getTypedRuleContext(MizarParser.RequirementContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_requirementDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirementDirective" ):
                listener.enterRequirementDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirementDirective" ):
                listener.exitRequirementDirective(self)




    def requirementDirective(self):

        localctx = MizarParser.RequirementDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_requirementDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(MizarParser.T__12)
            self.state = 374
            self.requirement()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 375
                self.match(MizarParser.T__2)
                self.state = 376
                self.requirement()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = MizarParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextProperContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SectionContext)
            else:
                return self.getTypedRuleContext(MizarParser.SectionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_textProper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextProper" ):
                listener.enterTextProper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextProper" ):
                listener.exitTextProper(self)




    def textProper(self):

        localctx = MizarParser.TextProperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_textProper)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 386
                self.section()
                self.state = 389 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__13):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TextItemContext)
            else:
                return self.getTypedRuleContext(MizarParser.TextItemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection" ):
                listener.enterSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection" ):
                listener.exitSection(self)




    def section(self):

        localctx = MizarParser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(MizarParser.T__13)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__14) | (1 << MizarParser.T__15) | (1 << MizarParser.T__16) | (1 << MizarParser.T__18) | (1 << MizarParser.T__19) | (1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__57))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (MizarParser.T__73 - 74)) | (1 << (MizarParser.T__74 - 74)) | (1 << (MizarParser.T__78 - 74)) | (1 << (MizarParser.T__79 - 74)) | (1 << (MizarParser.T__80 - 74)) | (1 << (MizarParser.T__91 - 74)) | (1 << (MizarParser.T__92 - 74)) | (1 << (MizarParser.T__95 - 74)) | (1 << (MizarParser.T__106 - 74)) | (1 << (MizarParser.T__107 - 74)) | (1 << (MizarParser.T__108 - 74)) | (1 << (MizarParser.T__109 - 74)) | (1 << (MizarParser.T__110 - 74)) | (1 << (MizarParser.T__113 - 74)) | (1 << (MizarParser.T__117 - 74)) | (1 << (MizarParser.T__119 - 74)) | (1 << (MizarParser.T__122 - 74)) | (1 << (MizarParser.T__123 - 74)) | (1 << (MizarParser.T__124 - 74)) | (1 << (MizarParser.T__125 - 74)) | (1 << (MizarParser.T__126 - 74)) | (1 << (MizarParser.T__127 - 74)) | (1 << (MizarParser.T__128 - 74)) | (1 << (MizarParser.T__129 - 74)) | (1 << (MizarParser.T__130 - 74)) | (1 << (MizarParser.T__131 - 74)) | (1 << (MizarParser.PREDICATE_SYMBOL - 74)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 74)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 74)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 139)) | (1 << (MizarParser.IDENTIFIER - 139)) | (1 << (MizarParser.NUMERAL - 139)))) != 0):
                self.state = 392
                self.textItem()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservation(self):
            return self.getTypedRuleContext(MizarParser.ReservationContext,0)


        def definitionalItem(self):
            return self.getTypedRuleContext(MizarParser.DefinitionalItemContext,0)


        def registrationItem(self):
            return self.getTypedRuleContext(MizarParser.RegistrationItemContext,0)


        def notationItem(self):
            return self.getTypedRuleContext(MizarParser.NotationItemContext,0)


        def theorem(self):
            return self.getTypedRuleContext(MizarParser.TheoremContext,0)


        def schemeItem(self):
            return self.getTypedRuleContext(MizarParser.SchemeItemContext,0)


        def auxiliaryItem(self):
            return self.getTypedRuleContext(MizarParser.AuxiliaryItemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_textItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextItem" ):
                listener.enterTextItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextItem" ):
                listener.exitTextItem(self)




    def textItem(self):

        localctx = MizarParser.TextItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_textItem)
        try:
            self.state = 405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.reservation()
                pass
            elif token in [MizarParser.T__16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.definitionalItem()
                pass
            elif token in [MizarParser.T__18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 400
                self.registrationItem()
                pass
            elif token in [MizarParser.T__19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 401
                self.notationItem()
                pass
            elif token in [MizarParser.T__73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 402
                self.theorem()
                pass
            elif token in [MizarParser.T__74]:
                self.enterOuterAlt(localctx, 6)
                self.state = 403
                self.schemeItem()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 404
                self.auxiliaryItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservationSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReservationSegmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReservationSegmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reservation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservation" ):
                listener.enterReservation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservation" ):
                listener.exitReservation(self)




    def reservation(self):

        localctx = MizarParser.ReservationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reservation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(MizarParser.T__14)
            self.state = 408
            self.reservationSegment()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 409
                self.match(MizarParser.T__2)
                self.state = 410
                self.reservationSegment()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservationSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedIdentifiers(self):
            return self.getTypedRuleContext(MizarParser.ReservedIdentifiersContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reservationSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservationSegment" ):
                listener.enterReservationSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservationSegment" ):
                listener.exitReservationSegment(self)




    def reservationSegment(self):

        localctx = MizarParser.ReservationSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_reservationSegment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.reservedIdentifiers()
            self.state = 419
            self.match(MizarParser.T__15)
            self.state = 420
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservedIdentifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReservedIdentifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReservedIdentifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reservedIdentifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedIdentifiers" ):
                listener.enterReservedIdentifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedIdentifiers" ):
                listener.exitReservedIdentifiers(self)




    def reservedIdentifiers(self):

        localctx = MizarParser.ReservedIdentifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reservedIdentifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.reservedIdentifier()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 423
                self.match(MizarParser.T__2)
                self.state = 424
                self.reservedIdentifier()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_reservedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedIdentifier" ):
                listener.enterReservedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedIdentifier" ):
                listener.exitReservedIdentifier(self)




    def reservedIdentifier(self):

        localctx = MizarParser.ReservedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_reservedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionalItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definitionalBlock(self):
            return self.getTypedRuleContext(MizarParser.DefinitionalBlockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definitionalItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitionalItem" ):
                listener.enterDefinitionalItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitionalItem" ):
                listener.exitDefinitionalItem(self)




    def definitionalItem(self):

        localctx = MizarParser.DefinitionalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_definitionalItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.definitionalBlock()
            self.state = 433
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegistrationItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def registrationBlock(self):
            return self.getTypedRuleContext(MizarParser.RegistrationBlockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_registrationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegistrationItem" ):
                listener.enterRegistrationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegistrationItem" ):
                listener.exitRegistrationItem(self)




    def registrationItem(self):

        localctx = MizarParser.RegistrationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_registrationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.registrationBlock()
            self.state = 436
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotationItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notationBlock(self):
            return self.getTypedRuleContext(MizarParser.NotationBlockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotationItem" ):
                listener.enterNotationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotationItem" ):
                listener.exitNotationItem(self)




    def notationItem(self):

        localctx = MizarParser.NotationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_notationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.notationBlock()
            self.state = 439
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionalBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definitionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DefinitionItemContext)
            else:
                return self.getTypedRuleContext(MizarParser.DefinitionItemContext,i)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.DefinitionContext,i)


        def redefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RedefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.RedefinitionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_definitionalBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitionalBlock" ):
                listener.enterDefinitionalBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitionalBlock" ):
                listener.exitDefinitionalBlock(self)




    def definitionalBlock(self):

        localctx = MizarParser.DefinitionalBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_definitionalBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(MizarParser.T__16)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (MizarParser.T__15 - 16)) | (1 << (MizarParser.T__20 - 16)) | (1 << (MizarParser.T__22 - 16)) | (1 << (MizarParser.T__23 - 16)) | (1 << (MizarParser.T__24 - 16)) | (1 << (MizarParser.T__30 - 16)) | (1 << (MizarParser.T__34 - 16)) | (1 << (MizarParser.T__40 - 16)) | (1 << (MizarParser.T__46 - 16)) | (1 << (MizarParser.T__47 - 16)) | (1 << (MizarParser.T__50 - 16)) | (1 << (MizarParser.T__57 - 16)) | (1 << (MizarParser.T__58 - 16)) | (1 << (MizarParser.T__78 - 16)))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (MizarParser.T__79 - 80)) | (1 << (MizarParser.T__80 - 80)) | (1 << (MizarParser.T__85 - 80)) | (1 << (MizarParser.T__86 - 80)) | (1 << (MizarParser.T__91 - 80)) | (1 << (MizarParser.T__92 - 80)) | (1 << (MizarParser.T__95 - 80)) | (1 << (MizarParser.T__106 - 80)) | (1 << (MizarParser.T__107 - 80)) | (1 << (MizarParser.T__108 - 80)) | (1 << (MizarParser.T__109 - 80)) | (1 << (MizarParser.T__110 - 80)) | (1 << (MizarParser.T__113 - 80)) | (1 << (MizarParser.T__117 - 80)) | (1 << (MizarParser.T__119 - 80)) | (1 << (MizarParser.T__122 - 80)) | (1 << (MizarParser.T__123 - 80)) | (1 << (MizarParser.T__124 - 80)) | (1 << (MizarParser.T__125 - 80)) | (1 << (MizarParser.T__126 - 80)) | (1 << (MizarParser.T__127 - 80)) | (1 << (MizarParser.T__128 - 80)) | (1 << (MizarParser.T__129 - 80)) | (1 << (MizarParser.T__130 - 80)) | (1 << (MizarParser.T__131 - 80)) | (1 << (MizarParser.PREDICATE_SYMBOL - 80)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 80)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.IDENTIFIER - 80)) | (1 << (MizarParser.NUMERAL - 80)))) != 0):
                self.state = 445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__15, MizarParser.T__20, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__85, MizarParser.T__86, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 442
                    self.definitionItem()
                    pass
                elif token in [MizarParser.T__23, MizarParser.T__30, MizarParser.T__40, MizarParser.T__50, MizarParser.T__58]:
                    self.state = 443
                    self.definition()
                    pass
                elif token in [MizarParser.T__22]:
                    self.state = 444
                    self.redefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 450
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegistrationBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lociDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LociDeclarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.LociDeclarationContext,i)


        def clusterRegistration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ClusterRegistrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.ClusterRegistrationContext,i)


        def identifyRegistration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.IdentifyRegistrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.IdentifyRegistrationContext,i)


        def propertyRegistration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PropertyRegistrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.PropertyRegistrationContext,i)


        def reductionRegistration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReductionRegistrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReductionRegistrationContext,i)


        def auxiliaryItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AuxiliaryItemContext)
            else:
                return self.getTypedRuleContext(MizarParser.AuxiliaryItemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_registrationBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegistrationBlock" ):
                listener.enterRegistrationBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegistrationBlock" ):
                listener.exitRegistrationBlock(self)




    def registrationBlock(self):

        localctx = MizarParser.RegistrationBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_registrationBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(MizarParser.T__18)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (MizarParser.T__15 - 16)) | (1 << (MizarParser.T__20 - 16)) | (1 << (MizarParser.T__24 - 16)) | (1 << (MizarParser.T__34 - 16)) | (1 << (MizarParser.T__39 - 16)) | (1 << (MizarParser.T__46 - 16)) | (1 << (MizarParser.T__47 - 16)) | (1 << (MizarParser.T__57 - 16)) | (1 << (MizarParser.T__59 - 16)) | (1 << (MizarParser.T__61 - 16)) | (1 << (MizarParser.T__64 - 16)) | (1 << (MizarParser.T__78 - 16)))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (MizarParser.T__79 - 80)) | (1 << (MizarParser.T__80 - 80)) | (1 << (MizarParser.T__91 - 80)) | (1 << (MizarParser.T__92 - 80)) | (1 << (MizarParser.T__95 - 80)) | (1 << (MizarParser.T__106 - 80)) | (1 << (MizarParser.T__107 - 80)) | (1 << (MizarParser.T__108 - 80)) | (1 << (MizarParser.T__109 - 80)) | (1 << (MizarParser.T__110 - 80)) | (1 << (MizarParser.T__113 - 80)) | (1 << (MizarParser.T__117 - 80)) | (1 << (MizarParser.T__119 - 80)) | (1 << (MizarParser.T__122 - 80)) | (1 << (MizarParser.T__123 - 80)) | (1 << (MizarParser.T__124 - 80)) | (1 << (MizarParser.T__125 - 80)) | (1 << (MizarParser.T__126 - 80)) | (1 << (MizarParser.T__127 - 80)) | (1 << (MizarParser.T__128 - 80)) | (1 << (MizarParser.T__129 - 80)) | (1 << (MizarParser.T__130 - 80)) | (1 << (MizarParser.T__131 - 80)) | (1 << (MizarParser.PREDICATE_SYMBOL - 80)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 80)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.IDENTIFIER - 80)) | (1 << (MizarParser.NUMERAL - 80)))) != 0):
                self.state = 459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__20]:
                    self.state = 453
                    self.lociDeclaration()
                    pass
                elif token in [MizarParser.T__59]:
                    self.state = 454
                    self.clusterRegistration()
                    pass
                elif token in [MizarParser.T__61]:
                    self.state = 455
                    self.identifyRegistration()
                    pass
                elif token in [MizarParser.T__39]:
                    self.state = 456
                    self.propertyRegistration()
                    pass
                elif token in [MizarParser.T__64]:
                    self.state = 457
                    self.reductionRegistration()
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 458
                    self.auxiliaryItem()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 464
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotationBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lociDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LociDeclarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.LociDeclarationContext,i)


        def notationDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.NotationDeclarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.NotationDeclarationContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_notationBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotationBlock" ):
                listener.enterNotationBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotationBlock" ):
                listener.exitNotationBlock(self)




    def notationBlock(self):

        localctx = MizarParser.NotationBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_notationBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(MizarParser.T__19)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__20) | (1 << MizarParser.T__35) | (1 << MizarParser.T__56))) != 0):
                self.state = 469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__20]:
                    self.state = 467
                    self.lociDeclaration()
                    pass
                elif token in [MizarParser.T__35, MizarParser.T__56]:
                    self.state = 468
                    self.notationDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lociDeclaration(self):
            return self.getTypedRuleContext(MizarParser.LociDeclarationContext,0)


        def permissiveAssumption(self):
            return self.getTypedRuleContext(MizarParser.PermissiveAssumptionContext,0)


        def auxiliaryItem(self):
            return self.getTypedRuleContext(MizarParser.AuxiliaryItemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definitionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitionItem" ):
                listener.enterDefinitionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitionItem" ):
                listener.exitDefinitionItem(self)




    def definitionItem(self):

        localctx = MizarParser.DefinitionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_definitionItem)
        try:
            self.state = 479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.lociDeclaration()
                pass
            elif token in [MizarParser.T__85, MizarParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.permissiveAssumption()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.auxiliaryItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotationDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSynonym(self):
            return self.getTypedRuleContext(MizarParser.AttributeSynonymContext,0)


        def attributeAntonym(self):
            return self.getTypedRuleContext(MizarParser.AttributeAntonymContext,0)


        def functorSynonym(self):
            return self.getTypedRuleContext(MizarParser.FunctorSynonymContext,0)


        def modeSynonym(self):
            return self.getTypedRuleContext(MizarParser.ModeSynonymContext,0)


        def predicateSynonym(self):
            return self.getTypedRuleContext(MizarParser.PredicateSynonymContext,0)


        def predicateAntonym(self):
            return self.getTypedRuleContext(MizarParser.PredicateAntonymContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notationDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotationDeclaration" ):
                listener.enterNotationDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotationDeclaration" ):
                listener.exitNotationDeclaration(self)




    def notationDeclaration(self):

        localctx = MizarParser.NotationDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_notationDeclaration)
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.attributeSynonym()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.attributeAntonym()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 483
                self.functorSynonym()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 484
                self.modeSynonym()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 485
                self.predicateSynonym()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 486
                self.predicateAntonym()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LociDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.QualifiedVariablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_lociDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLociDeclaration" ):
                listener.enterLociDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLociDeclaration" ):
                listener.exitLociDeclaration(self)




    def lociDeclaration(self):

        localctx = MizarParser.LociDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_lociDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(MizarParser.T__20)
            self.state = 490
            self.qualifiedVariables()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 491
                self.match(MizarParser.T__21)
                self.state = 492
                self.conditions()


            self.state = 495
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PermissiveAssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_permissiveAssumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermissiveAssumption" ):
                listener.enterPermissiveAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermissiveAssumption" ):
                listener.exitPermissiveAssumption(self)




    def permissiveAssumption(self):

        localctx = MizarParser.PermissiveAssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_permissiveAssumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.assumption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureDefinition(self):
            return self.getTypedRuleContext(MizarParser.StructureDefinitionContext,0)


        def modeDefinition(self):
            return self.getTypedRuleContext(MizarParser.ModeDefinitionContext,0)


        def functorDefinition(self):
            return self.getTypedRuleContext(MizarParser.FunctorDefinitionContext,0)


        def predicateDefinition(self):
            return self.getTypedRuleContext(MizarParser.PredicateDefinitionContext,0)


        def attributeDefinition(self):
            return self.getTypedRuleContext(MizarParser.AttributeDefinitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = MizarParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_definition)
        try:
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.structureDefinition()
                pass
            elif token in [MizarParser.T__30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.modeDefinition()
                pass
            elif token in [MizarParser.T__40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 501
                self.functorDefinition()
                pass
            elif token in [MizarParser.T__50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 502
                self.predicateDefinition()
                pass
            elif token in [MizarParser.T__58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 503
                self.attributeDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeDefinition(self):
            return self.getTypedRuleContext(MizarParser.ModeDefinitionContext,0)


        def functorDefinition(self):
            return self.getTypedRuleContext(MizarParser.FunctorDefinitionContext,0)


        def predicateDefinition(self):
            return self.getTypedRuleContext(MizarParser.PredicateDefinitionContext,0)


        def attributeDefinition(self):
            return self.getTypedRuleContext(MizarParser.AttributeDefinitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_redefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedefinition" ):
                listener.enterRedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedefinition" ):
                listener.exitRedefinition(self)




    def redefinition(self):

        localctx = MizarParser.RedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_redefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(MizarParser.T__22)
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__30]:
                self.state = 507
                self.modeDefinition()
                pass
            elif token in [MizarParser.T__40]:
                self.state = 508
                self.functorDefinition()
                pass
            elif token in [MizarParser.T__50]:
                self.state = 509
                self.predicateDefinition()
                pass
            elif token in [MizarParser.T__58]:
                self.state = 510
                self.attributeDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureSymbol(self):
            return self.getTypedRuleContext(MizarParser.StructureSymbolContext,0)


        def fields(self):
            return self.getTypedRuleContext(MizarParser.FieldsContext,0)


        def ancestors(self):
            return self.getTypedRuleContext(MizarParser.AncestorsContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureDefinition" ):
                listener.enterStructureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureDefinition" ):
                listener.exitStructureDefinition(self)




    def structureDefinition(self):

        localctx = MizarParser.StructureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structureDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(MizarParser.T__23)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24:
                self.state = 514
                self.match(MizarParser.T__24)
                self.state = 515
                self.ancestors()
                self.state = 516
                self.match(MizarParser.T__25)


            self.state = 520
            self.structureSymbol()
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__26:
                self.state = 521
                self.match(MizarParser.T__26)
                self.state = 522
                self.loci()


            self.state = 525
            self.match(MizarParser.T__27)
            self.state = 526
            self.fields()
            self.state = 527
            self.match(MizarParser.T__28)
            self.state = 528
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AncestorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureTypeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.StructureTypeExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.StructureTypeExpressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_ancestors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAncestors" ):
                listener.enterAncestors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAncestors" ):
                listener.exitAncestors(self)




    def ancestors(self):

        localctx = MizarParser.AncestorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ancestors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.structureTypeExpression()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 531
                self.match(MizarParser.T__2)
                self.state = 532
                self.structureTypeExpression()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTURE_SYMBOL(self):
            return self.getToken(MizarParser.STRUCTURE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_structureSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureSymbol" ):
                listener.enterStructureSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureSymbol" ):
                listener.exitStructureSymbol(self)




    def structureSymbol(self):

        localctx = MizarParser.StructureSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structureSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(MizarParser.STRUCTURE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_loci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoci" ):
                listener.enterLoci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoci" ):
                listener.exitLoci(self)




    def loci(self):

        localctx = MizarParser.LociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_loci)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.locus()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 541
                self.match(MizarParser.T__2)
                self.state = 542
                self.locus()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FieldSegmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.FieldSegmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFields" ):
                listener.enterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFields" ):
                listener.exitFields(self)




    def fields(self):

        localctx = MizarParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.fieldSegment()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 549
                self.match(MizarParser.T__2)
                self.state = 550
                self.fieldSegment()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableIdentifier(self):
            return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_locus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocus" ):
                listener.enterLocus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocus" ):
                listener.exitLocus(self)




    def locus(self):

        localctx = MizarParser.LocusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_locus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.variableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_variableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableIdentifier" ):
                listener.enterVariableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableIdentifier" ):
                listener.exitVariableIdentifier(self)




    def variableIdentifier(self):

        localctx = MizarParser.VariableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectorSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SelectorSymbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.SelectorSymbolContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_fieldSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldSegment" ):
                listener.enterFieldSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldSegment" ):
                listener.exitFieldSegment(self)




    def fieldSegment(self):

        localctx = MizarParser.FieldSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fieldSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.selectorSymbol()
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 561
                self.match(MizarParser.T__2)
                self.state = 562
                self.selectorSymbol()
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 568
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECTOR_SYMBOL(self):
            return self.getToken(MizarParser.SELECTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_selectorSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorSymbol" ):
                listener.enterSelectorSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorSymbol" ):
                listener.exitSelectorSymbol(self)




    def selectorSymbol(self):

        localctx = MizarParser.SelectorSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_selectorSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(MizarParser.SELECTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecification" ):
                listener.enterSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecification" ):
                listener.exitSpecification(self)




    def specification(self):

        localctx = MizarParser.SpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(MizarParser.T__29)
            self.state = 573
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modePattern(self):
            return self.getTypedRuleContext(MizarParser.ModePatternContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def modeProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ModePropertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.ModePropertyContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_modeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeDefinition" ):
                listener.enterModeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeDefinition" ):
                listener.exitModeDefinition(self)




    def modeDefinition(self):

        localctx = MizarParser.ModeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_modeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(MizarParser.T__30)
            self.state = 576
            self.modePattern()
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__29, MizarParser.T__31]:
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__29:
                    self.state = 577
                    self.specification()


                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__31:
                    self.state = 580
                    self.match(MizarParser.T__31)
                    self.state = 581
                    self.definiens()


                self.state = 584
                self.match(MizarParser.T__3)
                self.state = 585
                self.correctnessConditions()
                pass
            elif token in [MizarParser.T__32]:
                self.state = 586
                self.match(MizarParser.T__32)
                self.state = 587
                self.typeExpression()
                self.state = 588
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__39:
                self.state = 592
                self.modeProperty()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeSymbol(self):
            return self.getTypedRuleContext(MizarParser.ModeSymbolContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_modePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModePattern" ):
                listener.enterModePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModePattern" ):
                listener.exitModePattern(self)




    def modePattern(self):

        localctx = MizarParser.ModePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_modePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.modeSymbol()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__33:
                self.state = 599
                self.match(MizarParser.T__33)
                self.state = 600
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODE_SYMBOL(self):
            return self.getToken(MizarParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_modeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeSymbol" ):
                listener.enterModeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeSymbol" ):
                listener.exitModeSymbol(self)




    def modeSymbol(self):

        localctx = MizarParser.ModeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_modeSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__34 or _la==MizarParser.MODE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModeSynonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ModePatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.ModePatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_modeSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeSynonym" ):
                listener.enterModeSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeSynonym" ):
                listener.exitModeSynonym(self)




    def modeSynonym(self):

        localctx = MizarParser.ModeSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_modeSynonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(MizarParser.T__35)
            self.state = 606
            self.modePattern()
            self.state = 607
            self.match(MizarParser.T__15)
            self.state = 608
            self.modePattern()
            self.state = 609
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDefiniens(self):
            return self.getTypedRuleContext(MizarParser.SimpleDefiniensContext,0)


        def conditionalDefiniens(self):
            return self.getTypedRuleContext(MizarParser.ConditionalDefiniensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definiens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniens" ):
                listener.enterDefiniens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniens" ):
                listener.exitDefiniens(self)




    def definiens(self):

        localctx = MizarParser.DefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_definiens)
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.simpleDefiniens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.conditionalDefiniens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simpleDefiniens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDefiniens" ):
                listener.enterSimpleDefiniens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDefiniens" ):
                listener.exitSimpleDefiniens(self)




    def simpleDefiniens(self):

        localctx = MizarParser.SimpleDefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simpleDefiniens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__36:
                self.state = 615
                self.match(MizarParser.T__36)
                self.state = 616
                self.labelIdentifier()
                self.state = 617
                self.match(MizarParser.T__36)


            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 621
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 622
                self.termExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_labelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelIdentifier" ):
                listener.enterLabelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelIdentifier" ):
                listener.exitLabelIdentifier(self)




    def labelIdentifier(self):

        localctx = MizarParser.LabelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_labelIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalDefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partialDefiniensList(self):
            return self.getTypedRuleContext(MizarParser.PartialDefiniensListContext,0)


        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditionalDefiniens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalDefiniens" ):
                listener.enterConditionalDefiniens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalDefiniens" ):
                listener.exitConditionalDefiniens(self)




    def conditionalDefiniens(self):

        localctx = MizarParser.ConditionalDefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_conditionalDefiniens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__36:
                self.state = 627
                self.match(MizarParser.T__36)
                self.state = 628
                self.labelIdentifier()
                self.state = 629
                self.match(MizarParser.T__36)


            self.state = 633
            self.partialDefiniensList()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__37:
                self.state = 634
                self.match(MizarParser.T__37)
                self.state = 637
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 635
                    self.sentence()
                    pass

                elif la_ == 2:
                    self.state = 636
                    self.termExpression(0)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartialDefiniensListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partialDefiniens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PartialDefiniensContext)
            else:
                return self.getTypedRuleContext(MizarParser.PartialDefiniensContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_partialDefiniensList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartialDefiniensList" ):
                listener.enterPartialDefiniensList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartialDefiniensList" ):
                listener.exitPartialDefiniensList(self)




    def partialDefiniensList(self):

        localctx = MizarParser.PartialDefiniensListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_partialDefiniensList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.partialDefiniens()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 642
                self.match(MizarParser.T__2)
                self.state = 643
                self.partialDefiniens()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartialDefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SentenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.SentenceContext,i)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_partialDefiniens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartialDefiniens" ):
                listener.enterPartialDefiniens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartialDefiniens" ):
                listener.exitPartialDefiniens(self)




    def partialDefiniens(self):

        localctx = MizarParser.PartialDefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_partialDefiniens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 649
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 650
                self.termExpression(0)
                pass


            self.state = 653
            self.match(MizarParser.T__38)
            self.state = 654
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_modeProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeProperty" ):
                listener.enterModeProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeProperty" ):
                listener.exitModeProperty(self)




    def modeProperty(self):

        localctx = MizarParser.ModePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_modeProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(MizarParser.T__39)
            self.state = 657
            self.justification()
            self.state = 658
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorPattern(self):
            return self.getTypedRuleContext(MizarParser.FunctorPatternContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def functorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorPropertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorPropertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorDefinition" ):
                listener.enterFunctorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorDefinition" ):
                listener.exitFunctorDefinition(self)




    def functorDefinition(self):

        localctx = MizarParser.FunctorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(MizarParser.T__40)
            self.state = 661
            self.functorPattern()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__29:
                self.state = 662
                self.specification()


            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__31 or _la==MizarParser.T__41:
                self.state = 665
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__31 or _la==MizarParser.T__41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 666
                self.definiens()


            self.state = 669
            self.match(MizarParser.T__3)
            self.state = 670
            self.correctnessConditions()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__42) | (1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45))) != 0):
                self.state = 671
                self.functorProperty()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorSymbol(self):
            return self.getTypedRuleContext(MizarParser.FunctorSymbolContext,0)


        def functorLoci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorLociContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorLociContext,i)


        def leftFunctorBracket(self):
            return self.getTypedRuleContext(MizarParser.LeftFunctorBracketContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def rightFunctorBracket(self):
            return self.getTypedRuleContext(MizarParser.RightFunctorBracketContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorPattern" ):
                listener.enterFunctorPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorPattern" ):
                listener.exitFunctorPattern(self)




    def functorPattern(self):

        localctx = MizarParser.FunctorPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functorPattern)
        self._la = 0 # Token type
        try:
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__24, MizarParser.FUNCTOR_SYMBOL, MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                    self.state = 677
                    self.functorLoci()


                self.state = 680
                self.functorSymbol()
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                    self.state = 681
                    self.functorLoci()


                pass
            elif token in [MizarParser.T__46, MizarParser.T__47, MizarParser.LEFT_FUNCTOR_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.leftFunctorBracket()
                self.state = 685
                self.loci()
                self.state = 686
                self.rightFunctorBracket()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorProperty" ):
                listener.enterFunctorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorProperty" ):
                listener.exitFunctorProperty(self)




    def functorProperty(self):

        localctx = MizarParser.FunctorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_functorProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__42) | (1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 691
            self.justification()
            self.state = 692
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorSynonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorPatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorPatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functorSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorSynonym" ):
                listener.enterFunctorSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorSynonym" ):
                listener.exitFunctorSynonym(self)




    def functorSynonym(self):

        localctx = MizarParser.FunctorSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functorSynonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(MizarParser.T__35)
            self.state = 695
            self.functorPattern()
            self.state = 696
            self.match(MizarParser.T__15)
            self.state = 697
            self.functorPattern()
            self.state = 698
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorLociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorLoci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorLoci" ):
                listener.enterFunctorLoci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorLoci" ):
                listener.exitFunctorLoci(self)




    def functorLoci(self):

        localctx = MizarParser.FunctorLociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_functorLoci)
        try:
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.locus()
                pass
            elif token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.match(MizarParser.T__24)
                self.state = 702
                self.loci()
                self.state = 703
                self.match(MizarParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functorSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorSymbol" ):
                listener.enterFunctorSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorSymbol" ):
                listener.exitFunctorSymbol(self)




    def functorSymbol(self):

        localctx = MizarParser.FunctorSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_functorSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(MizarParser.FUNCTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LeftFunctorBracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.LEFT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_leftFunctorBracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftFunctorBracket" ):
                listener.enterLeftFunctorBracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftFunctorBracket" ):
                listener.exitLeftFunctorBracket(self)




    def leftFunctorBracket(self):

        localctx = MizarParser.LeftFunctorBracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_leftFunctorBracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__46 or _la==MizarParser.T__47 or _la==MizarParser.LEFT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightFunctorBracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.RIGHT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_rightFunctorBracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightFunctorBracket" ):
                listener.enterRightFunctorBracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightFunctorBracket" ):
                listener.exitRightFunctorBracket(self)




    def rightFunctorBracket(self):

        localctx = MizarParser.RightFunctorBracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_rightFunctorBracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__48 or _la==MizarParser.T__49 or _la==MizarParser.RIGHT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicatePattern(self):
            return self.getTypedRuleContext(MizarParser.PredicatePatternContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def predicateProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PredicatePropertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.PredicatePropertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateDefinition" ):
                listener.enterPredicateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateDefinition" ):
                listener.exitPredicateDefinition(self)




    def predicateDefinition(self):

        localctx = MizarParser.PredicateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_predicateDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(MizarParser.T__50)
            self.state = 714
            self.predicatePattern()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__31:
                self.state = 715
                self.match(MizarParser.T__31)
                self.state = 716
                self.definiens()


            self.state = 719
            self.match(MizarParser.T__3)
            self.state = 720
            self.correctnessConditions()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__51) | (1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55))) != 0):
                self.state = 721
                self.predicateProperty()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateSymbol(self):
            return self.getTypedRuleContext(MizarParser.PredicateSymbolContext,0)


        def loci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LociContext)
            else:
                return self.getTypedRuleContext(MizarParser.LociContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicatePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicatePattern" ):
                listener.enterPredicatePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicatePattern" ):
                listener.exitPredicatePattern(self)




    def predicatePattern(self):

        localctx = MizarParser.PredicatePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_predicatePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 727
                self.loci()


            self.state = 730
            self.predicateSymbol()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 731
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicateProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateProperty" ):
                listener.enterPredicateProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateProperty" ):
                listener.exitPredicateProperty(self)




    def predicateProperty(self):

        localctx = MizarParser.PredicatePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_predicateProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__51) | (1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 735
            self.justification()
            self.state = 736
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateSynonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicatePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PredicatePatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.PredicatePatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicateSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateSynonym" ):
                listener.enterPredicateSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateSynonym" ):
                listener.exitPredicateSynonym(self)




    def predicateSynonym(self):

        localctx = MizarParser.PredicateSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicateSynonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(MizarParser.T__35)
            self.state = 739
            self.predicatePattern()
            self.state = 740
            self.match(MizarParser.T__15)
            self.state = 741
            self.predicatePattern()
            self.state = 742
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateAntonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicatePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PredicatePatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.PredicatePatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicateAntonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateAntonym" ):
                listener.enterPredicateAntonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateAntonym" ):
                listener.exitPredicateAntonym(self)




    def predicateAntonym(self):

        localctx = MizarParser.PredicateAntonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicateAntonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(MizarParser.T__56)
            self.state = 745
            self.predicatePattern()
            self.state = 746
            self.match(MizarParser.T__15)
            self.state = 747
            self.predicatePattern()
            self.state = 748
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICATE_SYMBOL(self):
            return self.getToken(MizarParser.PREDICATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicateSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateSymbol" ):
                listener.enterPredicateSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateSymbol" ):
                listener.exitPredicateSymbol(self)




    def predicateSymbol(self):

        localctx = MizarParser.PredicateSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_predicateSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__57 or _la==MizarParser.PREDICATE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributePattern(self):
            return self.getTypedRuleContext(MizarParser.AttributePatternContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attributeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeDefinition" ):
                listener.enterAttributeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeDefinition" ):
                listener.exitAttributeDefinition(self)




    def attributeDefinition(self):

        localctx = MizarParser.AttributeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_attributeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(MizarParser.T__58)
            self.state = 753
            self.attributePattern()
            self.state = 754
            self.match(MizarParser.T__31)
            self.state = 755
            self.definiens()
            self.state = 756
            self.match(MizarParser.T__3)
            self.state = 757
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def attributeSymbol(self):
            return self.getTypedRuleContext(MizarParser.AttributeSymbolContext,0)


        def attributeLoci(self):
            return self.getTypedRuleContext(MizarParser.AttributeLociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attributePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributePattern" ):
                listener.enterAttributePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributePattern" ):
                listener.exitAttributePattern(self)




    def attributePattern(self):

        localctx = MizarParser.AttributePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_attributePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.locus()
            self.state = 760
            self.match(MizarParser.T__32)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                self.state = 761
                self.attributeLoci()


            self.state = 764
            self.attributeSymbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeSynonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AttributePatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.AttributePatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attributeSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSynonym" ):
                listener.enterAttributeSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSynonym" ):
                listener.exitAttributeSynonym(self)




    def attributeSynonym(self):

        localctx = MizarParser.AttributeSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributeSynonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(MizarParser.T__35)
            self.state = 767
            self.attributePattern()
            self.state = 768
            self.match(MizarParser.T__15)
            self.state = 769
            self.attributePattern()
            self.state = 770
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeAntonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AttributePatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.AttributePatternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attributeAntonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeAntonym" ):
                listener.enterAttributeAntonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeAntonym" ):
                listener.exitAttributeAntonym(self)




    def attributeAntonym(self):

        localctx = MizarParser.AttributeAntonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_attributeAntonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(MizarParser.T__56)
            self.state = 773
            self.attributePattern()
            self.state = 774
            self.match(MizarParser.T__15)
            self.state = 775
            self.attributePattern()
            self.state = 776
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE_SYMBOL(self):
            return self.getToken(MizarParser.ATTRIBUTE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_attributeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSymbol" ):
                listener.enterAttributeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSymbol" ):
                listener.exitAttributeSymbol(self)




    def attributeSymbol(self):

        localctx = MizarParser.AttributeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attributeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(MizarParser.ATTRIBUTE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeLociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attributeLoci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeLoci" ):
                listener.enterAttributeLoci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeLoci" ):
                listener.exitAttributeLoci(self)




    def attributeLoci(self):

        localctx = MizarParser.AttributeLociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributeLoci)
        try:
            self.state = 785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.loci()
                pass
            elif token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(MizarParser.T__24)
                self.state = 782
                self.loci()
                self.state = 783
                self.match(MizarParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusterRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existentialRegistration(self):
            return self.getTypedRuleContext(MizarParser.ExistentialRegistrationContext,0)


        def conditionalRegistration(self):
            return self.getTypedRuleContext(MizarParser.ConditionalRegistrationContext,0)


        def functorialRegistration(self):
            return self.getTypedRuleContext(MizarParser.FunctorialRegistrationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_clusterRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterRegistration" ):
                listener.enterClusterRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterRegistration" ):
                listener.exitClusterRegistration(self)




    def clusterRegistration(self):

        localctx = MizarParser.ClusterRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_clusterRegistration)
        try:
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.existentialRegistration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.conditionalRegistration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.functorialRegistration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistentialRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjectiveCluster(self):
            return self.getTypedRuleContext(MizarParser.AdjectiveClusterContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existentialRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistentialRegistration" ):
                listener.enterExistentialRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistentialRegistration" ):
                listener.exitExistentialRegistration(self)




    def existentialRegistration(self):

        localctx = MizarParser.ExistentialRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_existentialRegistration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(MizarParser.T__59)
            self.state = 793
            self.adjectiveCluster()
            self.state = 794
            self.match(MizarParser.T__15)
            self.state = 795
            self.typeExpression()
            self.state = 796
            self.match(MizarParser.T__3)
            self.state = 797
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdjectiveClusterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_adjectiveCluster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjectiveCluster" ):
                listener.enterAdjectiveCluster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjectiveCluster" ):
                listener.exitAdjectiveCluster(self)




    def adjectiveCluster(self):

        localctx = MizarParser.AdjectiveClusterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_adjectiveCluster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 799
                    self.adjective() 
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdjectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSymbol(self):
            return self.getTypedRuleContext(MizarParser.AttributeSymbolContext,0)


        def adjectiveArguments(self):
            return self.getTypedRuleContext(MizarParser.AdjectiveArgumentsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjective" ):
                listener.enterAdjective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjective" ):
                listener.exitAdjective(self)




    def adjective(self):

        localctx = MizarParser.AdjectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_adjective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__60:
                self.state = 805
                self.match(MizarParser.T__60)


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 808
                self.adjectiveArguments()


            self.state = 811
            self.attributeSymbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjectiveCluster(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveClusterContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveClusterContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditionalRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalRegistration" ):
                listener.enterConditionalRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalRegistration" ):
                listener.exitConditionalRegistration(self)




    def conditionalRegistration(self):

        localctx = MizarParser.ConditionalRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conditionalRegistration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(MizarParser.T__59)
            self.state = 814
            self.adjectiveCluster()
            self.state = 815
            self.match(MizarParser.T__29)
            self.state = 816
            self.adjectiveCluster()
            self.state = 817
            self.match(MizarParser.T__15)
            self.state = 818
            self.typeExpression()
            self.state = 819
            self.match(MizarParser.T__3)
            self.state = 820
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorialRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def adjectiveCluster(self):
            return self.getTypedRuleContext(MizarParser.AdjectiveClusterContext,0)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorialRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorialRegistration" ):
                listener.enterFunctorialRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorialRegistration" ):
                listener.exitFunctorialRegistration(self)




    def functorialRegistration(self):

        localctx = MizarParser.FunctorialRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functorialRegistration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(MizarParser.T__59)
            self.state = 823
            self.termExpression(0)
            self.state = 824
            self.match(MizarParser.T__29)
            self.state = 825
            self.adjectiveCluster()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__15:
                self.state = 826
                self.match(MizarParser.T__15)
                self.state = 827
                self.typeExpression()


            self.state = 830
            self.match(MizarParser.T__3)
            self.state = 831
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifyRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorPatternContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorPatternContext,i)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_identifyRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifyRegistration" ):
                listener.enterIdentifyRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifyRegistration" ):
                listener.exitIdentifyRegistration(self)




    def identifyRegistration(self):

        localctx = MizarParser.IdentifyRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identifyRegistration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(MizarParser.T__61)
            self.state = 834
            self.functorPattern()
            self.state = 835
            self.match(MizarParser.T__62)
            self.state = 836
            self.functorPattern()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__63:
                self.state = 837
                self.match(MizarParser.T__63)
                self.state = 838
                self.locus()
                self.state = 839
                self.match(MizarParser.T__57)
                self.state = 840
                self.locus()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__2:
                    self.state = 841
                    self.match(MizarParser.T__2)
                    self.state = 842
                    self.locus()
                    self.state = 843
                    self.match(MizarParser.T__57)
                    self.state = 844
                    self.locus()
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 853
            self.match(MizarParser.T__3)
            self.state = 854
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_propertyRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyRegistration" ):
                listener.enterPropertyRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyRegistration" ):
                listener.exitPropertyRegistration(self)




    def propertyRegistration(self):

        localctx = MizarParser.PropertyRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_propertyRegistration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(MizarParser.T__39)
            self.state = 857
            self.match(MizarParser.T__33)
            self.state = 858
            self.typeExpression()
            self.state = 859
            self.justification()
            self.state = 860
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReductionRegistrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TermExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.TermExpressionContext,i)


        def correctnessConditions(self):
            return self.getTypedRuleContext(MizarParser.CorrectnessConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reductionRegistration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReductionRegistration" ):
                listener.enterReductionRegistration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReductionRegistration" ):
                listener.exitReductionRegistration(self)




    def reductionRegistration(self):

        localctx = MizarParser.ReductionRegistrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_reductionRegistration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(MizarParser.T__64)
            self.state = 863
            self.termExpression(0)
            self.state = 864
            self.match(MizarParser.T__65)
            self.state = 865
            self.termExpression(0)
            self.state = 866
            self.match(MizarParser.T__3)
            self.state = 867
            self.correctnessConditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CorrectnessConditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correctnessCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.CorrectnessConditionContext)
            else:
                return self.getTypedRuleContext(MizarParser.CorrectnessConditionContext,i)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctnessConditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrectnessConditions" ):
                listener.enterCorrectnessConditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrectnessConditions" ):
                listener.exitCorrectnessConditions(self)




    def correctnessConditions(self):

        localctx = MizarParser.CorrectnessConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_correctnessConditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MizarParser.T__67 - 68)) | (1 << (MizarParser.T__68 - 68)) | (1 << (MizarParser.T__69 - 68)) | (1 << (MizarParser.T__70 - 68)) | (1 << (MizarParser.T__71 - 68)) | (1 << (MizarParser.T__72 - 68)))) != 0):
                self.state = 869
                self.correctnessCondition()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__66:
                self.state = 875
                self.match(MizarParser.T__66)
                self.state = 876
                self.justification()
                self.state = 877
                self.match(MizarParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CorrectnessConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctnessCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrectnessCondition" ):
                listener.enterCorrectnessCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrectnessCondition" ):
                listener.exitCorrectnessCondition(self)




    def correctnessCondition(self):

        localctx = MizarParser.CorrectnessConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_correctnessCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MizarParser.T__67 - 68)) | (1 << (MizarParser.T__68 - 68)) | (1 << (MizarParser.T__69 - 68)) | (1 << (MizarParser.T__70 - 68)) | (1 << (MizarParser.T__71 - 68)) | (1 << (MizarParser.T__72 - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 882
            self.justification()
            self.state = 883
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoremContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compactStatement(self):
            return self.getTypedRuleContext(MizarParser.CompactStatementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_theorem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheorem" ):
                listener.enterTheorem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheorem" ):
                listener.exitTheorem(self)




    def theorem(self):

        localctx = MizarParser.TheoremContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_theorem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(MizarParser.T__73)
            self.state = 886
            self.compactStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemeBlock(self):
            return self.getTypedRuleContext(MizarParser.SchemeBlockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeItem" ):
                listener.enterSchemeItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeItem" ):
                listener.exitSchemeItem(self)




    def schemeItem(self):

        localctx = MizarParser.SchemeItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_schemeItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.schemeBlock()
            self.state = 889
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemeIdentifier(self):
            return self.getTypedRuleContext(MizarParser.SchemeIdentifierContext,0)


        def schemeParameters(self):
            return self.getTypedRuleContext(MizarParser.SchemeParametersContext,0)


        def schemeConclusion(self):
            return self.getTypedRuleContext(MizarParser.SchemeConclusionContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def schemePremise(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SchemePremiseContext)
            else:
                return self.getTypedRuleContext(MizarParser.SchemePremiseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeBlock" ):
                listener.enterSchemeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeBlock" ):
                listener.exitSchemeBlock(self)




    def schemeBlock(self):

        localctx = MizarParser.SchemeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_schemeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(MizarParser.T__74)
            self.state = 892
            self.schemeIdentifier()
            self.state = 893
            self.match(MizarParser.T__46)
            self.state = 894
            self.schemeParameters()
            self.state = 895
            self.match(MizarParser.T__48)
            self.state = 896
            self.match(MizarParser.T__36)
            self.state = 897
            self.schemeConclusion()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__75:
                self.state = 898
                self.match(MizarParser.T__75)
                self.state = 899
                self.schemePremise()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__76:
                    self.state = 900
                    self.match(MizarParser.T__76)
                    self.state = 901
                    self.schemePremise()
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 909
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__3 or _la==MizarParser.T__77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 910
            self.reasoning()
            self.state = 911
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_schemeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeIdentifier" ):
                listener.enterSchemeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeIdentifier" ):
                listener.exitSchemeIdentifier(self)




    def schemeIdentifier(self):

        localctx = MizarParser.SchemeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_schemeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemeSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SchemeSegmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.SchemeSegmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeParameters" ):
                listener.enterSchemeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeParameters" ):
                listener.exitSchemeParameters(self)




    def schemeParameters(self):

        localctx = MizarParser.SchemeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_schemeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.schemeSegment()
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 916
                self.match(MizarParser.T__2)
                self.state = 917
                self.schemeSegment()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeConclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeConclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeConclusion" ):
                listener.enterSchemeConclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeConclusion" ):
                listener.exitSchemeConclusion(self)




    def schemeConclusion(self):

        localctx = MizarParser.SchemeConclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_schemeConclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemePremiseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemePremise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemePremise" ):
                listener.enterSchemePremise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemePremise" ):
                listener.exitSchemePremise(self)




    def schemePremise(self):

        localctx = MizarParser.SchemePremiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_schemePremise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.proposition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateSegment(self):
            return self.getTypedRuleContext(MizarParser.PredicateSegmentContext,0)


        def functorSegment(self):
            return self.getTypedRuleContext(MizarParser.FunctorSegmentContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeSegment" ):
                listener.enterSchemeSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeSegment" ):
                listener.exitSchemeSegment(self)




    def schemeSegment(self):

        localctx = MizarParser.SchemeSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_schemeSegment)
        try:
            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.predicateSegment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.functorSegment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PredicateIdentifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.PredicateIdentifierContext,i)


        def typeExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicateSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateSegment" ):
                listener.enterPredicateSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateSegment" ):
                listener.exitPredicateSegment(self)




    def predicateSegment(self):

        localctx = MizarParser.PredicateSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_predicateSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.predicateIdentifier()
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 932
                self.match(MizarParser.T__2)
                self.state = 933
                self.predicateIdentifier()
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 939
            self.match(MizarParser.T__47)
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 940
                self.typeExpressionList()


            self.state = 943
            self.match(MizarParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateIdentifier" ):
                listener.enterPredicateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateIdentifier" ):
                listener.exitPredicateIdentifier(self)




    def predicateIdentifier(self):

        localctx = MizarParser.PredicateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_predicateIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorIdentifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorIdentifierContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def typeExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorSegment" ):
                listener.enterFunctorSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorSegment" ):
                listener.exitFunctorSegment(self)




    def functorSegment(self):

        localctx = MizarParser.FunctorSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_functorSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.functorIdentifier()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 948
                self.match(MizarParser.T__2)
                self.state = 949
                self.functorIdentifier()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 955
            self.match(MizarParser.T__24)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 956
                self.typeExpressionList()


            self.state = 959
            self.match(MizarParser.T__25)
            self.state = 960
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctorIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorIdentifier" ):
                listener.enterFunctorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorIdentifier" ):
                listener.exitFunctorIdentifier(self)




    def functorIdentifier(self):

        localctx = MizarParser.FunctorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functorIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AuxiliaryItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MizarParser.StatementContext,0)


        def privateDefinition(self):
            return self.getTypedRuleContext(MizarParser.PrivateDefinitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_auxiliaryItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuxiliaryItem" ):
                listener.enterAuxiliaryItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuxiliaryItem" ):
                listener.exitAuxiliaryItem(self)




    def auxiliaryItem(self):

        localctx = MizarParser.AuxiliaryItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_auxiliaryItem)
        try:
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.statement()
                pass
            elif token in [MizarParser.T__34, MizarParser.T__78, MizarParser.T__79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.privateDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDefinition(self):
            return self.getTypedRuleContext(MizarParser.ConstantDefinitionContext,0)


        def privateFunctorDefinition(self):
            return self.getTypedRuleContext(MizarParser.PrivateFunctorDefinitionContext,0)


        def privatePredicateDefinition(self):
            return self.getTypedRuleContext(MizarParser.PrivatePredicateDefinitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_privateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateDefinition" ):
                listener.enterPrivateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateDefinition" ):
                listener.exitPrivateDefinition(self)




    def privateDefinition(self):

        localctx = MizarParser.PrivateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_privateDefinition)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.constantDefinition()
                pass
            elif token in [MizarParser.T__78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.privateFunctorDefinition()
                pass
            elif token in [MizarParser.T__79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.privatePredicateDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equatingList(self):
            return self.getTypedRuleContext(MizarParser.EquatingListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_constantDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefinition" ):
                listener.enterConstantDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefinition" ):
                listener.exitConstantDefinition(self)




    def constantDefinition(self):

        localctx = MizarParser.ConstantDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_constantDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(MizarParser.T__34)
            self.state = 974
            self.equatingList()
            self.state = 975
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquatingListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_equatingList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquatingList" ):
                listener.enterEquatingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquatingList" ):
                listener.exitEquatingList(self)




    def equatingList(self):

        localctx = MizarParser.EquatingListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_equatingList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.equating()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 978
                self.match(MizarParser.T__2)
                self.state = 979
                self.equating()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquatingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableIdentifier(self):
            return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_equating

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquating" ):
                listener.enterEquating(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquating" ):
                listener.exitEquating(self)




    def equating(self):

        localctx = MizarParser.EquatingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_equating)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.variableIdentifier()
            self.state = 986
            self.match(MizarParser.T__57)
            self.state = 987
            self.termExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivateFunctorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateFunctorPattern(self):
            return self.getTypedRuleContext(MizarParser.PrivateFunctorPatternContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_privateFunctorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateFunctorDefinition" ):
                listener.enterPrivateFunctorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateFunctorDefinition" ):
                listener.exitPrivateFunctorDefinition(self)




    def privateFunctorDefinition(self):

        localctx = MizarParser.PrivateFunctorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_privateFunctorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(MizarParser.T__78)
            self.state = 990
            self.privateFunctorPattern()
            self.state = 991
            self.match(MizarParser.T__57)
            self.state = 992
            self.termExpression(0)
            self.state = 993
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivatePredicateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privatePredicatePattern(self):
            return self.getTypedRuleContext(MizarParser.PrivatePredicatePatternContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_privatePredicateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivatePredicateDefinition" ):
                listener.enterPrivatePredicateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivatePredicateDefinition" ):
                listener.exitPrivatePredicateDefinition(self)




    def privatePredicateDefinition(self):

        localctx = MizarParser.PrivatePredicateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_privatePredicateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(MizarParser.T__79)
            self.state = 996
            self.privatePredicatePattern()
            self.state = 997
            self.match(MizarParser.T__31)
            self.state = 998
            self.sentence()
            self.state = 999
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivateFunctorPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functorIdentifier(self):
            return self.getTypedRuleContext(MizarParser.FunctorIdentifierContext,0)


        def typeExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_privateFunctorPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateFunctorPattern" ):
                listener.enterPrivateFunctorPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateFunctorPattern" ):
                listener.exitPrivateFunctorPattern(self)




    def privateFunctorPattern(self):

        localctx = MizarParser.PrivateFunctorPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_privateFunctorPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.functorIdentifier()
            self.state = 1002
            self.match(MizarParser.T__24)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 1003
                self.typeExpressionList()


            self.state = 1006
            self.match(MizarParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivatePredicatePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateIdentifier(self):
            return self.getTypedRuleContext(MizarParser.PredicateIdentifierContext,0)


        def typeExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_privatePredicatePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivatePredicatePattern" ):
                listener.enterPrivatePredicatePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivatePredicatePattern" ):
                listener.exitPrivatePredicatePattern(self)




    def privatePredicatePattern(self):

        localctx = MizarParser.PrivatePredicatePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_privatePredicatePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.predicateIdentifier()
            self.state = 1009
            self.match(MizarParser.T__47)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 1010
                self.typeExpressionList()


            self.state = 1013
            self.match(MizarParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReasoningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoningItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReasoningItemContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReasoningItemContext,i)


        def simpleJustification(self):
            return self.getTypedRuleContext(MizarParser.SimpleJustificationContext,0)


        def caseList(self):
            return self.getTypedRuleContext(MizarParser.CaseListContext,0)


        def supposeList(self):
            return self.getTypedRuleContext(MizarParser.SupposeListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReasoning" ):
                listener.enterReasoning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReasoning" ):
                listener.exitReasoning(self)




    def reasoning(self):

        localctx = MizarParser.ReasoningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_reasoning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self.reasoningItem() 
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__80 or _la==MizarParser.T__81:
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__80:
                    self.state = 1021
                    self.match(MizarParser.T__80)


                self.state = 1024
                self.match(MizarParser.T__81)
                self.state = 1025
                self.match(MizarParser.T__82)
                self.state = 1026
                self.simpleJustification()
                self.state = 1027
                self.match(MizarParser.T__3)
                self.state = 1030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__83]:
                    self.state = 1028
                    self.caseList()
                    pass
                elif token in [MizarParser.T__84]:
                    self.state = 1029
                    self.supposeList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.CaseContext)
            else:
                return self.getTypedRuleContext(MizarParser.CaseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_caseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseList" ):
                listener.enterCaseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseList" ):
                listener.exitCaseList(self)




    def caseList(self):

        localctx = MizarParser.CaseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_caseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1034
                self.case()
                self.state = 1037 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__83):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase" ):
                listener.enterCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase" ):
                listener.exitCase(self)




    def case(self):

        localctx = MizarParser.CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(MizarParser.T__83)
            self.state = 1042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1040
                self.proposition()
                pass
            elif token in [MizarParser.T__100]:
                self.state = 1041
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1044
            self.match(MizarParser.T__3)
            self.state = 1045
            self.reasoning()
            self.state = 1046
            self.match(MizarParser.T__17)
            self.state = 1047
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupposeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suppose(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SupposeContext)
            else:
                return self.getTypedRuleContext(MizarParser.SupposeContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_supposeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupposeList" ):
                listener.enterSupposeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupposeList" ):
                listener.exitSupposeList(self)




    def supposeList(self):

        localctx = MizarParser.SupposeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_supposeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1049
                self.suppose()
                self.state = 1052 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__84):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_suppose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuppose" ):
                listener.enterSuppose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuppose" ):
                listener.exitSuppose(self)




    def suppose(self):

        localctx = MizarParser.SupposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_suppose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(MizarParser.T__84)
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1055
                self.proposition()
                pass
            elif token in [MizarParser.T__100]:
                self.state = 1056
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1059
            self.match(MizarParser.T__3)
            self.state = 1060
            self.reasoning()
            self.state = 1061
            self.match(MizarParser.T__17)
            self.state = 1062
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReasoningItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auxiliaryItem(self):
            return self.getTypedRuleContext(MizarParser.AuxiliaryItemContext,0)


        def skeletonItem(self):
            return self.getTypedRuleContext(MizarParser.SkeletonItemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoningItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReasoningItem" ):
                listener.enterReasoningItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReasoningItem" ):
                listener.exitReasoningItem(self)




    def reasoningItem(self):

        localctx = MizarParser.ReasoningItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_reasoningItem)
        try:
            self.state = 1066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__117, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.auxiliaryItem()
                pass
            elif token in [MizarParser.T__20, MizarParser.T__85, MizarParser.T__86, MizarParser.T__87, MizarParser.T__88, MizarParser.T__89, MizarParser.T__90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.skeletonItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SkeletonItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalization(self):
            return self.getTypedRuleContext(MizarParser.GeneralizationContext,0)


        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def conclusion(self):
            return self.getTypedRuleContext(MizarParser.ConclusionContext,0)


        def exemplification(self):
            return self.getTypedRuleContext(MizarParser.ExemplificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_skeletonItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkeletonItem" ):
                listener.enterSkeletonItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkeletonItem" ):
                listener.exitSkeletonItem(self)




    def skeletonItem(self):

        localctx = MizarParser.SkeletonItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_skeletonItem)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.generalization()
                pass
            elif token in [MizarParser.T__85, MizarParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.assumption()
                pass
            elif token in [MizarParser.T__87, MizarParser.T__88, MizarParser.T__89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.conclusion()
                pass
            elif token in [MizarParser.T__90]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1071
                self.exemplification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.QualifiedVariablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_generalization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralization" ):
                listener.enterGeneralization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralization" ):
                listener.exitGeneralization(self)




    def generalization(self):

        localctx = MizarParser.GeneralizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_generalization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(MizarParser.T__20)
            self.state = 1075
            self.qualifiedVariables()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 1076
                self.match(MizarParser.T__21)
                self.state = 1077
                self.conditions()


            self.state = 1080
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleAssumption(self):
            return self.getTypedRuleContext(MizarParser.SingleAssumptionContext,0)


        def collectiveAssumption(self):
            return self.getTypedRuleContext(MizarParser.CollectiveAssumptionContext,0)


        def existentialAssumption(self):
            return self.getTypedRuleContext(MizarParser.ExistentialAssumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssumption" ):
                listener.enterAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssumption" ):
                listener.exitAssumption(self)




    def assumption(self):

        localctx = MizarParser.AssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_assumption)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.singleAssumption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.collectiveAssumption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.existentialAssumption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleAssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_singleAssumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleAssumption" ):
                listener.enterSingleAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleAssumption" ):
                listener.exitSingleAssumption(self)




    def singleAssumption(self):

        localctx = MizarParser.SingleAssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_singleAssumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(MizarParser.T__85)
            self.state = 1088
            self.proposition()
            self.state = 1089
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectiveAssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_collectiveAssumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectiveAssumption" ):
                listener.enterCollectiveAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectiveAssumption" ):
                listener.exitCollectiveAssumption(self)




    def collectiveAssumption(self):

        localctx = MizarParser.CollectiveAssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_collectiveAssumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(MizarParser.T__85)
            self.state = 1092
            self.conditions()
            self.state = 1093
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistentialAssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.QualifiedVariablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existentialAssumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistentialAssumption" ):
                listener.enterExistentialAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistentialAssumption" ):
                listener.exitExistentialAssumption(self)




    def existentialAssumption(self):

        localctx = MizarParser.ExistentialAssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_existentialAssumption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(MizarParser.T__86)
            self.state = 1096
            self.qualifiedVariables()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 1097
                self.match(MizarParser.T__21)
                self.state = 1098
                self.conditions()


            self.state = 1101
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compactStatement(self):
            return self.getTypedRuleContext(MizarParser.CompactStatementContext,0)


        def iterativeEquality(self):
            return self.getTypedRuleContext(MizarParser.IterativeEqualityContext,0)


        def diffuseConclusion(self):
            return self.getTypedRuleContext(MizarParser.DiffuseConclusionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConclusion" ):
                listener.enterConclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConclusion" ):
                listener.exitConclusion(self)




    def conclusion(self):

        localctx = MizarParser.ConclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conclusion)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__87 or _la==MizarParser.T__88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1104
                    self.compactStatement()
                    pass

                elif la_ == 2:
                    self.state = 1105
                    self.iterativeEquality()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.diffuseConclusion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiffuseConclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diffuseStatement(self):
            return self.getTypedRuleContext(MizarParser.DiffuseStatementContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuseConclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffuseConclusion" ):
                listener.enterDiffuseConclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffuseConclusion" ):
                listener.exitDiffuseConclusion(self)




    def diffuseConclusion(self):

        localctx = MizarParser.DiffuseConclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_diffuseConclusion)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(MizarParser.T__87)
                self.state = 1112
                self.diffuseStatement()
                pass
            elif token in [MizarParser.T__89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.match(MizarParser.T__89)
                self.state = 1114
                self.reasoning()
                self.state = 1115
                self.match(MizarParser.T__17)
                self.state = 1116
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExemplificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def example(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ExampleContext)
            else:
                return self.getTypedRuleContext(MizarParser.ExampleContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_exemplification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExemplification" ):
                listener.enterExemplification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExemplification" ):
                listener.exitExemplification(self)




    def exemplification(self):

        localctx = MizarParser.ExemplificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_exemplification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(MizarParser.T__90)
            self.state = 1121
            self.example()
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1122
                self.match(MizarParser.T__2)
                self.state = 1123
                self.example()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1129
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def variableIdentifier(self):
            return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_example

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExample" ):
                listener.enterExample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExample" ):
                listener.exitExample(self)




    def example(self):

        localctx = MizarParser.ExampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_example)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.termExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.variableIdentifier()
                self.state = 1133
                self.match(MizarParser.T__57)
                self.state = 1134
                self.termExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linkableStatement(self):
            return self.getTypedRuleContext(MizarParser.LinkableStatementContext,0)


        def diffuseStatement(self):
            return self.getTypedRuleContext(MizarParser.DiffuseStatementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = MizarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__80:
                    self.state = 1138
                    self.match(MizarParser.T__80)


                self.state = 1141
                self.linkableStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self.diffuseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compactStatement(self):
            return self.getTypedRuleContext(MizarParser.CompactStatementContext,0)


        def choiceStatement(self):
            return self.getTypedRuleContext(MizarParser.ChoiceStatementContext,0)


        def typeChangingStatement(self):
            return self.getTypedRuleContext(MizarParser.TypeChangingStatementContext,0)


        def iterativeEquality(self):
            return self.getTypedRuleContext(MizarParser.IterativeEqualityContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_linkableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkableStatement" ):
                listener.enterLinkableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkableStatement" ):
                listener.exitLinkableStatement(self)




    def linkableStatement(self):

        localctx = MizarParser.LinkableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_linkableStatement)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.compactStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.choiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1147
                self.typeChangingStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1148
                self.iterativeEquality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompactStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_compactStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactStatement" ):
                listener.enterCompactStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactStatement" ):
                listener.exitCompactStatement(self)




    def compactStatement(self):

        localctx = MizarParser.CompactStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_compactStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.proposition()
            self.state = 1152
            self.justification()
            self.state = 1153
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChoiceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.QualifiedVariablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def simpleJustification(self):
            return self.getTypedRuleContext(MizarParser.SimpleJustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_choiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoiceStatement" ):
                listener.enterChoiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoiceStatement" ):
                listener.exitChoiceStatement(self)




    def choiceStatement(self):

        localctx = MizarParser.ChoiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_choiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(MizarParser.T__91)
            self.state = 1156
            self.qualifiedVariables()
            self.state = 1157
            self.match(MizarParser.T__21)
            self.state = 1158
            self.conditions()
            self.state = 1159
            self.simpleJustification()
            self.state = 1160
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeChangingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeChangeList(self):
            return self.getTypedRuleContext(MizarParser.TypeChangeListContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def simpleJustification(self):
            return self.getTypedRuleContext(MizarParser.SimpleJustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_typeChangingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeChangingStatement" ):
                listener.enterTypeChangingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeChangingStatement" ):
                listener.exitTypeChangingStatement(self)




    def typeChangingStatement(self):

        localctx = MizarParser.TypeChangingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_typeChangingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(MizarParser.T__92)
            self.state = 1163
            self.typeChangeList()
            self.state = 1164
            self.match(MizarParser.T__93)
            self.state = 1165
            self.typeExpression()
            self.state = 1166
            self.simpleJustification()
            self.state = 1167
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeChangeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def variableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.VariableIdentifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_typeChangeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeChangeList" ):
                listener.enterTypeChangeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeChangeList" ):
                listener.exitTypeChangeList(self)




    def typeChangeList(self):

        localctx = MizarParser.TypeChangeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeChangeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1169
                self.equating()
                pass

            elif la_ == 2:
                self.state = 1170
                self.variableIdentifier()
                pass


            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1173
                self.match(MizarParser.T__2)
                self.state = 1176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 1174
                    self.equating()
                    pass

                elif la_ == 2:
                    self.state = 1175
                    self.variableIdentifier()
                    pass


                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterativeEqualityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TermExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.TermExpressionContext,i)


        def simpleJustification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SimpleJustificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.SimpleJustificationContext,i)


        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_iterativeEquality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterativeEquality" ):
                listener.enterIterativeEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterativeEquality" ):
                listener.exitIterativeEquality(self)




    def iterativeEquality(self):

        localctx = MizarParser.IterativeEqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_iterativeEquality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1183
                self.labelIdentifier()
                self.state = 1184
                self.match(MizarParser.T__36)


            self.state = 1188
            self.termExpression(0)
            self.state = 1189
            self.match(MizarParser.T__57)
            self.state = 1190
            self.termExpression(0)
            self.state = 1191
            self.simpleJustification()
            self.state = 1196 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1192
                self.match(MizarParser.T__94)
                self.state = 1193
                self.termExpression(0)
                self.state = 1194
                self.simpleJustification()
                self.state = 1198 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__94):
                    break

            self.state = 1200
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiffuseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffuseStatement" ):
                listener.enterDiffuseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffuseStatement" ):
                listener.exitDiffuseStatement(self)




    def diffuseStatement(self):

        localctx = MizarParser.DiffuseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_diffuseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 1202
                self.labelIdentifier()
                self.state = 1203
                self.match(MizarParser.T__36)


            self.state = 1207
            self.match(MizarParser.T__95)
            self.state = 1208
            self.reasoning()
            self.state = 1209
            self.match(MizarParser.T__17)
            self.state = 1210
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleJustification(self):
            return self.getTypedRuleContext(MizarParser.SimpleJustificationContext,0)


        def proof(self):
            return self.getTypedRuleContext(MizarParser.ProofContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_justification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJustification" ):
                listener.enterJustification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJustification" ):
                listener.exitJustification(self)




    def justification(self):

        localctx = MizarParser.JustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_justification)
        try:
            self.state = 1214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__96, MizarParser.T__97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.simpleJustification()
                pass
            elif token in [MizarParser.T__77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.proof()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleJustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def straightforwardJustification(self):
            return self.getTypedRuleContext(MizarParser.StraightforwardJustificationContext,0)


        def schemeJustification(self):
            return self.getTypedRuleContext(MizarParser.SchemeJustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simpleJustification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleJustification" ):
                listener.enterSimpleJustification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleJustification" ):
                listener.exitSimpleJustification(self)




    def simpleJustification(self):

        localctx = MizarParser.SimpleJustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_simpleJustification)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__94, MizarParser.T__96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1216
                self.straightforwardJustification()
                pass
            elif token in [MizarParser.T__97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.schemeJustification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProofContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProof" ):
                listener.enterProof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProof" ):
                listener.exitProof(self)




    def proof(self):

        localctx = MizarParser.ProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_proof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(MizarParser.T__77)
            self.state = 1221
            self.reasoning()
            self.state = 1222
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StraightforwardJustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_straightforwardJustification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightforwardJustification" ):
                listener.enterStraightforwardJustification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightforwardJustification" ):
                listener.exitStraightforwardJustification(self)




    def straightforwardJustification(self):

        localctx = MizarParser.StraightforwardJustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_straightforwardJustification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__96:
                self.state = 1224
                self.match(MizarParser.T__96)
                self.state = 1225
                self.references()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeJustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemeReference(self):
            return self.getTypedRuleContext(MizarParser.SchemeReferenceContext,0)


        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeJustification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeJustification" ):
                listener.enterSchemeJustification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeJustification" ):
                listener.exitSchemeJustification(self)




    def schemeJustification(self):

        localctx = MizarParser.SchemeJustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_schemeJustification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(MizarParser.T__97)
            self.state = 1229
            self.schemeReference()
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24:
                self.state = 1230
                self.match(MizarParser.T__24)
                self.state = 1231
                self.references()
                self.state = 1232
                self.match(MizarParser.T__25)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReferenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReferenceContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = MizarParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.reference()
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1237
                self.match(MizarParser.T__2)
                self.state = 1238
                self.reference()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localReference(self):
            return self.getTypedRuleContext(MizarParser.LocalReferenceContext,0)


        def libraryReference(self):
            return self.getTypedRuleContext(MizarParser.LibraryReferenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference" ):
                listener.enterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference" ):
                listener.exitReference(self)




    def reference(self):

        localctx = MizarParser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reference)
        try:
            self.state = 1246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.localReference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.libraryReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localSchemeReference(self):
            return self.getTypedRuleContext(MizarParser.LocalSchemeReferenceContext,0)


        def librarySchemeReference(self):
            return self.getTypedRuleContext(MizarParser.LibrarySchemeReferenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_schemeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeReference" ):
                listener.enterSchemeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeReference" ):
                listener.exitSchemeReference(self)




    def schemeReference(self):

        localctx = MizarParser.SchemeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_schemeReference)
        try:
            self.state = 1250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.localSchemeReference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.librarySchemeReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_localReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalReference" ):
                listener.enterLocalReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalReference" ):
                listener.exitLocalReference(self)




    def localReference(self):

        localctx = MizarParser.LocalReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_localReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.labelIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalSchemeReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemeIdentifier(self):
            return self.getTypedRuleContext(MizarParser.SchemeIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_localSchemeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalSchemeReference" ):
                listener.enterLocalSchemeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalSchemeReference" ):
                listener.exitLocalSchemeReference(self)




    def localSchemeReference(self):

        localctx = MizarParser.LocalSchemeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_localSchemeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.schemeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def articleName(self):
            return self.getTypedRuleContext(MizarParser.ArticleNameContext,0)


        def theoremNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TheoremNumberContext)
            else:
                return self.getTypedRuleContext(MizarParser.TheoremNumberContext,i)


        def definitionNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DefinitionNumberContext)
            else:
                return self.getTypedRuleContext(MizarParser.DefinitionNumberContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_libraryReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryReference" ):
                listener.enterLibraryReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryReference" ):
                listener.exitLibraryReference(self)




    def libraryReference(self):

        localctx = MizarParser.LibraryReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_libraryReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.articleName()
            self.state = 1257
            self.match(MizarParser.T__36)
            self.state = 1261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.NUMERAL]:
                self.state = 1258
                self.theoremNumber()
                pass
            elif token in [MizarParser.T__98]:
                self.state = 1259
                self.match(MizarParser.T__98)
                self.state = 1260
                self.definitionNumber()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1263
                    self.match(MizarParser.T__2)
                    self.state = 1267
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MizarParser.NUMERAL]:
                        self.state = 1264
                        self.theoremNumber()
                        pass
                    elif token in [MizarParser.T__98]:
                        self.state = 1265
                        self.match(MizarParser.T__98)
                        self.state = 1266
                        self.definitionNumber()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibrarySchemeReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def articleName(self):
            return self.getTypedRuleContext(MizarParser.ArticleNameContext,0)


        def schemeNumber(self):
            return self.getTypedRuleContext(MizarParser.SchemeNumberContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_librarySchemeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrarySchemeReference" ):
                listener.enterLibrarySchemeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrarySchemeReference" ):
                listener.exitLibrarySchemeReference(self)




    def librarySchemeReference(self):

        localctx = MizarParser.LibrarySchemeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_librarySchemeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.articleName()
            self.state = 1275
            self.match(MizarParser.T__36)
            self.state = 1276
            self.match(MizarParser.T__99)
            self.state = 1277
            self.schemeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoremNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_theoremNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoremNumber" ):
                listener.enterTheoremNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoremNumber" ):
                listener.exitTheoremNumber(self)




    def theoremNumber(self):

        localctx = MizarParser.TheoremNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_theoremNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_definitionNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitionNumber" ):
                listener.enterDefinitionNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitionNumber" ):
                listener.exitDefinitionNumber(self)




    def definitionNumber(self):

        localctx = MizarParser.DefinitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_definitionNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemeNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_schemeNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemeNumber" ):
                listener.enterSchemeNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemeNumber" ):
                listener.exitSchemeNumber(self)




    def schemeNumber(self):

        localctx = MizarParser.SchemeNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_schemeNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PropositionContext)
            else:
                return self.getTypedRuleContext(MizarParser.PropositionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_conditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditions" ):
                listener.enterConditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditions" ):
                listener.exitConditions(self)




    def conditions(self):

        localctx = MizarParser.ConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(MizarParser.T__100)
            self.state = 1286
            self.proposition()
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__76:
                self.state = 1287
                self.match(MizarParser.T__76)
                self.state = 1288
                self.proposition()
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def labelIdentifier(self):
            return self.getTypedRuleContext(MizarParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proposition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProposition" ):
                listener.enterProposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProposition" ):
                listener.exitProposition(self)




    def proposition(self):

        localctx = MizarParser.PropositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_proposition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.labelIdentifier()
                self.state = 1295
                self.match(MizarParser.T__36)


            self.state = 1299
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SentenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formulaExpression(self):
            return self.getTypedRuleContext(MizarParser.FormulaExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_sentence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSentence" ):
                listener.enterSentence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSentence" ):
                listener.exitSentence(self)




    def sentence(self):

        localctx = MizarParser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_sentence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.formulaExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormulaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formulaExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FormulaExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.FormulaExpressionContext,i)


        def atomicFormulaExpression(self):
            return self.getTypedRuleContext(MizarParser.AtomicFormulaExpressionContext,0)


        def quantifiedFormulaExpression(self):
            return self.getTypedRuleContext(MizarParser.QuantifiedFormulaExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_formulaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormulaExpression" ):
                listener.enterFormulaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormulaExpression" ):
                listener.exitFormulaExpression(self)



    def formulaExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.FormulaExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_formulaExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1304
                self.match(MizarParser.T__24)
                self.state = 1305
                self.formulaExpression(0)
                self.state = 1306
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.state = 1308
                self.atomicFormulaExpression()
                pass

            elif la_ == 3:
                self.state = 1309
                self.quantifiedFormulaExpression()
                pass

            elif la_ == 4:
                self.state = 1310
                self.match(MizarParser.T__106)
                self.state = 1311
                self.formulaExpression(3)
                pass

            elif la_ == 5:
                self.state = 1312
                self.match(MizarParser.T__107)
                pass

            elif la_ == 6:
                self.state = 1313
                self.match(MizarParser.T__108)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1340
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1338
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1316
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1317
                        self.match(MizarParser.T__101)
                        self.state = 1318
                        self.formulaExpression(10)
                        pass

                    elif la_ == 2:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1319
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1320
                        self.match(MizarParser.T__101)
                        self.state = 1321
                        self.match(MizarParser.T__102)
                        self.state = 1322
                        self.match(MizarParser.T__101)
                        self.state = 1323
                        self.formulaExpression(9)
                        pass

                    elif la_ == 3:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1324
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1325
                        self.match(MizarParser.T__103)
                        self.state = 1326
                        self.formulaExpression(8)
                        pass

                    elif la_ == 4:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1327
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1328
                        self.match(MizarParser.T__103)
                        self.state = 1329
                        self.match(MizarParser.T__102)
                        self.state = 1330
                        self.match(MizarParser.T__103)
                        self.state = 1331
                        self.formulaExpression(7)
                        pass

                    elif la_ == 5:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1332
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1333
                        self.match(MizarParser.T__104)
                        self.state = 1334
                        self.formulaExpression(6)
                        pass

                    elif la_ == 6:
                        localctx = MizarParser.FormulaExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formulaExpression)
                        self.state = 1335
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1336
                        self.match(MizarParser.T__105)
                        self.state = 1337
                        self.formulaExpression(5)
                        pass

             
                self.state = 1342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomicFormulaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PredicateSymbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.PredicateSymbolContext,i)


        def termExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TermExpressionListContext)
            else:
                return self.getTypedRuleContext(MizarParser.TermExpressionListContext,i)


        def predicateIdentifier(self):
            return self.getTypedRuleContext(MizarParser.PredicateIdentifierContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_atomicFormulaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFormulaExpression" ):
                listener.enterAtomicFormulaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFormulaExpression" ):
                listener.exitAtomicFormulaExpression(self)




    def atomicFormulaExpression(self):

        localctx = MizarParser.AtomicFormulaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_atomicFormulaExpression)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1343
                    self.termExpressionList()


                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__109 or _la==MizarParser.T__110:
                    self.state = 1346
                    _la = self._input.LA(1)
                    if not(_la==MizarParser.T__109 or _la==MizarParser.T__110):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1347
                    self.match(MizarParser.T__106)


                self.state = 1350
                self.predicateSymbol()
                self.state = 1352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self.termExpressionList()


                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1356
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MizarParser.T__109 or _la==MizarParser.T__110:
                            self.state = 1354
                            _la = self._input.LA(1)
                            if not(_la==MizarParser.T__109 or _la==MizarParser.T__110):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1355
                            self.match(MizarParser.T__106)


                        self.state = 1358
                        self.predicateSymbol()
                        self.state = 1359
                        self.termExpressionList() 
                    self.state = 1365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.predicateIdentifier()
                self.state = 1367
                self.match(MizarParser.T__47)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1368
                    self.termExpressionList()


                self.state = 1371
                self.match(MizarParser.T__49)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1373
                self.termExpression(0)
                self.state = 1374
                self.match(MizarParser.T__32)
                self.state = 1376 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1375
                        self.adjective()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1378 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1380
                self.termExpression(0)
                self.state = 1381
                self.match(MizarParser.T__32)
                self.state = 1382
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifiedFormulaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.QualifiedVariablesContext,0)


        def formulaExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FormulaExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.FormulaExpressionContext,i)


        def quantifiedFormulaExpression(self):
            return self.getTypedRuleContext(MizarParser.QuantifiedFormulaExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_quantifiedFormulaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedFormulaExpression" ):
                listener.enterQuantifiedFormulaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedFormulaExpression" ):
                listener.exitQuantifiedFormulaExpression(self)




    def quantifiedFormulaExpression(self):

        localctx = MizarParser.QuantifiedFormulaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_quantifiedFormulaExpression)
        self._la = 0 # Token type
        try:
            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(MizarParser.T__15)
                self.state = 1387
                self.qualifiedVariables()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__111:
                    self.state = 1388
                    self.match(MizarParser.T__111)
                    self.state = 1389
                    self.formulaExpression(0)


                self.state = 1395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__112]:
                    self.state = 1392
                    self.match(MizarParser.T__112)
                    self.state = 1393
                    self.formulaExpression(0)
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__113]:
                    self.state = 1394
                    self.quantifiedFormulaExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MizarParser.T__113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(MizarParser.T__113)
                self.state = 1398
                self.qualifiedVariables()
                self.state = 1399
                self.match(MizarParser.T__111)
                self.state = 1400
                self.formulaExpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitlyQualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.ImplicitlyQualifiedVariablesContext,0)


        def explicitlyQualifiedVariables(self):
            return self.getTypedRuleContext(MizarParser.ExplicitlyQualifiedVariablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualifiedVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedVariables" ):
                listener.enterQualifiedVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedVariables" ):
                listener.exitQualifiedVariables(self)




    def qualifiedVariables(self):

        localctx = MizarParser.QualifiedVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_qualifiedVariables)
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1404
                self.implicitlyQualifiedVariables()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.explicitlyQualifiedVariables()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1406
                self.explicitlyQualifiedVariables()
                self.state = 1407
                self.match(MizarParser.T__2)
                self.state = 1408
                self.implicitlyQualifiedVariables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitlyQualifiedVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_implicitlyQualifiedVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitlyQualifiedVariables" ):
                listener.enterImplicitlyQualifiedVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitlyQualifiedVariables" ):
                listener.exitImplicitlyQualifiedVariables(self)




    def implicitlyQualifiedVariables(self):

        localctx = MizarParser.ImplicitlyQualifiedVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_implicitlyQualifiedVariables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.variables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitlyQualifiedVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.QualifiedSegmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.QualifiedSegmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_explicitlyQualifiedVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitlyQualifiedVariables" ):
                listener.enterExplicitlyQualifiedVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitlyQualifiedVariables" ):
                listener.exitExplicitlyQualifiedVariables(self)




    def explicitlyQualifiedVariables(self):

        localctx = MizarParser.ExplicitlyQualifiedVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_explicitlyQualifiedVariables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.qualifiedSegment()
            self.state = 1419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1415
                    self.match(MizarParser.T__2)
                    self.state = 1416
                    self.qualifiedSegment() 
                self.state = 1421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def qualification(self):
            return self.getTypedRuleContext(MizarParser.QualificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualifiedSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedSegment" ):
                listener.enterQualifiedSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedSegment" ):
                listener.exitQualifiedSegment(self)




    def qualifiedSegment(self):

        localctx = MizarParser.QualifiedSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_qualifiedSegment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.variables()
            self.state = 1423
            self.qualification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.VariableIdentifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariables" ):
                listener.enterVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariables" ):
                listener.exitVariables(self)




    def variables(self):

        localctx = MizarParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.variableIdentifier()
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1426
                self.match(MizarParser.T__2)
                self.state = 1427
                self.variableIdentifier()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualification" ):
                listener.enterQualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualification" ):
                listener.exitQualification(self)




    def qualification(self):

        localctx = MizarParser.QualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_qualification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__114 or _la==MizarParser.T__115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1434
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjectiveCluster(self):
            return self.getTypedRuleContext(MizarParser.AdjectiveClusterContext,0)


        def radixTypeExpression(self):
            return self.getTypedRuleContext(MizarParser.RadixTypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)




    def typeExpression(self):

        localctx = MizarParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_typeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.adjectiveCluster()
            self.state = 1437
            self.radixTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RadixTypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def radixType(self):
            return self.getTypedRuleContext(MizarParser.RadixTypeContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_radixTypeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadixTypeExpression" ):
                listener.enterRadixTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadixTypeExpression" ):
                listener.exitRadixTypeExpression(self)




    def radixTypeExpression(self):

        localctx = MizarParser.RadixTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_radixTypeExpression)
        try:
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self.match(MizarParser.T__24)
                self.state = 1440
                self.radixType()
                self.state = 1441
                self.match(MizarParser.T__25)
                pass
            elif token in [MizarParser.T__34, MizarParser.MODE_SYMBOL, MizarParser.STRUCTURE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1443
                self.radixType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureTypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureSymbol(self):
            return self.getTypedRuleContext(MizarParser.StructureSymbolContext,0)


        def termExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionListContext,0)


        def adjectiveCluster(self):
            return self.getTypedRuleContext(MizarParser.AdjectiveClusterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structureTypeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureTypeExpression" ):
                listener.enterStructureTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureTypeExpression" ):
                listener.exitStructureTypeExpression(self)




    def structureTypeExpression(self):

        localctx = MizarParser.StructureTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_structureTypeExpression)
        self._la = 0 # Token type
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(MizarParser.T__24)
                self.state = 1447
                self.structureSymbol()
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__26:
                    self.state = 1448
                    self.match(MizarParser.T__26)
                    self.state = 1449
                    self.termExpressionList()


                self.state = 1452
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1454
                self.adjectiveCluster()
                self.state = 1455
                self.structureSymbol()
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__26:
                    self.state = 1456
                    self.match(MizarParser.T__26)
                    self.state = 1457
                    self.termExpressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RadixTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeSymbol(self):
            return self.getTypedRuleContext(MizarParser.ModeSymbolContext,0)


        def termExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionListContext,0)


        def structureSymbol(self):
            return self.getTypedRuleContext(MizarParser.StructureSymbolContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_radixType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadixType" ):
                listener.enterRadixType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadixType" ):
                listener.exitRadixType(self)




    def radixType(self):

        localctx = MizarParser.RadixTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_radixType)
        try:
            self.state = 1472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__34, MizarParser.MODE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.modeSymbol()
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.match(MizarParser.T__33)
                    self.state = 1464
                    self.termExpressionList()


                pass
            elif token in [MizarParser.STRUCTURE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.structureSymbol()
                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.match(MizarParser.T__26)
                    self.state = 1469
                    self.termExpressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.TypeExpressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_typeExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpressionList" ):
                listener.enterTypeExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpressionList" ):
                listener.exitTypeExpressionList(self)




    def typeExpressionList(self):

        localctx = MizarParser.TypeExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_typeExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.typeExpression()
            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1475
                self.match(MizarParser.T__2)
                self.state = 1476
                self.typeExpression()
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(MizarParser.ArgumentsContext,i)


        def functorSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.FunctorSymbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.FunctorSymbolContext,i)


        def unitaryTerm(self):
            return self.getTypedRuleContext(MizarParser.UnitaryTermContext,0)


        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_termExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpression" ):
                listener.enterTermExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpression" ):
                listener.exitTermExpression(self)



    def termExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.TermExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 314
        self.enterRecursionRule(localctx, 314, self.RULE_termExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1483
                    self.arguments()


                self.state = 1495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1487 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1486
                            self.functorSymbol()
                            self.state = 1489 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==MizarParser.FUNCTOR_SYMBOL):
                                break

                        self.state = 1491
                        self.arguments() 
                    self.state = 1497
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                self.state = 1499 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1498
                        self.functorSymbol()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1501 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                self.state = 1504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1503
                    self.arguments()


                pass

            elif la_ == 2:
                self.state = 1506
                self.unitaryTerm()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MizarParser.TermExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_termExpression)
                    self.state = 1509
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1510
                    self.match(MizarParser.T__116)
                    self.state = 1511
                    self.typeExpression() 
                self.state = 1516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnitaryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionContext,0)


        def leftFunctorBracket(self):
            return self.getTypedRuleContext(MizarParser.LeftFunctorBracketContext,0)


        def termExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionListContext,0)


        def rightFunctorBracket(self):
            return self.getTypedRuleContext(MizarParser.RightFunctorBracketContext,0)


        def functorIdentifier(self):
            return self.getTypedRuleContext(MizarParser.FunctorIdentifierContext,0)


        def structureSymbol(self):
            return self.getTypedRuleContext(MizarParser.StructureSymbolContext,0)


        def variableIdentifier(self):
            return self.getTypedRuleContext(MizarParser.VariableIdentifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def postqualification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PostqualificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.PostqualificationContext,i)


        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def selectorSymbol(self):
            return self.getTypedRuleContext(MizarParser.SelectorSymbolContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def privateDefinitionParameter(self):
            return self.getTypedRuleContext(MizarParser.PrivateDefinitionParameterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_unitaryTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitaryTerm" ):
                listener.enterUnitaryTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitaryTerm" ):
                listener.exitUnitaryTerm(self)




    def unitaryTerm(self):

        localctx = MizarParser.UnitaryTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_unitaryTerm)
        self._la = 0 # Token type
        try:
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.match(MizarParser.T__24)
                self.state = 1518
                self.termExpression(0)
                self.state = 1519
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.leftFunctorBracket()
                self.state = 1522
                self.termExpressionList()
                self.state = 1523
                self.rightFunctorBracket()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1525
                self.functorIdentifier()
                self.state = 1526
                self.match(MizarParser.T__24)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__119 - 118)) | (1 << (MizarParser.T__122 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1527
                    self.termExpressionList()


                self.state = 1530
                self.match(MizarParser.T__25)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1532
                self.structureSymbol()
                self.state = 1533
                self.match(MizarParser.T__27)
                self.state = 1534
                self.termExpressionList()
                self.state = 1535
                self.match(MizarParser.T__28)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1537
                self.match(MizarParser.T__117)
                self.state = 1538
                self.structureSymbol()
                self.state = 1539
                self.match(MizarParser.T__33)
                self.state = 1540
                self.termExpression(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1542
                self.variableIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1543
                self.match(MizarParser.T__46)
                self.state = 1544
                self.termExpression(0)
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__120:
                    self.state = 1545
                    self.postqualification()
                    self.state = 1550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1551
                self.match(MizarParser.T__36)
                self.state = 1552
                self.sentence()
                self.state = 1553
                self.match(MizarParser.T__48)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1555
                self.match(MizarParser.T__117)
                self.state = 1556
                self.match(MizarParser.T__34)
                self.state = 1557
                self.match(MizarParser.T__33)
                self.state = 1558
                self.match(MizarParser.T__118)
                self.state = 1559
                self.termExpression(0)
                self.state = 1563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1560
                        self.postqualification() 
                    self.state = 1565
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1566
                self.match(MizarParser.NUMERAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1567
                self.match(MizarParser.T__117)
                self.state = 1568
                self.selectorSymbol()
                self.state = 1569
                self.match(MizarParser.T__33)
                self.state = 1570
                self.termExpression(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1572
                self.match(MizarParser.T__117)
                self.state = 1573
                self.selectorSymbol()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1574
                self.match(MizarParser.T__117)
                self.state = 1575
                self.typeExpression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1576
                self.privateDefinitionParameter()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1577
                self.match(MizarParser.T__119)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unitaryTerm(self):
            return self.getTypedRuleContext(MizarParser.UnitaryTermContext,0)


        def termExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = MizarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_arguments)
        try:
            self.state = 1585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1580
                self.unitaryTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(MizarParser.T__24)
                self.state = 1582
                self.termExpressionList()
                self.state = 1583
                self.match(MizarParser.T__25)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdjectiveArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpressionList(self):
            return self.getTypedRuleContext(MizarParser.TermExpressionListContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjectiveArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjectiveArguments" ):
                listener.enterAdjectiveArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjectiveArguments" ):
                listener.exitAdjectiveArguments(self)




    def adjectiveArguments(self):

        localctx = MizarParser.AdjectiveArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_adjectiveArguments)
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1587
                self.termExpressionList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(MizarParser.T__24)
                self.state = 1589
                self.termExpressionList()
                self.state = 1590
                self.match(MizarParser.T__25)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def termExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.TermExpressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.TermExpressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_termExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpressionList" ):
                listener.enterTermExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpressionList" ):
                listener.exitTermExpressionList(self)




    def termExpressionList(self):

        localctx = MizarParser.TermExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_termExpressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.termExpression(0)
            self.state = 1599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1595
                    self.match(MizarParser.T__2)
                    self.state = 1596
                    self.termExpression(0) 
                self.state = 1601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostqualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualifyingSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PostqualifyingSegmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.PostqualifyingSegmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualification" ):
                listener.enterPostqualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualification" ):
                listener.exitPostqualification(self)




    def postqualification(self):

        localctx = MizarParser.PostqualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_postqualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(MizarParser.T__120)
            self.state = 1603
            self.postqualifyingSegment()
            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1604
                    self.match(MizarParser.T__2)
                    self.state = 1605
                    self.postqualifyingSegment() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostqualifyingSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualifiedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PostqualifiedVariableContext)
            else:
                return self.getTypedRuleContext(MizarParser.PostqualifiedVariableContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(MizarParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualifyingSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualifyingSegment" ):
                listener.enterPostqualifyingSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualifyingSegment" ):
                listener.exitPostqualifyingSegment(self)




    def postqualifyingSegment(self):

        localctx = MizarParser.PostqualifyingSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_postqualifyingSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.postqualifiedVariable()
            self.state = 1616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1612
                    self.match(MizarParser.T__2)
                    self.state = 1613
                    self.postqualifiedVariable() 
                self.state = 1618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1619
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__32 or _la==MizarParser.T__121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1620
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostqualifiedVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_postqualifiedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualifiedVariable" ):
                listener.enterPostqualifiedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualifiedVariable" ):
                listener.exitPostqualifiedVariable(self)




    def postqualifiedVariable(self):

        localctx = MizarParser.PostqualifiedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_postqualifiedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivateDefinitionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MizarParser.RULE_privateDefinitionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateDefinitionParameter" ):
                listener.enterPrivateDefinitionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateDefinitionParameter" ):
                listener.exitPrivateDefinitionParameter(self)




    def privateDefinitionParameter(self):

        localctx = MizarParser.PrivateDefinitionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_privateDefinitionParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            _la = self._input.LA(1)
            if not(((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & ((1 << (MizarParser.T__122 - 123)) | (1 << (MizarParser.T__123 - 123)) | (1 << (MizarParser.T__124 - 123)) | (1 << (MizarParser.T__125 - 123)) | (1 << (MizarParser.T__126 - 123)) | (1 << (MizarParser.T__127 - 123)) | (1 << (MizarParser.T__128 - 123)) | (1 << (MizarParser.T__129 - 123)) | (1 << (MizarParser.T__130 - 123)) | (1 << (MizarParser.T__131 - 123)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[143] = self.formulaExpression_sempred
        self._predicates[157] = self.termExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def formulaExpression_sempred(self, localctx:FormulaExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def termExpression_sempred(self, localctx:TermExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         




