# Generated from c:\dev\mimosa-project\emparser\antlr\Mizar.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0092")
        buf.write("\u0654\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\3\2\3\2\3\2\3\3\3\3\7")
        buf.write("\3\u0150\n\3\f\3\16\3\u0153\13\3\3\4\3\4\3\4\5\4\u0158")
        buf.write("\n\4\3\5\3\5\3\5\3\5\7\5\u015e\n\5\f\5\16\5\u0161\13\5")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\7\7\u016b\n\7\f\7\16")
        buf.write("\7\u016e\13\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u0178")
        buf.write("\n\t\f\t\16\t\u017b\13\t\3\t\3\t\3\n\3\n\3\13\6\13\u0182")
        buf.write("\n\13\r\13\16\13\u0183\3\f\3\f\7\f\u0188\n\f\f\f\16\f")
        buf.write("\u018b\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0194\n\r")
        buf.write("\3\16\3\16\3\16\3\16\7\16\u019a\n\16\f\16\16\16\u019d")
        buf.write("\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\7")
        buf.write("\20\u01a8\n\20\f\20\16\20\u01ab\13\20\3\21\3\21\3\22\3")
        buf.write("\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\7\25\u01bc\n\25\f\25\16\25\u01bf\13\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u01ca\n\26\f")
        buf.write("\26\16\26\u01cd\13\26\3\26\3\26\3\27\3\27\3\27\7\27\u01d4")
        buf.write("\n\27\f\27\16\27\u01d7\13\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\5\30\u01de\n\30\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01e6")
        buf.write("\n\31\3\32\3\32\3\32\3\32\5\32\u01ec\n\32\3\32\3\32\3")
        buf.write("\33\3\33\3\34\3\34\3\34\3\34\3\34\5\34\u01f7\n\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u01fe\n\35\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u0205\n\36\3\36\3\36\3\36\5\36\u020a\n\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\7\37\u0214\n")
        buf.write("\37\f\37\16\37\u0217\13\37\3 \3 \3!\3!\3!\7!\u021e\n!")
        buf.write("\f!\16!\u0221\13!\3\"\3\"\3\"\7\"\u0226\n\"\f\"\16\"\u0229")
        buf.write("\13\"\3#\3#\3$\3$\3%\3%\3%\7%\u0232\n%\f%\16%\u0235\13")
        buf.write("%\3%\3%\3&\3&\3\'\3\'\3\'\3(\3(\3(\5(\u0241\n(\3(\3(\5")
        buf.write("(\u0245\n(\3(\3(\3(\3(\3(\3(\5(\u024d\n(\3(\7(\u0250\n")
        buf.write("(\f(\16(\u0253\13(\3)\3)\3)\5)\u0258\n)\3*\3*\3+\3+\3")
        buf.write("+\3+\3+\3+\3,\3,\5,\u0264\n,\3-\3-\3-\3-\5-\u026a\n-\3")
        buf.write("-\3-\5-\u026e\n-\3.\3.\3/\3/\3/\3/\5/\u0276\n/\3/\3/\3")
        buf.write("/\3/\5/\u027c\n/\5/\u027e\n/\3\60\3\60\3\60\7\60\u0283")
        buf.write("\n\60\f\60\16\60\u0286\13\60\3\61\3\61\5\61\u028a\n\61")
        buf.write("\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\5\63")
        buf.write("\u0296\n\63\3\63\3\63\5\63\u029a\n\63\3\63\3\63\3\63\7")
        buf.write("\63\u029f\n\63\f\63\16\63\u02a2\13\63\3\64\5\64\u02a5")
        buf.write("\n\64\3\64\3\64\5\64\u02a9\n\64\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u02af\n\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\67\3\67\3\67\3\67\3\67\5\67\u02c0\n\67\3")
        buf.write("8\38\39\39\3:\3:\3;\3;\3;\3;\5;\u02cc\n;\3;\3;\3;\7;\u02d1")
        buf.write("\n;\f;\16;\u02d4\13;\3<\5<\u02d7\n<\3<\3<\5<\u02db\n<")
        buf.write("\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3@\3")
        buf.write("@\3A\3A\3A\3A\3A\3A\3A\3B\3B\3B\5B\u02f9\nB\3B\3B\3C\3")
        buf.write("C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3E\3E\3F\3F\3F\3F\3F\5")
        buf.write("F\u0310\nF\3G\3G\3G\5G\u0315\nG\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("I\7I\u031f\nI\fI\16I\u0322\13I\3J\5J\u0325\nJ\3J\5J\u0328")
        buf.write("\nJ\3J\3J\3K\3K\3K\3K\3K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3")
        buf.write("L\5L\u033b\nL\3L\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\7M\u034d\nM\fM\16M\u0350\13M\5M\u0352\nM\3M\3")
        buf.write("M\3M\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\3O\3P\7P\u0365")
        buf.write("\nP\fP\16P\u0368\13P\3P\3P\3P\3P\5P\u036e\nP\3Q\3Q\3Q")
        buf.write("\3Q\3R\3R\3R\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\7T\u0385\nT\fT\16T\u0388\13T\5T\u038a\nT\3T\3T\3T\3")
        buf.write("T\3U\3U\3V\3V\3V\7V\u0395\nV\fV\16V\u0398\13V\3W\3W\3")
        buf.write("X\3X\3Y\3Y\5Y\u03a0\nY\3Z\3Z\3Z\7Z\u03a5\nZ\fZ\16Z\u03a8")
        buf.write("\13Z\3Z\3Z\5Z\u03ac\nZ\3Z\3Z\3[\3[\3\\\3\\\3\\\7\\\u03b5")
        buf.write("\n\\\f\\\16\\\u03b8\13\\\3\\\3\\\5\\\u03bc\n\\\3\\\3\\")
        buf.write("\3\\\3]\3]\3^\3^\5^\u03c5\n^\3_\3_\3_\5_\u03ca\n_\3`\3")
        buf.write("`\3`\3`\3a\3a\3a\7a\u03d3\na\fa\16a\u03d6\13a\3b\3b\3")
        buf.write("b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\3e\3e\3e\5e\u03eb")
        buf.write("\ne\3e\3e\3f\3f\3f\5f\u03f2\nf\3f\3f\3g\7g\u03f7\ng\f")
        buf.write("g\16g\u03fa\13g\3g\5g\u03fd\ng\3g\3g\3g\3g\3g\3g\5g\u0405")
        buf.write("\ng\5g\u0407\ng\3h\6h\u040a\nh\rh\16h\u040b\3i\3i\3i\5")
        buf.write("i\u0411\ni\3i\3i\3i\3i\3i\3j\6j\u0419\nj\rj\16j\u041a")
        buf.write("\3k\3k\3k\5k\u0420\nk\3k\3k\3k\3k\3k\3l\3l\5l\u0429\n")
        buf.write("l\3m\3m\3m\3m\5m\u042f\nm\3n\3n\3n\3n\5n\u0435\nn\3n\3")
        buf.write("n\3o\3o\3o\5o\u043c\no\3p\3p\3p\3p\3q\3q\3q\3q\3r\3r\3")
        buf.write("r\3r\5r\u044a\nr\3r\3r\3s\3s\3s\5s\u0451\ns\3s\5s\u0454")
        buf.write("\ns\3t\3t\3t\3t\3t\3t\3t\5t\u045d\nt\3u\3u\3u\3u\7u\u0463")
        buf.write("\nu\fu\16u\u0466\13u\3u\3u\3v\3v\3v\3v\3v\5v\u046f\nv")
        buf.write("\3w\5w\u0472\nw\3w\3w\5w\u0476\nw\3x\3x\3x\3x\5x\u047c")
        buf.write("\nx\3y\3y\3y\3y\3z\3z\3z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\3|\3|\5|\u0492\n|\3|\3|\3|\5|\u0497\n|\7|\u0499\n")
        buf.write("|\f|\16|\u049c\13|\3}\3}\3}\5}\u04a1\n}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\6}\u04ab\n}\r}\16}\u04ac\3}\3}\3~\3~\3~\5~")
        buf.write("\u04b4\n~\3~\3~\3~\3~\3~\3\177\3\177\5\177\u04bd\n\177")
        buf.write("\3\u0080\3\u0080\5\u0080\u04c1\n\u0080\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\3\u0082\5\u0082\u04c9\n\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u04d1\n\u0083\3\u0084\3\u0084\3\u0084\7\u0084\u04d6\n")
        buf.write("\u0084\f\u0084\16\u0084\u04d9\13\u0084\3\u0085\3\u0085")
        buf.write("\5\u0085\u04dd\n\u0085\3\u0086\3\u0086\5\u0086\u04e1\n")
        buf.write("\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u04ec\n\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u04f2\n\u0089\7\u0089")
        buf.write("\u04f4\n\u0089\f\u0089\16\u0089\u04f7\13\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\7\u008e\u0508\n\u008e\f\u008e\16\u008e\u050b\13\u008e")
        buf.write("\3\u008f\3\u008f\3\u008f\5\u008f\u0510\n\u008f\3\u008f")
        buf.write("\3\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0521\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0539\n\u0091")
        buf.write("\f\u0091\16\u0091\u053c\13\u0091\3\u0092\5\u0092\u053f")
        buf.write("\n\u0092\3\u0092\3\u0092\5\u0092\u0543\n\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0547\n\u0092\3\u0092\3\u0092\5\u0092")
        buf.write("\u054b\n\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0550\n")
        buf.write("\u0092\f\u0092\16\u0092\u0553\13\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0558\n\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\6\u0092\u055f\n\u0092\r\u0092\16\u0092")
        buf.write("\u0560\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0567\n")
        buf.write("\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u056d\n")
        buf.write("\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0572\n\u0093\3")
        buf.write("\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0579\n")
        buf.write("\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0581\n\u0094\3\u0095\3\u0095\3\u0096\3\u0096")
        buf.write("\3\u0096\7\u0096\u0588\n\u0096\f\u0096\16\u0096\u058b")
        buf.write("\13\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\7\u0098\u0593\n\u0098\f\u0098\16\u0098\u0596\13\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\6\u009a\u05a0\n\u009a\r\u009a\16\u009a\u05a1")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u05a7\n\u009a\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u05ad\n\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u05b5")
        buf.write("\n\u009b\5\u009b\u05b7\n\u009b\3\u009c\3\u009c\3\u009c")
        buf.write("\5\u009c\u05bc\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c")
        buf.write("\u05c1\n\u009c\5\u009c\u05c3\n\u009c\3\u009d\3\u009d\3")
        buf.write("\u009d\7\u009d\u05c8\n\u009d\f\u009d\16\u009d\u05cb\13")
        buf.write("\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u05d7\n\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u05db\n\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u05e4")
        buf.write("\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\7\u009e\u05f6\n\u009e\f\u009e")
        buf.write("\16\u009e\u05f9\13\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e")
        buf.write("\u0605\n\u009e\f\u009e\16\u009e\u0608\13\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0616\n\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\5\u009e\u061b\n\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\7\u009e\u0620\n\u009e\f\u009e\16\u009e")
        buf.write("\u0623\13\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u062a\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0631\n\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\7\u00a1\u0636\n\u00a1\f\u00a1\16\u00a1\u0639\13\u00a1")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u063f\n\u00a2")
        buf.write("\f\u00a2\16\u00a2\u0642\13\u00a2\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\7\u00a3\u0647\n\u00a3\f\u00a3\16\u00a3\u064a\13\u00a3")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u064e\n\u00a3\3\u00a4\3\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\2\4\u0120\u013a\u00a6\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\2\21")
        buf.write("\3\2\7\16\4\2%%\u0089\u0089\4\2\"\",,\3\2-\60\4\2\61\62")
        buf.write("\u008d\u008d\4\2\63\64\u008e\u008e\3\2\66:\4\2<<\u0087")
        buf.write("\u0087\3\2FK\4\2\6\6PP\3\2Z[\3\2pq\3\2uv\4\2##||\3\2}")
        buf.write("\u0086\2\u0680\2\u014a\3\2\2\2\4\u014d\3\2\2\2\6\u0157")
        buf.write("\3\2\2\2\b\u0159\3\2\2\2\n\u0164\3\2\2\2\f\u0166\3\2\2")
        buf.write("\2\16\u0171\3\2\2\2\20\u0173\3\2\2\2\22\u017e\3\2\2\2")
        buf.write("\24\u0181\3\2\2\2\26\u0185\3\2\2\2\30\u0193\3\2\2\2\32")
        buf.write("\u0195\3\2\2\2\34\u01a0\3\2\2\2\36\u01a4\3\2\2\2 \u01ac")
        buf.write("\3\2\2\2\"\u01ae\3\2\2\2$\u01b1\3\2\2\2&\u01b4\3\2\2\2")
        buf.write("(\u01b7\3\2\2\2*\u01c2\3\2\2\2,\u01d0\3\2\2\2.\u01dd\3")
        buf.write("\2\2\2\60\u01e5\3\2\2\2\62\u01e7\3\2\2\2\64\u01ef\3\2")
        buf.write("\2\2\66\u01f6\3\2\2\28\u01f8\3\2\2\2:\u01ff\3\2\2\2<\u0210")
        buf.write("\3\2\2\2>\u0218\3\2\2\2@\u021a\3\2\2\2B\u0222\3\2\2\2")
        buf.write("D\u022a\3\2\2\2F\u022c\3\2\2\2H\u022e\3\2\2\2J\u0238\3")
        buf.write("\2\2\2L\u023a\3\2\2\2N\u023d\3\2\2\2P\u0254\3\2\2\2R\u0259")
        buf.write("\3\2\2\2T\u025b\3\2\2\2V\u0263\3\2\2\2X\u0269\3\2\2\2")
        buf.write("Z\u026f\3\2\2\2\\\u0275\3\2\2\2^\u027f\3\2\2\2`\u0289")
        buf.write("\3\2\2\2b\u028e\3\2\2\2d\u0292\3\2\2\2f\u02ae\3\2\2\2")
        buf.write("h\u02b0\3\2\2\2j\u02b4\3\2\2\2l\u02bf\3\2\2\2n\u02c1\3")
        buf.write("\2\2\2p\u02c3\3\2\2\2r\u02c5\3\2\2\2t\u02c7\3\2\2\2v\u02d6")
        buf.write("\3\2\2\2x\u02dc\3\2\2\2z\u02e0\3\2\2\2|\u02e6\3\2\2\2")
        buf.write("~\u02ec\3\2\2\2\u0080\u02ee\3\2\2\2\u0082\u02f5\3\2\2")
        buf.write("\2\u0084\u02fc\3\2\2\2\u0086\u0302\3\2\2\2\u0088\u0308")
        buf.write("\3\2\2\2\u008a\u030f\3\2\2\2\u008c\u0314\3\2\2\2\u008e")
        buf.write("\u0316\3\2\2\2\u0090\u0320\3\2\2\2\u0092\u0324\3\2\2\2")
        buf.write("\u0094\u032b\3\2\2\2\u0096\u0334\3\2\2\2\u0098\u033f\3")
        buf.write("\2\2\2\u009a\u0356\3\2\2\2\u009c\u035c\3\2\2\2\u009e\u0366")
        buf.write("\3\2\2\2\u00a0\u036f\3\2\2\2\u00a2\u0373\3\2\2\2\u00a4")
        buf.write("\u0376\3\2\2\2\u00a6\u0379\3\2\2\2\u00a8\u038f\3\2\2\2")
        buf.write("\u00aa\u0391\3\2\2\2\u00ac\u0399\3\2\2\2\u00ae\u039b\3")
        buf.write("\2\2\2\u00b0\u039f\3\2\2\2\u00b2\u03a1\3\2\2\2\u00b4\u03af")
        buf.write("\3\2\2\2\u00b6\u03b1\3\2\2\2\u00b8\u03c0\3\2\2\2\u00ba")
        buf.write("\u03c4\3\2\2\2\u00bc\u03c9\3\2\2\2\u00be\u03cb\3\2\2\2")
        buf.write("\u00c0\u03cf\3\2\2\2\u00c2\u03d7\3\2\2\2\u00c4\u03db\3")
        buf.write("\2\2\2\u00c6\u03e1\3\2\2\2\u00c8\u03e7\3\2\2\2\u00ca\u03ee")
        buf.write("\3\2\2\2\u00cc\u03f8\3\2\2\2\u00ce\u0409\3\2\2\2\u00d0")
        buf.write("\u040d\3\2\2\2\u00d2\u0418\3\2\2\2\u00d4\u041c\3\2\2\2")
        buf.write("\u00d6\u0428\3\2\2\2\u00d8\u042e\3\2\2\2\u00da\u0430\3")
        buf.write("\2\2\2\u00dc\u043b\3\2\2\2\u00de\u043d\3\2\2\2\u00e0\u0441")
        buf.write("\3\2\2\2\u00e2\u0445\3\2\2\2\u00e4\u0453\3\2\2\2\u00e6")
        buf.write("\u045c\3\2\2\2\u00e8\u045e\3\2\2\2\u00ea\u046e\3\2\2\2")
        buf.write("\u00ec\u0475\3\2\2\2\u00ee\u047b\3\2\2\2\u00f0\u047d\3")
        buf.write("\2\2\2\u00f2\u0481\3\2\2\2\u00f4\u0488\3\2\2\2\u00f6\u0491")
        buf.write("\3\2\2\2\u00f8\u04a0\3\2\2\2\u00fa\u04b3\3\2\2\2\u00fc")
        buf.write("\u04bc\3\2\2\2\u00fe\u04c0\3\2\2\2\u0100\u04c2\3\2\2\2")
        buf.write("\u0102\u04c8\3\2\2\2\u0104\u04ca\3\2\2\2\u0106\u04d2\3")
        buf.write("\2\2\2\u0108\u04dc\3\2\2\2\u010a\u04e0\3\2\2\2\u010c\u04e2")
        buf.write("\3\2\2\2\u010e\u04e4\3\2\2\2\u0110\u04e6\3\2\2\2\u0112")
        buf.write("\u04f8\3\2\2\2\u0114\u04fd\3\2\2\2\u0116\u04ff\3\2\2\2")
        buf.write("\u0118\u0501\3\2\2\2\u011a\u0503\3\2\2\2\u011c\u050f\3")
        buf.write("\2\2\2\u011e\u0513\3\2\2\2\u0120\u0520\3\2\2\2\u0122\u0566")
        buf.write("\3\2\2\2\u0124\u0578\3\2\2\2\u0126\u0580\3\2\2\2\u0128")
        buf.write("\u0582\3\2\2\2\u012a\u0584\3\2\2\2\u012c\u058c\3\2\2\2")
        buf.write("\u012e\u058f\3\2\2\2\u0130\u0597\3\2\2\2\u0132\u05a6\3")
        buf.write("\2\2\2\u0134\u05b6\3\2\2\2\u0136\u05c2\3\2\2\2\u0138\u05c4")
        buf.write("\3\2\2\2\u013a\u0615\3\2\2\2\u013c\u0629\3\2\2\2\u013e")
        buf.write("\u0630\3\2\2\2\u0140\u0632\3\2\2\2\u0142\u063a\3\2\2\2")
        buf.write("\u0144\u0643\3\2\2\2\u0146\u064f\3\2\2\2\u0148\u0651\3")
        buf.write("\2\2\2\u014a\u014b\5\4\3\2\u014b\u014c\5\24\13\2\u014c")
        buf.write("\3\3\2\2\2\u014d\u0151\7\3\2\2\u014e\u0150\5\6\4\2\u014f")
        buf.write("\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2")
        buf.write("\u0151\u0152\3\2\2\2\u0152\5\3\2\2\2\u0153\u0151\3\2\2")
        buf.write("\2\u0154\u0158\5\b\5\2\u0155\u0158\5\f\7\2\u0156\u0158")
        buf.write("\5\20\t\2\u0157\u0154\3\2\2\2\u0157\u0155\3\2\2\2\u0157")
        buf.write("\u0156\3\2\2\2\u0158\7\3\2\2\2\u0159\u015a\7\4\2\2\u015a")
        buf.write("\u015f\5\n\6\2\u015b\u015c\7\5\2\2\u015c\u015e\5\n\6\2")
        buf.write("\u015d\u015b\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3")
        buf.write("\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161\u015f")
        buf.write("\3\2\2\2\u0162\u0163\7\6\2\2\u0163\t\3\2\2\2\u0164\u0165")
        buf.write("\7\u008f\2\2\u0165\13\3\2\2\2\u0166\u0167\t\2\2\2\u0167")
        buf.write("\u016c\5\16\b\2\u0168\u0169\7\5\2\2\u0169\u016b\5\16\b")
        buf.write("\2\u016a\u0168\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a")
        buf.write("\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e")
        buf.write("\u016c\3\2\2\2\u016f\u0170\7\6\2\2\u0170\r\3\2\2\2\u0171")
        buf.write("\u0172\7\u008f\2\2\u0172\17\3\2\2\2\u0173\u0174\7\17\2")
        buf.write("\2\u0174\u0179\5\22\n\2\u0175\u0176\7\5\2\2\u0176\u0178")
        buf.write("\5\22\n\2\u0177\u0175\3\2\2\2\u0178\u017b\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017c\3\2\2\2")
        buf.write("\u017b\u0179\3\2\2\2\u017c\u017d\7\6\2\2\u017d\21\3\2")
        buf.write("\2\2\u017e\u017f\7\u008f\2\2\u017f\23\3\2\2\2\u0180\u0182")
        buf.write("\5\26\f\2\u0181\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\25\3\2\2\2\u0185")
        buf.write("\u0189\7\20\2\2\u0186\u0188\5\30\r\2\u0187\u0186\3\2\2")
        buf.write("\2\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\27\3\2\2\2\u018b\u0189\3\2\2\2\u018c\u0194")
        buf.write("\5\32\16\2\u018d\u0194\5\"\22\2\u018e\u0194\5$\23\2\u018f")
        buf.write("\u0194\5&\24\2\u0190\u0194\5\u00a2R\2\u0191\u0194\5\u00a4")
        buf.write("S\2\u0192\u0194\5\u00ba^\2\u0193\u018c\3\2\2\2\u0193\u018d")
        buf.write("\3\2\2\2\u0193\u018e\3\2\2\2\u0193\u018f\3\2\2\2\u0193")
        buf.write("\u0190\3\2\2\2\u0193\u0191\3\2\2\2\u0193\u0192\3\2\2\2")
        buf.write("\u0194\31\3\2\2\2\u0195\u0196\7\21\2\2\u0196\u019b\5\34")
        buf.write("\17\2\u0197\u0198\7\5\2\2\u0198\u019a\5\34\17\2\u0199")
        buf.write("\u0197\3\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199\3\2\2\2")
        buf.write("\u019b\u019c\3\2\2\2\u019c\u019e\3\2\2\2\u019d\u019b\3")
        buf.write("\2\2\2\u019e\u019f\7\6\2\2\u019f\33\3\2\2\2\u01a0\u01a1")
        buf.write("\5\36\20\2\u01a1\u01a2\7\22\2\2\u01a2\u01a3\5\u0132\u009a")
        buf.write("\2\u01a3\35\3\2\2\2\u01a4\u01a9\5 \21\2\u01a5\u01a6\7")
        buf.write("\5\2\2\u01a6\u01a8\5 \21\2\u01a7\u01a5\3\2\2\2\u01a8\u01ab")
        buf.write("\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa")
        buf.write("\37\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01ad\7\u0090\2")
        buf.write("\2\u01ad!\3\2\2\2\u01ae\u01af\5(\25\2\u01af\u01b0\7\6")
        buf.write("\2\2\u01b0#\3\2\2\2\u01b1\u01b2\5*\26\2\u01b2\u01b3\7")
        buf.write("\6\2\2\u01b3%\3\2\2\2\u01b4\u01b5\5,\27\2\u01b5\u01b6")
        buf.write("\7\6\2\2\u01b6\'\3\2\2\2\u01b7\u01bd\7\23\2\2\u01b8\u01bc")
        buf.write("\5.\30\2\u01b9\u01bc\5\66\34\2\u01ba\u01bc\58\35\2\u01bb")
        buf.write("\u01b8\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01ba\3\2\2\2")
        buf.write("\u01bc\u01bf\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3")
        buf.write("\2\2\2\u01be\u01c0\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0\u01c1")
        buf.write("\7\24\2\2\u01c1)\3\2\2\2\u01c2\u01cb\7\25\2\2\u01c3\u01ca")
        buf.write("\5\62\32\2\u01c4\u01ca\5\u008cG\2\u01c5\u01ca\5\u0098")
        buf.write("M\2\u01c6\u01ca\5\u009aN\2\u01c7\u01ca\5\u009cO\2\u01c8")
        buf.write("\u01ca\5\u00ba^\2\u01c9\u01c3\3\2\2\2\u01c9\u01c4\3\2")
        buf.write("\2\2\u01c9\u01c5\3\2\2\2\u01c9\u01c6\3\2\2\2\u01c9\u01c7")
        buf.write("\3\2\2\2\u01c9\u01c8\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb")
        buf.write("\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2")
        buf.write("\u01cd\u01cb\3\2\2\2\u01ce\u01cf\7\24\2\2\u01cf+\3\2\2")
        buf.write("\2\u01d0\u01d5\7\26\2\2\u01d1\u01d4\5\62\32\2\u01d2\u01d4")
        buf.write("\5\60\31\2\u01d3\u01d1\3\2\2\2\u01d3\u01d2\3\2\2\2\u01d4")
        buf.write("\u01d7\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2")
        buf.write("\u01d6\u01d8\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01d9\7")
        buf.write("\24\2\2\u01d9-\3\2\2\2\u01da\u01de\5\62\32\2\u01db\u01de")
        buf.write("\5\64\33\2\u01dc\u01de\5\u00ba^\2\u01dd\u01da\3\2\2\2")
        buf.write("\u01dd\u01db\3\2\2\2\u01dd\u01dc\3\2\2\2\u01de/\3\2\2")
        buf.write("\2\u01df\u01e6\5\u0084C\2\u01e0\u01e6\5\u0086D\2\u01e1")
        buf.write("\u01e6\5j\66\2\u01e2\u01e6\5T+\2\u01e3\u01e6\5z>\2\u01e4")
        buf.write("\u01e6\5|?\2\u01e5\u01df\3\2\2\2\u01e5\u01e0\3\2\2\2\u01e5")
        buf.write("\u01e1\3\2\2\2\u01e5\u01e2\3\2\2\2\u01e5\u01e3\3\2\2\2")
        buf.write("\u01e5\u01e4\3\2\2\2\u01e6\61\3\2\2\2\u01e7\u01e8\7\27")
        buf.write("\2\2\u01e8\u01eb\5\u0126\u0094\2\u01e9\u01ea\7\30\2\2")
        buf.write("\u01ea\u01ec\5\u011a\u008e\2\u01eb\u01e9\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ee\7\6\2\2")
        buf.write("\u01ee\63\3\2\2\2\u01ef\u01f0\5\u00dco\2\u01f0\65\3\2")
        buf.write("\2\2\u01f1\u01f7\5:\36\2\u01f2\u01f7\5N(\2\u01f3\u01f7")
        buf.write("\5d\63\2\u01f4\u01f7\5t;\2\u01f5\u01f7\5\u0080A\2\u01f6")
        buf.write("\u01f1\3\2\2\2\u01f6\u01f2\3\2\2\2\u01f6\u01f3\3\2\2\2")
        buf.write("\u01f6\u01f4\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7\67\3\2")
        buf.write("\2\2\u01f8\u01fd\7\31\2\2\u01f9\u01fe\5N(\2\u01fa\u01fe")
        buf.write("\5d\63\2\u01fb\u01fe\5t;\2\u01fc\u01fe\5\u0080A\2\u01fd")
        buf.write("\u01f9\3\2\2\2\u01fd\u01fa\3\2\2\2\u01fd\u01fb\3\2\2\2")
        buf.write("\u01fd\u01fc\3\2\2\2\u01fe9\3\2\2\2\u01ff\u0204\7\32\2")
        buf.write("\2\u0200\u0201\7\33\2\2\u0201\u0202\5<\37\2\u0202\u0203")
        buf.write("\7\34\2\2\u0203\u0205\3\2\2\2\u0204\u0200\3\2\2\2\u0204")
        buf.write("\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0209\5> \2\u0207")
        buf.write("\u0208\7\35\2\2\u0208\u020a\5@!\2\u0209\u0207\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\7")
        buf.write("\36\2\2\u020c\u020d\5B\"\2\u020d\u020e\7\37\2\2\u020e")
        buf.write("\u020f\7\6\2\2\u020f;\3\2\2\2\u0210\u0215\5\u0134\u009b")
        buf.write("\2\u0211\u0212\7\5\2\2\u0212\u0214\5\u0134\u009b\2\u0213")
        buf.write("\u0211\3\2\2\2\u0214\u0217\3\2\2\2\u0215\u0213\3\2\2\2")
        buf.write("\u0215\u0216\3\2\2\2\u0216=\3\2\2\2\u0217\u0215\3\2\2")
        buf.write("\2\u0218\u0219\7\u008a\2\2\u0219?\3\2\2\2\u021a\u021f")
        buf.write("\5D#\2\u021b\u021c\7\5\2\2\u021c\u021e\5D#\2\u021d\u021b")
        buf.write("\3\2\2\2\u021e\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f")
        buf.write("\u0220\3\2\2\2\u0220A\3\2\2\2\u0221\u021f\3\2\2\2\u0222")
        buf.write("\u0227\5H%\2\u0223\u0224\7\5\2\2\u0224\u0226\5H%\2\u0225")
        buf.write("\u0223\3\2\2\2\u0226\u0229\3\2\2\2\u0227\u0225\3\2\2\2")
        buf.write("\u0227\u0228\3\2\2\2\u0228C\3\2\2\2\u0229\u0227\3\2\2")
        buf.write("\2\u022a\u022b\5F$\2\u022bE\3\2\2\2\u022c\u022d\7\u0090")
        buf.write("\2\2\u022dG\3\2\2\2\u022e\u0233\5J&\2\u022f\u0230\7\5")
        buf.write("\2\2\u0230\u0232\5J&\2\u0231\u022f\3\2\2\2\u0232\u0235")
        buf.write("\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234")
        buf.write("\u0236\3\2\2\2\u0235\u0233\3\2\2\2\u0236\u0237\5L\'\2")
        buf.write("\u0237I\3\2\2\2\u0238\u0239\7\u008b\2\2\u0239K\3\2\2\2")
        buf.write("\u023a\u023b\7 \2\2\u023b\u023c\5\u0132\u009a\2\u023c")
        buf.write("M\3\2\2\2\u023d\u023e\7!\2\2\u023e\u024c\5P)\2\u023f\u0241")
        buf.write("\5L\'\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u0244\3\2\2\2\u0242\u0243\7\"\2\2\u0243\u0245\5V,\2\u0244")
        buf.write("\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u0247\7\6\2\2\u0247\u024d\5\u009eP\2\u0248\u0249")
        buf.write("\7#\2\2\u0249\u024a\5\u0132\u009a\2\u024a\u024b\7\6\2")
        buf.write("\2\u024b\u024d\3\2\2\2\u024c\u0240\3\2\2\2\u024c\u0248")
        buf.write("\3\2\2\2\u024d\u0251\3\2\2\2\u024e\u0250\5b\62\2\u024f")
        buf.write("\u024e\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2")
        buf.write("\u0251\u0252\3\2\2\2\u0252O\3\2\2\2\u0253\u0251\3\2\2")
        buf.write("\2\u0254\u0257\5R*\2\u0255\u0256\7$\2\2\u0256\u0258\5")
        buf.write("@!\2\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258Q\3")
        buf.write("\2\2\2\u0259\u025a\t\3\2\2\u025aS\3\2\2\2\u025b\u025c")
        buf.write("\7&\2\2\u025c\u025d\5P)\2\u025d\u025e\7\22\2\2\u025e\u025f")
        buf.write("\5P)\2\u025f\u0260\7\6\2\2\u0260U\3\2\2\2\u0261\u0264")
        buf.write("\5X-\2\u0262\u0264\5\\/\2\u0263\u0261\3\2\2\2\u0263\u0262")
        buf.write("\3\2\2\2\u0264W\3\2\2\2\u0265\u0266\7\'\2\2\u0266\u0267")
        buf.write("\5Z.\2\u0267\u0268\7\'\2\2\u0268\u026a\3\2\2\2\u0269\u0265")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026d\3\2\2\2\u026b")
        buf.write("\u026e\5\u011e\u0090\2\u026c\u026e\5\u013a\u009e\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026eY\3\2\2\2\u026f")
        buf.write("\u0270\7\u0090\2\2\u0270[\3\2\2\2\u0271\u0272\7\'\2\2")
        buf.write("\u0272\u0273\5Z.\2\u0273\u0274\7\'\2\2\u0274\u0276\3\2")
        buf.write("\2\2\u0275\u0271\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277\u027d\5^\60\2\u0278\u027b\7(\2\2\u0279")
        buf.write("\u027c\5\u011e\u0090\2\u027a\u027c\5\u013a\u009e\2\u027b")
        buf.write("\u0279\3\2\2\2\u027b\u027a\3\2\2\2\u027c\u027e\3\2\2\2")
        buf.write("\u027d\u0278\3\2\2\2\u027d\u027e\3\2\2\2\u027e]\3\2\2")
        buf.write("\2\u027f\u0284\5`\61\2\u0280\u0281\7\5\2\2\u0281\u0283")
        buf.write("\5`\61\2\u0282\u0280\3\2\2\2\u0283\u0286\3\2\2\2\u0284")
        buf.write("\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285_\3\2\2\2\u0286")
        buf.write("\u0284\3\2\2\2\u0287\u028a\5\u011e\u0090\2\u0288\u028a")
        buf.write("\5\u013a\u009e\2\u0289\u0287\3\2\2\2\u0289\u0288\3\2\2")
        buf.write("\2\u028a\u028b\3\2\2\2\u028b\u028c\7)\2\2\u028c\u028d")
        buf.write("\5\u011e\u0090\2\u028da\3\2\2\2\u028e\u028f\7*\2\2\u028f")
        buf.write("\u0290\5\u00fc\177\2\u0290\u0291\7\6\2\2\u0291c\3\2\2")
        buf.write("\2\u0292\u0293\7+\2\2\u0293\u0295\5f\64\2\u0294\u0296")
        buf.write("\5L\'\2\u0295\u0294\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0299\3\2\2\2\u0297\u0298\t\4\2\2\u0298\u029a\5V,\2\u0299")
        buf.write("\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2")
        buf.write("\u029b\u029c\7\6\2\2\u029c\u02a0\5\u009eP\2\u029d\u029f")
        buf.write("\5h\65\2\u029e\u029d\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0")
        buf.write("\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1e\3\2\2\2\u02a2")
        buf.write("\u02a0\3\2\2\2\u02a3\u02a5\5l\67\2\u02a4\u02a3\3\2\2\2")
        buf.write("\u02a4\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\5")
        buf.write("n8\2\u02a7\u02a9\5l\67\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02af\3\2\2\2\u02aa\u02ab\5p9\2\u02ab\u02ac")
        buf.write("\5@!\2\u02ac\u02ad\5r:\2\u02ad\u02af\3\2\2\2\u02ae\u02a4")
        buf.write("\3\2\2\2\u02ae\u02aa\3\2\2\2\u02afg\3\2\2\2\u02b0\u02b1")
        buf.write("\t\5\2\2\u02b1\u02b2\5\u00fc\177\2\u02b2\u02b3\7\6\2\2")
        buf.write("\u02b3i\3\2\2\2\u02b4\u02b5\7&\2\2\u02b5\u02b6\5f\64\2")
        buf.write("\u02b6\u02b7\7\22\2\2\u02b7\u02b8\5f\64\2\u02b8\u02b9")
        buf.write("\7\6\2\2\u02b9k\3\2\2\2\u02ba\u02c0\5D#\2\u02bb\u02bc")
        buf.write("\7\33\2\2\u02bc\u02bd\5@!\2\u02bd\u02be\7\34\2\2\u02be")
        buf.write("\u02c0\3\2\2\2\u02bf\u02ba\3\2\2\2\u02bf\u02bb\3\2\2\2")
        buf.write("\u02c0m\3\2\2\2\u02c1\u02c2\7\u0088\2\2\u02c2o\3\2\2\2")
        buf.write("\u02c3\u02c4\t\6\2\2\u02c4q\3\2\2\2\u02c5\u02c6\t\7\2")
        buf.write("\2\u02c6s\3\2\2\2\u02c7\u02c8\7\65\2\2\u02c8\u02cb\5v")
        buf.write("<\2\u02c9\u02ca\7\"\2\2\u02ca\u02cc\5V,\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02ce\7\6\2\2\u02ce\u02d2\5\u009eP\2\u02cf\u02d1\5x=")
        buf.write("\2\u02d0\u02cf\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3u\3\2\2\2\u02d4\u02d2")
        buf.write("\3\2\2\2\u02d5\u02d7\5@!\2\u02d6\u02d5\3\2\2\2\u02d6\u02d7")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02da\5~@\2\u02d9\u02db")
        buf.write("\5@!\2\u02da\u02d9\3\2\2\2\u02da\u02db\3\2\2\2\u02dbw")
        buf.write("\3\2\2\2\u02dc\u02dd\t\b\2\2\u02dd\u02de\5\u00fc\177\2")
        buf.write("\u02de\u02df\7\6\2\2\u02dfy\3\2\2\2\u02e0\u02e1\7&\2\2")
        buf.write("\u02e1\u02e2\5v<\2\u02e2\u02e3\7\22\2\2\u02e3\u02e4\5")
        buf.write("v<\2\u02e4\u02e5\7\6\2\2\u02e5{\3\2\2\2\u02e6\u02e7\7")
        buf.write(";\2\2\u02e7\u02e8\5v<\2\u02e8\u02e9\7\22\2\2\u02e9\u02ea")
        buf.write("\5v<\2\u02ea\u02eb\7\6\2\2\u02eb}\3\2\2\2\u02ec\u02ed")
        buf.write("\t\t\2\2\u02ed\177\3\2\2\2\u02ee\u02ef\7=\2\2\u02ef\u02f0")
        buf.write("\5\u0082B\2\u02f0\u02f1\7\"\2\2\u02f1\u02f2\5V,\2\u02f2")
        buf.write("\u02f3\7\6\2\2\u02f3\u02f4\5\u009eP\2\u02f4\u0081\3\2")
        buf.write("\2\2\u02f5\u02f6\5D#\2\u02f6\u02f8\7#\2\2\u02f7\u02f9")
        buf.write("\5\u008aF\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fb\5\u0088E\2\u02fb\u0083\3\2")
        buf.write("\2\2\u02fc\u02fd\7&\2\2\u02fd\u02fe\5\u0082B\2\u02fe\u02ff")
        buf.write("\7\22\2\2\u02ff\u0300\5\u0082B\2\u0300\u0301\7\6\2\2\u0301")
        buf.write("\u0085\3\2\2\2\u0302\u0303\7;\2\2\u0303\u0304\5\u0082")
        buf.write("B\2\u0304\u0305\7\22\2\2\u0305\u0306\5\u0082B\2\u0306")
        buf.write("\u0307\7\6\2\2\u0307\u0087\3\2\2\2\u0308\u0309\7\u008c")
        buf.write("\2\2\u0309\u0089\3\2\2\2\u030a\u0310\5@!\2\u030b\u030c")
        buf.write("\7\33\2\2\u030c\u030d\5@!\2\u030d\u030e\7\34\2\2\u030e")
        buf.write("\u0310\3\2\2\2\u030f\u030a\3\2\2\2\u030f\u030b\3\2\2\2")
        buf.write("\u0310\u008b\3\2\2\2\u0311\u0315\5\u008eH\2\u0312\u0315")
        buf.write("\5\u0094K\2\u0313\u0315\5\u0096L\2\u0314\u0311\3\2\2\2")
        buf.write("\u0314\u0312\3\2\2\2\u0314\u0313\3\2\2\2\u0315\u008d\3")
        buf.write("\2\2\2\u0316\u0317\7>\2\2\u0317\u0318\5\u0090I\2\u0318")
        buf.write("\u0319\7\22\2\2\u0319\u031a\5\u0132\u009a\2\u031a\u031b")
        buf.write("\7\6\2\2\u031b\u031c\5\u009eP\2\u031c\u008f\3\2\2\2\u031d")
        buf.write("\u031f\5\u0092J\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2")
        buf.write("\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0091")
        buf.write("\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0325\7?\2\2\u0324")
        buf.write("\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0327\3\2\2\2")
        buf.write("\u0326\u0328\5\u013e\u00a0\2\u0327\u0326\3\2\2\2\u0327")
        buf.write("\u0328\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032a\5\u0088")
        buf.write("E\2\u032a\u0093\3\2\2\2\u032b\u032c\7>\2\2\u032c\u032d")
        buf.write("\5\u0090I\2\u032d\u032e\7 \2\2\u032e\u032f\5\u0090I\2")
        buf.write("\u032f\u0330\7\22\2\2\u0330\u0331\5\u0132\u009a\2\u0331")
        buf.write("\u0332\7\6\2\2\u0332\u0333\5\u009eP\2\u0333\u0095\3\2")
        buf.write("\2\2\u0334\u0335\7>\2\2\u0335\u0336\5\u013a\u009e\2\u0336")
        buf.write("\u0337\7 \2\2\u0337\u033a\5\u0090I\2\u0338\u0339\7\22")
        buf.write("\2\2\u0339\u033b\5\u0132\u009a\2\u033a\u0338\3\2\2\2\u033a")
        buf.write("\u033b\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\7\6\2\2")
        buf.write("\u033d\u033e\5\u009eP\2\u033e\u0097\3\2\2\2\u033f\u0340")
        buf.write("\7@\2\2\u0340\u0341\5f\64\2\u0341\u0342\7A\2\2\u0342\u0351")
        buf.write("\5f\64\2\u0343\u0344\7B\2\2\u0344\u0345\5D#\2\u0345\u0346")
        buf.write("\7<\2\2\u0346\u034e\5D#\2\u0347\u0348\7\5\2\2\u0348\u0349")
        buf.write("\5D#\2\u0349\u034a\7<\2\2\u034a\u034b\5D#\2\u034b\u034d")
        buf.write("\3\2\2\2\u034c\u0347\3\2\2\2\u034d\u0350\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0352\3\2\2\2")
        buf.write("\u0350\u034e\3\2\2\2\u0351\u0343\3\2\2\2\u0351\u0352\3")
        buf.write("\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\7\6\2\2\u0354\u0355")
        buf.write("\5\u009eP\2\u0355\u0099\3\2\2\2\u0356\u0357\7*\2\2\u0357")
        buf.write("\u0358\7$\2\2\u0358\u0359\5\u0132\u009a\2\u0359\u035a")
        buf.write("\5\u00fc\177\2\u035a\u035b\7\6\2\2\u035b\u009b\3\2\2\2")
        buf.write("\u035c\u035d\7C\2\2\u035d\u035e\5\u013a\u009e\2\u035e")
        buf.write("\u035f\7D\2\2\u035f\u0360\5\u013a\u009e\2\u0360\u0361")
        buf.write("\7\6\2\2\u0361\u0362\5\u009eP\2\u0362\u009d\3\2\2\2\u0363")
        buf.write("\u0365\5\u00a0Q\2\u0364\u0363\3\2\2\2\u0365\u0368\3\2")
        buf.write("\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u036d")
        buf.write("\3\2\2\2\u0368\u0366\3\2\2\2\u0369\u036a\7E\2\2\u036a")
        buf.write("\u036b\5\u00fc\177\2\u036b\u036c\7\6\2\2\u036c\u036e\3")
        buf.write("\2\2\2\u036d\u0369\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u009f")
        buf.write("\3\2\2\2\u036f\u0370\t\n\2\2\u0370\u0371\5\u00fc\177\2")
        buf.write("\u0371\u0372\7\6\2\2\u0372\u00a1\3\2\2\2\u0373\u0374\7")
        buf.write("L\2\2\u0374\u0375\5\u00f0y\2\u0375\u00a3\3\2\2\2\u0376")
        buf.write("\u0377\5\u00a6T\2\u0377\u0378\7\6\2\2\u0378\u00a5\3\2")
        buf.write("\2\2\u0379\u037a\7M\2\2\u037a\u037b\5\u00a8U\2\u037b\u037c")
        buf.write("\7\61\2\2\u037c\u037d\5\u00aaV\2\u037d\u037e\7\63\2\2")
        buf.write("\u037e\u037f\7\'\2\2\u037f\u0389\5\u00acW\2\u0380\u0381")
        buf.write("\7N\2\2\u0381\u0386\5\u00aeX\2\u0382\u0383\7O\2\2\u0383")
        buf.write("\u0385\5\u00aeX\2\u0384\u0382\3\2\2\2\u0385\u0388\3\2")
        buf.write("\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u038a")
        buf.write("\3\2\2\2\u0388\u0386\3\2\2\2\u0389\u0380\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\t\13\2")
        buf.write("\2\u038c\u038d\5\u00ccg\2\u038d\u038e\7\24\2\2\u038e\u00a7")
        buf.write("\3\2\2\2\u038f\u0390\7\u0090\2\2\u0390\u00a9\3\2\2\2\u0391")
        buf.write("\u0396\5\u00b0Y\2\u0392\u0393\7\5\2\2\u0393\u0395\5\u00b0")
        buf.write("Y\2\u0394\u0392\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394")
        buf.write("\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u00ab\3\2\2\2\u0398")
        buf.write("\u0396\3\2\2\2\u0399\u039a\5\u011e\u0090\2\u039a\u00ad")
        buf.write("\3\2\2\2\u039b\u039c\5\u011c\u008f\2\u039c\u00af\3\2\2")
        buf.write("\2\u039d\u03a0\5\u00b2Z\2\u039e\u03a0\5\u00b6\\\2\u039f")
        buf.write("\u039d\3\2\2\2\u039f\u039e\3\2\2\2\u03a0\u00b1\3\2\2\2")
        buf.write("\u03a1\u03a6\5\u00b4[\2\u03a2\u03a3\7\5\2\2\u03a3\u03a5")
        buf.write("\5\u00b4[\2\u03a4\u03a2\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6")
        buf.write("\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a9\3\2\2\2")
        buf.write("\u03a8\u03a6\3\2\2\2\u03a9\u03ab\7\62\2\2\u03aa\u03ac")
        buf.write("\5\u0138\u009d\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2")
        buf.write("\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\7\64\2\2\u03ae\u00b3")
        buf.write("\3\2\2\2\u03af\u03b0\7\u0090\2\2\u03b0\u00b5\3\2\2\2\u03b1")
        buf.write("\u03b6\5\u00b8]\2\u03b2\u03b3\7\5\2\2\u03b3\u03b5\5\u00b8")
        buf.write("]\2\u03b4\u03b2\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4")
        buf.write("\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8")
        buf.write("\u03b6\3\2\2\2\u03b9\u03bb\7\33\2\2\u03ba\u03bc\5\u0138")
        buf.write("\u009d\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\7\34\2\2\u03be\u03bf\5L\'\2")
        buf.write("\u03bf\u00b7\3\2\2\2\u03c0\u03c1\7\u0090\2\2\u03c1\u00b9")
        buf.write("\3\2\2\2\u03c2\u03c5\5\u00ecw\2\u03c3\u03c5\5\u00bc_\2")
        buf.write("\u03c4\u03c2\3\2\2\2\u03c4\u03c3\3\2\2\2\u03c5\u00bb\3")
        buf.write("\2\2\2\u03c6\u03ca\5\u00be`\2\u03c7\u03ca\5\u00c4c\2\u03c8")
        buf.write("\u03ca\5\u00c6d\2\u03c9\u03c6\3\2\2\2\u03c9\u03c7\3\2")
        buf.write("\2\2\u03c9\u03c8\3\2\2\2\u03ca\u00bd\3\2\2\2\u03cb\u03cc")
        buf.write("\7%\2\2\u03cc\u03cd\5\u00c0a\2\u03cd\u03ce\7\6\2\2\u03ce")
        buf.write("\u00bf\3\2\2\2\u03cf\u03d4\5\u00c2b\2\u03d0\u03d1\7\5")
        buf.write("\2\2\u03d1\u03d3\5\u00c2b\2\u03d2\u03d0\3\2\2\2\u03d3")
        buf.write("\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2")
        buf.write("\u03d5\u00c1\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\5")
        buf.write("F$\2\u03d8\u03d9\7<\2\2\u03d9\u03da\5\u013a\u009e\2\u03da")
        buf.write("\u00c3\3\2\2\2\u03db\u03dc\7Q\2\2\u03dc\u03dd\5\u00c8")
        buf.write("e\2\u03dd\u03de\7<\2\2\u03de\u03df\5\u013a\u009e\2\u03df")
        buf.write("\u03e0\7\6\2\2\u03e0\u00c5\3\2\2\2\u03e1\u03e2\7R\2\2")
        buf.write("\u03e2\u03e3\5\u00caf\2\u03e3\u03e4\7\"\2\2\u03e4\u03e5")
        buf.write("\5\u011e\u0090\2\u03e5\u03e6\7\6\2\2\u03e6\u00c7\3\2\2")
        buf.write("\2\u03e7\u03e8\5\u00b8]\2\u03e8\u03ea\7\33\2\2\u03e9\u03eb")
        buf.write("\5\u0138\u009d\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2")
        buf.write("\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\7\34\2\2\u03ed\u00c9")
        buf.write("\3\2\2\2\u03ee\u03ef\5\u00b4[\2\u03ef\u03f1\7\62\2\2\u03f0")
        buf.write("\u03f2\5\u0138\u009d\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\7\64\2\2\u03f4")
        buf.write("\u00cb\3\2\2\2\u03f5\u03f7\5\u00d6l\2\u03f6\u03f5\3\2")
        buf.write("\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8\u03f9")
        buf.write("\3\2\2\2\u03f9\u0406\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb")
        buf.write("\u03fd\7S\2\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2")
        buf.write("\u03fd\u03fe\3\2\2\2\u03fe\u03ff\7T\2\2\u03ff\u0400\7")
        buf.write("U\2\2\u0400\u0401\5\u00fe\u0080\2\u0401\u0404\7\6\2\2")
        buf.write("\u0402\u0405\5\u00ceh\2\u0403\u0405\5\u00d2j\2\u0404\u0402")
        buf.write("\3\2\2\2\u0404\u0403\3\2\2\2\u0405\u0407\3\2\2\2\u0406")
        buf.write("\u03fc\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u00cd\3\2\2\2")
        buf.write("\u0408\u040a\5\u00d0i\2\u0409\u0408\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040b\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c")
        buf.write("\u00cf\3\2\2\2\u040d\u0410\7V\2\2\u040e\u0411\5\u011c")
        buf.write("\u008f\2\u040f\u0411\5\u011a\u008e\2\u0410\u040e\3\2\2")
        buf.write("\2\u0410\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413")
        buf.write("\7\6\2\2\u0413\u0414\5\u00ccg\2\u0414\u0415\7\24\2\2\u0415")
        buf.write("\u0416\7\6\2\2\u0416\u00d1\3\2\2\2\u0417\u0419\5\u00d4")
        buf.write("k\2\u0418\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u0418")
        buf.write("\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u00d3\3\2\2\2\u041c")
        buf.write("\u041f\7W\2\2\u041d\u0420\5\u011c\u008f\2\u041e\u0420")
        buf.write("\5\u011a\u008e\2\u041f\u041d\3\2\2\2\u041f\u041e\3\2\2")
        buf.write("\2\u0420\u0421\3\2\2\2\u0421\u0422\7\6\2\2\u0422\u0423")
        buf.write("\5\u00ccg\2\u0423\u0424\7\24\2\2\u0424\u0425\7\6\2\2\u0425")
        buf.write("\u00d5\3\2\2\2\u0426\u0429\5\u00ba^\2\u0427\u0429\5\u00d8")
        buf.write("m\2\u0428\u0426\3\2\2\2\u0428\u0427\3\2\2\2\u0429\u00d7")
        buf.write("\3\2\2\2\u042a\u042f\5\u00dan\2\u042b\u042f\5\u00dco\2")
        buf.write("\u042c\u042f\5\u00e4s\2\u042d\u042f\5\u00e8u\2\u042e\u042a")
        buf.write("\3\2\2\2\u042e\u042b\3\2\2\2\u042e\u042c\3\2\2\2\u042e")
        buf.write("\u042d\3\2\2\2\u042f\u00d9\3\2\2\2\u0430\u0431\7\27\2")
        buf.write("\2\u0431\u0434\5\u0126\u0094\2\u0432\u0433\7\30\2\2\u0433")
        buf.write("\u0435\5\u011a\u008e\2\u0434\u0432\3\2\2\2\u0434\u0435")
        buf.write("\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\7\6\2\2\u0437")
        buf.write("\u00db\3\2\2\2\u0438\u043c\5\u00dep\2\u0439\u043c\5\u00e0")
        buf.write("q\2\u043a\u043c\5\u00e2r\2\u043b\u0438\3\2\2\2\u043b\u0439")
        buf.write("\3\2\2\2\u043b\u043a\3\2\2\2\u043c\u00dd\3\2\2\2\u043d")
        buf.write("\u043e\7X\2\2\u043e\u043f\5\u011c\u008f\2\u043f\u0440")
        buf.write("\7\6\2\2\u0440\u00df\3\2\2\2\u0441\u0442\7X\2\2\u0442")
        buf.write("\u0443\5\u011a\u008e\2\u0443\u0444\7\6\2\2\u0444\u00e1")
        buf.write("\3\2\2\2\u0445\u0446\7Y\2\2\u0446\u0449\5\u0126\u0094")
        buf.write("\2\u0447\u0448\7\30\2\2\u0448\u044a\5\u011a\u008e\2\u0449")
        buf.write("\u0447\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044b\3\2\2\2")
        buf.write("\u044b\u044c\7\6\2\2\u044c\u00e3\3\2\2\2\u044d\u0450\t")
        buf.write("\f\2\2\u044e\u0451\5\u00f0y\2\u044f\u0451\5\u00f8}\2\u0450")
        buf.write("\u044e\3\2\2\2\u0450\u044f\3\2\2\2\u0451\u0454\3\2\2\2")
        buf.write("\u0452\u0454\5\u00e6t\2\u0453\u044d\3\2\2\2\u0453\u0452")
        buf.write("\3\2\2\2\u0454\u00e5\3\2\2\2\u0455\u0456\7Z\2\2\u0456")
        buf.write("\u045d\5\u00fa~\2\u0457\u0458\7\\\2\2\u0458\u0459\5\u00cc")
        buf.write("g\2\u0459\u045a\7\24\2\2\u045a\u045b\7\6\2\2\u045b\u045d")
        buf.write("\3\2\2\2\u045c\u0455\3\2\2\2\u045c\u0457\3\2\2\2\u045d")
        buf.write("\u00e7\3\2\2\2\u045e\u045f\7]\2\2\u045f\u0464\5\u00ea")
        buf.write("v\2\u0460\u0461\7\5\2\2\u0461\u0463\5\u00eav\2\u0462\u0460")
        buf.write("\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0464\3\2\2\2")
        buf.write("\u0467\u0468\7\6\2\2\u0468\u00e9\3\2\2\2\u0469\u046f\5")
        buf.write("\u013a\u009e\2\u046a\u046b\5F$\2\u046b\u046c\7<\2\2\u046c")
        buf.write("\u046d\5\u013a\u009e\2\u046d\u046f\3\2\2\2\u046e\u0469")
        buf.write("\3\2\2\2\u046e\u046a\3\2\2\2\u046f\u00eb\3\2\2\2\u0470")
        buf.write("\u0472\7S\2\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2")
        buf.write("\u0472\u0473\3\2\2\2\u0473\u0476\5\u00eex\2\u0474\u0476")
        buf.write("\5\u00fa~\2\u0475\u0471\3\2\2\2\u0475\u0474\3\2\2\2\u0476")
        buf.write("\u00ed\3\2\2\2\u0477\u047c\5\u00f0y\2\u0478\u047c\5\u00f2")
        buf.write("z\2\u0479\u047c\5\u00f4{\2\u047a\u047c\5\u00f8}\2\u047b")
        buf.write("\u0477\3\2\2\2\u047b\u0478\3\2\2\2\u047b\u0479\3\2\2\2")
        buf.write("\u047b\u047a\3\2\2\2\u047c\u00ef\3\2\2\2\u047d\u047e\5")
        buf.write("\u011c\u008f\2\u047e\u047f\5\u00fc\177\2\u047f\u0480\7")
        buf.write("\6\2\2\u0480\u00f1\3\2\2\2\u0481\u0482\7^\2\2\u0482\u0483")
        buf.write("\5\u0126\u0094\2\u0483\u0484\7\30\2\2\u0484\u0485\5\u011a")
        buf.write("\u008e\2\u0485\u0486\5\u00fe\u0080\2\u0486\u0487\7\6\2")
        buf.write("\2\u0487\u00f3\3\2\2\2\u0488\u0489\7_\2\2\u0489\u048a")
        buf.write("\5\u00f6|\2\u048a\u048b\7`\2\2\u048b\u048c\5\u0132\u009a")
        buf.write("\2\u048c\u048d\5\u00fe\u0080\2\u048d\u048e\7\6\2\2\u048e")
        buf.write("\u00f5\3\2\2\2\u048f\u0492\5\u00c2b\2\u0490\u0492\5F$")
        buf.write("\2\u0491\u048f\3\2\2\2\u0491\u0490\3\2\2\2\u0492\u049a")
        buf.write("\3\2\2\2\u0493\u0496\7\5\2\2\u0494\u0497\5\u00c2b\2\u0495")
        buf.write("\u0497\5F$\2\u0496\u0494\3\2\2\2\u0496\u0495\3\2\2\2\u0497")
        buf.write("\u0499\3\2\2\2\u0498\u0493\3\2\2\2\u0499\u049c\3\2\2\2")
        buf.write("\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u00f7\3")
        buf.write("\2\2\2\u049c\u049a\3\2\2\2\u049d\u049e\5Z.\2\u049e\u049f")
        buf.write("\7\'\2\2\u049f\u04a1\3\2\2\2\u04a0\u049d\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a3\5\u013a")
        buf.write("\u009e\2\u04a3\u04a4\7<\2\2\u04a4\u04a5\5\u013a\u009e")
        buf.write("\2\u04a5\u04aa\5\u00fe\u0080\2\u04a6\u04a7\7a\2\2\u04a7")
        buf.write("\u04a8\5\u013a\u009e\2\u04a8\u04a9\5\u00fe\u0080\2\u04a9")
        buf.write("\u04ab\3\2\2\2\u04aa\u04a6\3\2\2\2\u04ab\u04ac\3\2\2\2")
        buf.write("\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04ae\3")
        buf.write("\2\2\2\u04ae\u04af\7\6\2\2\u04af\u00f9\3\2\2\2\u04b0\u04b1")
        buf.write("\5Z.\2\u04b1\u04b2\7\'\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b0")
        buf.write("\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5")
        buf.write("\u04b6\7b\2\2\u04b6\u04b7\5\u00ccg\2\u04b7\u04b8\7\24")
        buf.write("\2\2\u04b8\u04b9\7\6\2\2\u04b9\u00fb\3\2\2\2\u04ba\u04bd")
        buf.write("\5\u00fe\u0080\2\u04bb\u04bd\5\u0100\u0081\2\u04bc\u04ba")
        buf.write("\3\2\2\2\u04bc\u04bb\3\2\2\2\u04bd\u00fd\3\2\2\2\u04be")
        buf.write("\u04c1\5\u0102\u0082\2\u04bf\u04c1\5\u0104\u0083\2\u04c0")
        buf.write("\u04be\3\2\2\2\u04c0\u04bf\3\2\2\2\u04c1\u00ff\3\2\2\2")
        buf.write("\u04c2\u04c3\7P\2\2\u04c3\u04c4\5\u00ccg\2\u04c4\u04c5")
        buf.write("\7\24\2\2\u04c5\u0101\3\2\2\2\u04c6\u04c7\7c\2\2\u04c7")
        buf.write("\u04c9\5\u0106\u0084\2\u04c8\u04c6\3\2\2\2\u04c8\u04c9")
        buf.write("\3\2\2\2\u04c9\u0103\3\2\2\2\u04ca\u04cb\7d\2\2\u04cb")
        buf.write("\u04d0\5\u010a\u0086\2\u04cc\u04cd\7\33\2\2\u04cd\u04ce")
        buf.write("\5\u0106\u0084\2\u04ce\u04cf\7\34\2\2\u04cf\u04d1\3\2")
        buf.write("\2\2\u04d0\u04cc\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u0105")
        buf.write("\3\2\2\2\u04d2\u04d7\5\u0108\u0085\2\u04d3\u04d4\7\5\2")
        buf.write("\2\u04d4\u04d6\5\u0108\u0085\2\u04d5\u04d3\3\2\2\2\u04d6")
        buf.write("\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2")
        buf.write("\u04d8\u0107\3\2\2\2\u04d9\u04d7\3\2\2\2\u04da\u04dd\5")
        buf.write("\u010c\u0087\2\u04db\u04dd\5\u0110\u0089\2\u04dc\u04da")
        buf.write("\3\2\2\2\u04dc\u04db\3\2\2\2\u04dd\u0109\3\2\2\2\u04de")
        buf.write("\u04e1\5\u010e\u0088\2\u04df\u04e1\5\u0112\u008a\2\u04e0")
        buf.write("\u04de\3\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u010b\3\2\2\2")
        buf.write("\u04e2\u04e3\5Z.\2\u04e3\u010d\3\2\2\2\u04e4\u04e5\5\u00a8")
        buf.write("U\2\u04e5\u010f\3\2\2\2\u04e6\u04e7\5\16\b\2\u04e7\u04eb")
        buf.write("\7\'\2\2\u04e8\u04ec\5\u0114\u008b\2\u04e9\u04ea\7e\2")
        buf.write("\2\u04ea\u04ec\5\u0116\u008c\2\u04eb\u04e8\3\2\2\2\u04eb")
        buf.write("\u04e9\3\2\2\2\u04ec\u04f5\3\2\2\2\u04ed\u04f1\7\5\2\2")
        buf.write("\u04ee\u04f2\5\u0114\u008b\2\u04ef\u04f0\7e\2\2\u04f0")
        buf.write("\u04f2\5\u0116\u008c\2\u04f1\u04ee\3\2\2\2\u04f1\u04ef")
        buf.write("\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04ed\3\2\2\2\u04f4")
        buf.write("\u04f7\3\2\2\2\u04f5\u04f3\3\2\2\2\u04f5\u04f6\3\2\2\2")
        buf.write("\u04f6\u0111\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f8\u04f9\5")
        buf.write("\16\b\2\u04f9\u04fa\7\'\2\2\u04fa\u04fb\7f\2\2\u04fb\u04fc")
        buf.write("\5\u0118\u008d\2\u04fc\u0113\3\2\2\2\u04fd\u04fe\7\u0091")
        buf.write("\2\2\u04fe\u0115\3\2\2\2\u04ff\u0500\7\u0091\2\2\u0500")
        buf.write("\u0117\3\2\2\2\u0501\u0502\7\u0091\2\2\u0502\u0119\3\2")
        buf.write("\2\2\u0503\u0504\7g\2\2\u0504\u0509\5\u011c\u008f\2\u0505")
        buf.write("\u0506\7O\2\2\u0506\u0508\5\u011c\u008f\2\u0507\u0505")
        buf.write("\3\2\2\2\u0508\u050b\3\2\2\2\u0509\u0507\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u011b\3\2\2\2\u050b\u0509\3\2\2\2")
        buf.write("\u050c\u050d\5Z.\2\u050d\u050e\7\'\2\2\u050e\u0510\3\2")
        buf.write("\2\2\u050f\u050c\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0511")
        buf.write("\3\2\2\2\u0511\u0512\5\u011e\u0090\2\u0512\u011d\3\2\2")
        buf.write("\2\u0513\u0514\5\u0120\u0091\2\u0514\u011f\3\2\2\2\u0515")
        buf.write("\u0516\b\u0091\1\2\u0516\u0517\7\33\2\2\u0517\u0518\5")
        buf.write("\u0120\u0091\2\u0518\u0519\7\34\2\2\u0519\u0521\3\2\2")
        buf.write("\2\u051a\u0521\5\u0122\u0092\2\u051b\u0521\5\u0124\u0093")
        buf.write("\2\u051c\u051d\7m\2\2\u051d\u0521\5\u0120\u0091\5\u051e")
        buf.write("\u0521\7n\2\2\u051f\u0521\7o\2\2\u0520\u0515\3\2\2\2\u0520")
        buf.write("\u051a\3\2\2\2\u0520\u051b\3\2\2\2\u0520\u051c\3\2\2\2")
        buf.write("\u0520\u051e\3\2\2\2\u0520\u051f\3\2\2\2\u0521\u053a\3")
        buf.write("\2\2\2\u0522\u0523\f\13\2\2\u0523\u0524\7h\2\2\u0524\u0539")
        buf.write("\5\u0120\u0091\f\u0525\u0526\f\n\2\2\u0526\u0527\7h\2")
        buf.write("\2\u0527\u0528\7i\2\2\u0528\u0529\7h\2\2\u0529\u0539\5")
        buf.write("\u0120\u0091\13\u052a\u052b\f\t\2\2\u052b\u052c\7j\2\2")
        buf.write("\u052c\u0539\5\u0120\u0091\n\u052d\u052e\f\b\2\2\u052e")
        buf.write("\u052f\7j\2\2\u052f\u0530\7i\2\2\u0530\u0531\7j\2\2\u0531")
        buf.write("\u0539\5\u0120\u0091\t\u0532\u0533\f\7\2\2\u0533\u0534")
        buf.write("\7k\2\2\u0534\u0539\5\u0120\u0091\b\u0535\u0536\f\6\2")
        buf.write("\2\u0536\u0537\7l\2\2\u0537\u0539\5\u0120\u0091\7\u0538")
        buf.write("\u0522\3\2\2\2\u0538\u0525\3\2\2\2\u0538\u052a\3\2\2\2")
        buf.write("\u0538\u052d\3\2\2\2\u0538\u0532\3\2\2\2\u0538\u0535\3")
        buf.write("\2\2\2\u0539\u053c\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b")
        buf.write("\3\2\2\2\u053b\u0121\3\2\2\2\u053c\u053a\3\2\2\2\u053d")
        buf.write("\u053f\5\u0140\u00a1\2\u053e\u053d\3\2\2\2\u053e\u053f")
        buf.write("\3\2\2\2\u053f\u0542\3\2\2\2\u0540\u0541\t\r\2\2\u0541")
        buf.write("\u0543\7m\2\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2\2\2")
        buf.write("\u0543\u0544\3\2\2\2\u0544\u0546\5~@\2\u0545\u0547\5\u0140")
        buf.write("\u00a1\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547")
        buf.write("\u0551\3\2\2\2\u0548\u0549\t\r\2\2\u0549\u054b\7m\2\2")
        buf.write("\u054a\u0548\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3")
        buf.write("\2\2\2\u054c\u054d\5~@\2\u054d\u054e\5\u0140\u00a1\2\u054e")
        buf.write("\u0550\3\2\2\2\u054f\u054a\3\2\2\2\u0550\u0553\3\2\2\2")
        buf.write("\u0551\u054f\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0567\3")
        buf.write("\2\2\2\u0553\u0551\3\2\2\2\u0554\u0555\5\u00b4[\2\u0555")
        buf.write("\u0557\7\62\2\2\u0556\u0558\5\u0140\u00a1\2\u0557\u0556")
        buf.write("\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0559\3\2\2\2\u0559")
        buf.write("\u055a\7\64\2\2\u055a\u0567\3\2\2\2\u055b\u055c\5\u013a")
        buf.write("\u009e\2\u055c\u055e\7#\2\2\u055d\u055f\5\u0092J\2\u055e")
        buf.write("\u055d\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u055e\3\2\2\2")
        buf.write("\u0560\u0561\3\2\2\2\u0561\u0567\3\2\2\2\u0562\u0563\5")
        buf.write("\u013a\u009e\2\u0563\u0564\7#\2\2\u0564\u0565\5\u0132")
        buf.write("\u009a\2\u0565\u0567\3\2\2\2\u0566\u053e\3\2\2\2\u0566")
        buf.write("\u0554\3\2\2\2\u0566\u055b\3\2\2\2\u0566\u0562\3\2\2\2")
        buf.write("\u0567\u0123\3\2\2\2\u0568\u0569\7\22\2\2\u0569\u056c")
        buf.write("\5\u0126\u0094\2\u056a\u056b\7r\2\2\u056b\u056d\5\u0120")
        buf.write("\u0091\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u0571\3\2\2\2\u056e\u056f\7s\2\2\u056f\u0572\5\u0120")
        buf.write("\u0091\2\u0570\u0572\5\u0124\u0093\2\u0571\u056e\3\2\2")
        buf.write("\2\u0571\u0570\3\2\2\2\u0572\u0579\3\2\2\2\u0573\u0574")
        buf.write("\7t\2\2\u0574\u0575\5\u0126\u0094\2\u0575\u0576\7r\2\2")
        buf.write("\u0576\u0577\5\u0120\u0091\2\u0577\u0579\3\2\2\2\u0578")
        buf.write("\u0568\3\2\2\2\u0578\u0573\3\2\2\2\u0579\u0125\3\2\2\2")
        buf.write("\u057a\u0581\5\u0128\u0095\2\u057b\u0581\5\u012a\u0096")
        buf.write("\2\u057c\u057d\5\u012a\u0096\2\u057d\u057e\7\5\2\2\u057e")
        buf.write("\u057f\5\u0128\u0095\2\u057f\u0581\3\2\2\2\u0580\u057a")
        buf.write("\3\2\2\2\u0580\u057b\3\2\2\2\u0580\u057c\3\2\2\2\u0581")
        buf.write("\u0127\3\2\2\2\u0582\u0583\5\u012e\u0098\2\u0583\u0129")
        buf.write("\3\2\2\2\u0584\u0589\5\u012c\u0097\2\u0585\u0586\7\5\2")
        buf.write("\2\u0586\u0588\5\u012c\u0097\2\u0587\u0585\3\2\2\2\u0588")
        buf.write("\u058b\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u058a\3\2\2\2")
        buf.write("\u058a\u012b\3\2\2\2\u058b\u0589\3\2\2\2\u058c\u058d\5")
        buf.write("\u012e\u0098\2\u058d\u058e\5\u0130\u0099\2\u058e\u012d")
        buf.write("\3\2\2\2\u058f\u0594\5F$\2\u0590\u0591\7\5\2\2\u0591\u0593")
        buf.write("\5F$\2\u0592\u0590\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592")
        buf.write("\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u012f\3\2\2\2\u0596")
        buf.write("\u0594\3\2\2\2\u0597\u0598\t\16\2\2\u0598\u0599\5\u0132")
        buf.write("\u009a\2\u0599\u0131\3\2\2\2\u059a\u059b\7\33\2\2\u059b")
        buf.write("\u059c\5\u0136\u009c\2\u059c\u059d\7\34\2\2\u059d\u05a7")
        buf.write("\3\2\2\2\u059e\u05a0\5\u0092J\2\u059f\u059e\3\2\2\2\u05a0")
        buf.write("\u05a1\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2")
        buf.write("\u05a2\u05a3\3\2\2\2\u05a3\u05a4\5\u0132\u009a\2\u05a4")
        buf.write("\u05a7\3\2\2\2\u05a5\u05a7\5\u0136\u009c\2\u05a6\u059a")
        buf.write("\3\2\2\2\u05a6\u059f\3\2\2\2\u05a6\u05a5\3\2\2\2\u05a7")
        buf.write("\u0133\3\2\2\2\u05a8\u05a9\7\33\2\2\u05a9\u05ac\5> \2")
        buf.write("\u05aa\u05ab\7\35\2\2\u05ab\u05ad\5\u0140\u00a1\2\u05ac")
        buf.write("\u05aa\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2")
        buf.write("\u05ae\u05af\7\34\2\2\u05af\u05b7\3\2\2\2\u05b0\u05b1")
        buf.write("\5\u0090I\2\u05b1\u05b4\5> \2\u05b2\u05b3\7\35\2\2\u05b3")
        buf.write("\u05b5\5\u0140\u00a1\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5")
        buf.write("\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05a8\3\2\2\2\u05b6")
        buf.write("\u05b0\3\2\2\2\u05b7\u0135\3\2\2\2\u05b8\u05bb\5R*\2\u05b9")
        buf.write("\u05ba\7$\2\2\u05ba\u05bc\5\u0140\u00a1\2\u05bb\u05b9")
        buf.write("\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05c3\3\2\2\2\u05bd")
        buf.write("\u05c0\5> \2\u05be\u05bf\7\35\2\2\u05bf\u05c1\5\u0140")
        buf.write("\u00a1\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1")
        buf.write("\u05c3\3\2\2\2\u05c2\u05b8\3\2\2\2\u05c2\u05bd\3\2\2\2")
        buf.write("\u05c3\u0137\3\2\2\2\u05c4\u05c9\5\u0132\u009a\2\u05c5")
        buf.write("\u05c6\7\5\2\2\u05c6\u05c8\5\u0132\u009a\2\u05c7\u05c5")
        buf.write("\3\2\2\2\u05c8\u05cb\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9")
        buf.write("\u05ca\3\2\2\2\u05ca\u0139\3\2\2\2\u05cb\u05c9\3\2\2\2")
        buf.write("\u05cc\u05cd\b\u009e\1\2\u05cd\u05ce\7\33\2\2\u05ce\u05cf")
        buf.write("\5\u013a\u009e\2\u05cf\u05d0\7\34\2\2\u05d0\u0616\3\2")
        buf.write("\2\2\u05d1\u05d2\7\33\2\2\u05d2\u05d3\5\u0140\u00a1\2")
        buf.write("\u05d3\u05d4\7\34\2\2\u05d4\u05d6\5n8\2\u05d5\u05d7\5")
        buf.write("\u013c\u009f\2\u05d6\u05d5\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7\u0616\3\2\2\2\u05d8\u05da\5n8\2\u05d9\u05db\5\u013c")
        buf.write("\u009f\2\u05da\u05d9\3\2\2\2\u05da\u05db\3\2\2\2\u05db")
        buf.write("\u0616\3\2\2\2\u05dc\u05dd\5p9\2\u05dd\u05de\5\u0140\u00a1")
        buf.write("\2\u05de\u05df\5r:\2\u05df\u0616\3\2\2\2\u05e0\u05e1\5")
        buf.write("\u00b8]\2\u05e1\u05e3\7\33\2\2\u05e2\u05e4\5\u0140\u00a1")
        buf.write("\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5")
        buf.write("\3\2\2\2\u05e5\u05e6\7\34\2\2\u05e6\u0616\3\2\2\2\u05e7")
        buf.write("\u05e8\5> \2\u05e8\u05e9\7\36\2\2\u05e9\u05ea\5\u0140")
        buf.write("\u00a1\2\u05ea\u05eb\7\37\2\2\u05eb\u0616\3\2\2\2\u05ec")
        buf.write("\u05ed\7w\2\2\u05ed\u05ee\5> \2\u05ee\u05ef\7$\2\2\u05ef")
        buf.write("\u05f0\5\u013a\u009e\r\u05f0\u0616\3\2\2\2\u05f1\u0616")
        buf.write("\5F$\2\u05f2\u05f3\7\61\2\2\u05f3\u05f7\5\u013a\u009e")
        buf.write("\2\u05f4\u05f6\5\u0142\u00a2\2\u05f5\u05f4\3\2\2\2\u05f6")
        buf.write("\u05f9\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2")
        buf.write("\u05f8\u05fa\3\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fb\7")
        buf.write("\'\2\2\u05fb\u05fc\5\u011e\u0090\2\u05fc\u05fd\7\63\2")
        buf.write("\2\u05fd\u0616\3\2\2\2\u05fe\u05ff\7w\2\2\u05ff\u0600")
        buf.write("\7%\2\2\u0600\u0601\7$\2\2\u0601\u0602\7x\2\2\u0602\u0606")
        buf.write("\5\u013a\u009e\2\u0603\u0605\5\u0142\u00a2\2\u0604\u0603")
        buf.write("\3\2\2\2\u0605\u0608\3\2\2\2\u0606\u0604\3\2\2\2\u0606")
        buf.write("\u0607\3\2\2\2\u0607\u0616\3\2\2\2\u0608\u0606\3\2\2\2")
        buf.write("\u0609\u0616\7\u0091\2\2\u060a\u060b\7w\2\2\u060b\u060c")
        buf.write("\5J&\2\u060c\u060d\7$\2\2\u060d\u060e\5\u013a\u009e\7")
        buf.write("\u060e\u0616\3\2\2\2\u060f\u0610\7w\2\2\u0610\u0616\5")
        buf.write("J&\2\u0611\u0612\7w\2\2\u0612\u0616\5\u0132\u009a\2\u0613")
        buf.write("\u0616\5\u0148\u00a5\2\u0614\u0616\7z\2\2\u0615\u05cc")
        buf.write("\3\2\2\2\u0615\u05d1\3\2\2\2\u0615\u05d8\3\2\2\2\u0615")
        buf.write("\u05dc\3\2\2\2\u0615\u05e0\3\2\2\2\u0615\u05e7\3\2\2\2")
        buf.write("\u0615\u05ec\3\2\2\2\u0615\u05f1\3\2\2\2\u0615\u05f2\3")
        buf.write("\2\2\2\u0615\u05fe\3\2\2\2\u0615\u0609\3\2\2\2\u0615\u060a")
        buf.write("\3\2\2\2\u0615\u060f\3\2\2\2\u0615\u0611\3\2\2\2\u0615")
        buf.write("\u0613\3\2\2\2\u0615\u0614\3\2\2\2\u0616\u0621\3\2\2\2")
        buf.write("\u0617\u0618\f\23\2\2\u0618\u061a\5n8\2\u0619\u061b\5")
        buf.write("\u013c\u009f\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2")
        buf.write("\u061b\u0620\3\2\2\2\u061c\u061d\f\b\2\2\u061d\u061e\7")
        buf.write("y\2\2\u061e\u0620\5\u0132\u009a\2\u061f\u0617\3\2\2\2")
        buf.write("\u061f\u061c\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3")
        buf.write("\2\2\2\u0621\u0622\3\2\2\2\u0622\u013b\3\2\2\2\u0623\u0621")
        buf.write("\3\2\2\2\u0624\u062a\5\u013a\u009e\2\u0625\u0626\7\33")
        buf.write("\2\2\u0626\u0627\5\u0140\u00a1\2\u0627\u0628\7\34\2\2")
        buf.write("\u0628\u062a\3\2\2\2\u0629\u0624\3\2\2\2\u0629\u0625\3")
        buf.write("\2\2\2\u062a\u013d\3\2\2\2\u062b\u0631\5\u0140\u00a1\2")
        buf.write("\u062c\u062d\7\33\2\2\u062d\u062e\5\u0140\u00a1\2\u062e")
        buf.write("\u062f\7\34\2\2\u062f\u0631\3\2\2\2\u0630\u062b\3\2\2")
        buf.write("\2\u0630\u062c\3\2\2\2\u0631\u013f\3\2\2\2\u0632\u0637")
        buf.write("\5\u013a\u009e\2\u0633\u0634\7\5\2\2\u0634\u0636\5\u013a")
        buf.write("\u009e\2\u0635\u0633\3\2\2\2\u0636\u0639\3\2\2\2\u0637")
        buf.write("\u0635\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u0141\3\2\2\2")
        buf.write("\u0639\u0637\3\2\2\2\u063a\u063b\7{\2\2\u063b\u0640\5")
        buf.write("\u0144\u00a3\2\u063c\u063d\7\5\2\2\u063d\u063f\5\u0144")
        buf.write("\u00a3\2\u063e\u063c\3\2\2\2\u063f\u0642\3\2\2\2\u0640")
        buf.write("\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0143\3\2\2\2")
        buf.write("\u0642\u0640\3\2\2\2\u0643\u0648\5\u0146\u00a4\2\u0644")
        buf.write("\u0645\7\5\2\2\u0645\u0647\5\u0146\u00a4\2\u0646\u0644")
        buf.write("\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2\2\u0648")
        buf.write("\u0649\3\2\2\2\u0649\u064d\3\2\2\2\u064a\u0648\3\2\2\2")
        buf.write("\u064b\u064c\t\17\2\2\u064c\u064e\5\u0132\u009a\2\u064d")
        buf.write("\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0145\3\2\2\2")
        buf.write("\u064f\u0650\7\u0090\2\2\u0650\u0147\3\2\2\2\u0651\u0652")
        buf.write("\t\20\2\2\u0652\u0149\3\2\2\2\u009d\u0151\u0157\u015f")
        buf.write("\u016c\u0179\u0183\u0189\u0193\u019b\u01a9\u01bb\u01bd")
        buf.write("\u01c9\u01cb\u01d3\u01d5\u01dd\u01e5\u01eb\u01f6\u01fd")
        buf.write("\u0204\u0209\u0215\u021f\u0227\u0233\u0240\u0244\u024c")
        buf.write("\u0251\u0257\u0263\u0269\u026d\u0275\u027b\u027d\u0284")
        buf.write("\u0289\u0295\u0299\u02a0\u02a4\u02a8\u02ae\u02bf\u02cb")
        buf.write("\u02d2\u02d6\u02da\u02f8\u030f\u0314\u0320\u0324\u0327")
        buf.write("\u033a\u034e\u0351\u0366\u036d\u0386\u0389\u0396\u039f")
        buf.write("\u03a6\u03ab\u03b6\u03bb\u03c4\u03c9\u03d4\u03ea\u03f1")
        buf.write("\u03f8\u03fc\u0404\u0406\u040b\u0410\u041a\u041f\u0428")
        buf.write("\u042e\u0434\u043b\u0449\u0450\u0453\u045c\u0464\u046e")
        buf.write("\u0471\u0475\u047b\u0491\u0496\u049a\u04a0\u04ac\u04b3")
        buf.write("\u04bc\u04c0\u04c8\u04d0\u04d7\u04dc\u04e0\u04eb\u04f1")
        buf.write("\u04f5\u0509\u050f\u0520\u0538\u053a\u053e\u0542\u0546")
        buf.write("\u054a\u0551\u0557\u0560\u0566\u056c\u0571\u0578\u0580")
        buf.write("\u0589\u0594\u05a1\u05a6\u05ac\u05b4\u05b6\u05bb\u05c0")
        buf.write("\u05c2\u05c9\u05d6\u05da\u05e3\u05f7\u0606\u0615\u061a")
        buf.write("\u061f\u0621\u0629\u0630\u0637\u0640\u0648\u064d")
        return buf.getvalue()


class MizarParser ( Parser ):

    grammarFileName = "Mizar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'environ'", "'vocabularies'", "','", 
                     "';'", "'notations'", "'constructors'", "'registrations'", 
                     "'definitions'", "'expansions'", "'equalities'", "'theorems'", 
                     "'schemes'", "'requirements'", "'begin'", "'reserve'", 
                     "'for'", "'definition'", "'end'", "'registration'", 
                     "'notation'", "'let'", "'such'", "'redefine'", "'struct'", 
                     "'('", "')'", "'over'", "'(#'", "'#)'", "'->'", "'mode'", 
                     "'means'", "'is'", "'of'", "'set'", "'synonym'", "':'", 
                     "'otherwise'", "'if'", "'sethood'", "'func'", "'equals'", 
                     "'commutativity'", "'idempotence'", "'involutiveness'", 
                     "'projectivity'", "'{'", "'['", "'}'", "']'", "'pred'", 
                     "'symmetry'", "'asymmetry'", "'connectedness'", "'reflexivity'", 
                     "'irreflexivity'", "'antonym'", "'='", "'attr'", "'cluster'", 
                     "'non'", "'identify'", "'with'", "'when'", "'reduce'", 
                     "'to'", "'correctness'", "'existence'", "'uniqueness'", 
                     "'coherence'", "'compatibility'", "'consistency'", 
                     "'reducibility'", "'theorem'", "'scheme'", "'provided'", 
                     "'and'", "'proof'", "'deffunc'", "'defpred'", "'then'", 
                     "'per'", "'cases'", "'case'", "'suppose'", "'assume'", 
                     "'given'", "'thus'", "'hence'", "'hereby'", "'take'", 
                     "'consider'", "'reconsider'", "'as'", "'.='", "'now'", 
                     "'by'", "'from'", "'def'", "'sch'", "'that'", "'&'", 
                     "'...'", "'or'", "'implies'", "'iff'", "'not'", "'contradiction'", 
                     "'thesis'", "'does'", "'do'", "'st'", "'holds'", "'ex'", 
                     "'being'", "'be'", "'the'", "'all'", "'qua'", "'it'", 
                     "'where'", "'are'", "'$1'", "'$2'", "'$3'", "'$4'", 
                     "'$5'", "'$6'", "'$7'", "'$8'", "'$9'", "'$10'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "PREDICATE_SYMBOL", "FUNCTOR_SYMBOL", 
                      "MODE_SYMBOL", "STRUCTURE_SYMBOL", "SELECTOR_SYMBOL", 
                      "ATTRIBUTE_SYMBOL", "LEFT_FUNCTOR_SYMBOL", "RIGHT_FUNCTOR_SYMBOL", 
                      "FILE_NAME", "IDENTIFIER", "NUMERAL", "WHITE_SPACE" ]

    RULE_article = 0
    RULE_environment_declaration = 1
    RULE_directive = 2
    RULE_vocabulary_directive = 3
    RULE_vocabulary_name = 4
    RULE_library_directive = 5
    RULE_article_name = 6
    RULE_requirement_directive = 7
    RULE_requirement = 8
    RULE_text_proper = 9
    RULE_section = 10
    RULE_text_item = 11
    RULE_reservation = 12
    RULE_reservation_segment = 13
    RULE_reserved_identifiers = 14
    RULE_reserved_identifier = 15
    RULE_definitional_item = 16
    RULE_registration_item = 17
    RULE_notation_item = 18
    RULE_definitional_block = 19
    RULE_registration_block = 20
    RULE_notation_block = 21
    RULE_definition_item = 22
    RULE_notation_declaration = 23
    RULE_loci_declaration = 24
    RULE_permissive_assumption = 25
    RULE_definition = 26
    RULE_redefinition = 27
    RULE_structure_definition = 28
    RULE_ancestors = 29
    RULE_structure_symbol = 30
    RULE_loci = 31
    RULE_fields = 32
    RULE_locus = 33
    RULE_variable_identifier = 34
    RULE_field_segment = 35
    RULE_selector_symbol = 36
    RULE_specification = 37
    RULE_mode_definition = 38
    RULE_mode_pattern = 39
    RULE_mode_symbol = 40
    RULE_mode_synonym = 41
    RULE_definiens = 42
    RULE_simple_definiens = 43
    RULE_label_identifier = 44
    RULE_conditional_definiens = 45
    RULE_partial_definiens_list = 46
    RULE_partial_definiens = 47
    RULE_mode_property = 48
    RULE_functor_definition = 49
    RULE_functor_pattern = 50
    RULE_functor_property = 51
    RULE_functor_synonym = 52
    RULE_functor_loci = 53
    RULE_functor_symbol = 54
    RULE_left_functor_bracket = 55
    RULE_right_functor_bracket = 56
    RULE_predicate_definition = 57
    RULE_predicate_pattern = 58
    RULE_predicate_property = 59
    RULE_predicate_synonym = 60
    RULE_predicate_antonym = 61
    RULE_predicate_symbol = 62
    RULE_attribute_definition = 63
    RULE_attribute_pattern = 64
    RULE_attribute_synonym = 65
    RULE_attribute_antonym = 66
    RULE_attribute_symbol = 67
    RULE_attribute_loci = 68
    RULE_cluster_registration = 69
    RULE_existential_registration = 70
    RULE_adjective_cluster = 71
    RULE_adjective = 72
    RULE_conditional_registration = 73
    RULE_functorial_registration = 74
    RULE_identify_registration = 75
    RULE_property_registration = 76
    RULE_reduction_registration = 77
    RULE_correctness_conditions = 78
    RULE_correctness_condition = 79
    RULE_theorem = 80
    RULE_scheme_item = 81
    RULE_scheme_block = 82
    RULE_scheme_identifier = 83
    RULE_scheme_parameters = 84
    RULE_scheme_conclusion = 85
    RULE_scheme_premise = 86
    RULE_scheme_segment = 87
    RULE_predicate_segment = 88
    RULE_predicate_identifier = 89
    RULE_functor_segment = 90
    RULE_functor_identifier = 91
    RULE_auxiliary_item = 92
    RULE_private_definition = 93
    RULE_constant_definition = 94
    RULE_equating_list = 95
    RULE_equating = 96
    RULE_private_functor_definition = 97
    RULE_private_predicate_definition = 98
    RULE_private_functor_pattern = 99
    RULE_private_predicate_pattern = 100
    RULE_reasoning = 101
    RULE_case_list = 102
    RULE_case = 103
    RULE_suppose_list = 104
    RULE_suppose = 105
    RULE_reasoning_item = 106
    RULE_skeleton_item = 107
    RULE_generalization = 108
    RULE_assumption = 109
    RULE_single_assumption = 110
    RULE_collective_assumption = 111
    RULE_existential_assumption = 112
    RULE_conclusion = 113
    RULE_diffuse_conclusion = 114
    RULE_exemplification = 115
    RULE_example = 116
    RULE_statement = 117
    RULE_linkable_statement = 118
    RULE_compact_statement = 119
    RULE_choice_statement = 120
    RULE_type_changing_statement = 121
    RULE_type_change_list = 122
    RULE_iterative_equality = 123
    RULE_diffuse_statement = 124
    RULE_justification = 125
    RULE_simple_justification = 126
    RULE_proof = 127
    RULE_straightforward_justification = 128
    RULE_scheme_justification = 129
    RULE_references = 130
    RULE_reference = 131
    RULE_scheme_reference = 132
    RULE_local_reference = 133
    RULE_local_scheme_reference = 134
    RULE_library_reference = 135
    RULE_library_scheme_reference = 136
    RULE_theorem_number = 137
    RULE_definition_number = 138
    RULE_scheme_number = 139
    RULE_conditions = 140
    RULE_proposition = 141
    RULE_sentence = 142
    RULE_formula_expression = 143
    RULE_atomic_formula_expression = 144
    RULE_quantified_formula_expression = 145
    RULE_qualified_variables = 146
    RULE_implicitly_qualified_variables = 147
    RULE_explicitly_qualified_variables = 148
    RULE_qualified_segment = 149
    RULE_variables = 150
    RULE_qualification = 151
    RULE_type_expression = 152
    RULE_structure_type_expression = 153
    RULE_radix_type = 154
    RULE_type_expression_list = 155
    RULE_term_expression = 156
    RULE_arguments = 157
    RULE_adjective_arguments = 158
    RULE_term_expression_list = 159
    RULE_postqualification = 160
    RULE_postqualifying_segment = 161
    RULE_postqualified_variable = 162
    RULE_private_definition_parameter = 163

    ruleNames =  [ "article", "environment_declaration", "directive", "vocabulary_directive", 
                   "vocabulary_name", "library_directive", "article_name", 
                   "requirement_directive", "requirement", "text_proper", 
                   "section", "text_item", "reservation", "reservation_segment", 
                   "reserved_identifiers", "reserved_identifier", "definitional_item", 
                   "registration_item", "notation_item", "definitional_block", 
                   "registration_block", "notation_block", "definition_item", 
                   "notation_declaration", "loci_declaration", "permissive_assumption", 
                   "definition", "redefinition", "structure_definition", 
                   "ancestors", "structure_symbol", "loci", "fields", "locus", 
                   "variable_identifier", "field_segment", "selector_symbol", 
                   "specification", "mode_definition", "mode_pattern", "mode_symbol", 
                   "mode_synonym", "definiens", "simple_definiens", "label_identifier", 
                   "conditional_definiens", "partial_definiens_list", "partial_definiens", 
                   "mode_property", "functor_definition", "functor_pattern", 
                   "functor_property", "functor_synonym", "functor_loci", 
                   "functor_symbol", "left_functor_bracket", "right_functor_bracket", 
                   "predicate_definition", "predicate_pattern", "predicate_property", 
                   "predicate_synonym", "predicate_antonym", "predicate_symbol", 
                   "attribute_definition", "attribute_pattern", "attribute_synonym", 
                   "attribute_antonym", "attribute_symbol", "attribute_loci", 
                   "cluster_registration", "existential_registration", "adjective_cluster", 
                   "adjective", "conditional_registration", "functorial_registration", 
                   "identify_registration", "property_registration", "reduction_registration", 
                   "correctness_conditions", "correctness_condition", "theorem", 
                   "scheme_item", "scheme_block", "scheme_identifier", "scheme_parameters", 
                   "scheme_conclusion", "scheme_premise", "scheme_segment", 
                   "predicate_segment", "predicate_identifier", "functor_segment", 
                   "functor_identifier", "auxiliary_item", "private_definition", 
                   "constant_definition", "equating_list", "equating", "private_functor_definition", 
                   "private_predicate_definition", "private_functor_pattern", 
                   "private_predicate_pattern", "reasoning", "case_list", 
                   "case", "suppose_list", "suppose", "reasoning_item", 
                   "skeleton_item", "generalization", "assumption", "single_assumption", 
                   "collective_assumption", "existential_assumption", "conclusion", 
                   "diffuse_conclusion", "exemplification", "example", "statement", 
                   "linkable_statement", "compact_statement", "choice_statement", 
                   "type_changing_statement", "type_change_list", "iterative_equality", 
                   "diffuse_statement", "justification", "simple_justification", 
                   "proof", "straightforward_justification", "scheme_justification", 
                   "references", "reference", "scheme_reference", "local_reference", 
                   "local_scheme_reference", "library_reference", "library_scheme_reference", 
                   "theorem_number", "definition_number", "scheme_number", 
                   "conditions", "proposition", "sentence", "formula_expression", 
                   "atomic_formula_expression", "quantified_formula_expression", 
                   "qualified_variables", "implicitly_qualified_variables", 
                   "explicitly_qualified_variables", "qualified_segment", 
                   "variables", "qualification", "type_expression", "structure_type_expression", 
                   "radix_type", "type_expression_list", "term_expression", 
                   "arguments", "adjective_arguments", "term_expression_list", 
                   "postqualification", "postqualifying_segment", "postqualified_variable", 
                   "private_definition_parameter" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    PREDICATE_SYMBOL=133
    FUNCTOR_SYMBOL=134
    MODE_SYMBOL=135
    STRUCTURE_SYMBOL=136
    SELECTOR_SYMBOL=137
    ATTRIBUTE_SYMBOL=138
    LEFT_FUNCTOR_SYMBOL=139
    RIGHT_FUNCTOR_SYMBOL=140
    FILE_NAME=141
    IDENTIFIER=142
    NUMERAL=143
    WHITE_SPACE=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ArticleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def environment_declaration(self):
            return self.getTypedRuleContext(MizarParser.Environment_declarationContext,0)


        def text_proper(self):
            return self.getTypedRuleContext(MizarParser.Text_properContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_article

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArticle" ):
                return visitor.visitArticle(self)
            else:
                return visitor.visitChildren(self)




    def article(self):

        localctx = MizarParser.ArticleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_article)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.environment_declaration()
            self.state = 329
            self.text_proper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Environment_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DirectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.DirectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_environment_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironment_declaration" ):
                return visitor.visitEnvironment_declaration(self)
            else:
                return visitor.visitChildren(self)




    def environment_declaration(self):

        localctx = MizarParser.Environment_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_environment_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(MizarParser.T__0)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__1) | (1 << MizarParser.T__4) | (1 << MizarParser.T__5) | (1 << MizarParser.T__6) | (1 << MizarParser.T__7) | (1 << MizarParser.T__8) | (1 << MizarParser.T__9) | (1 << MizarParser.T__10) | (1 << MizarParser.T__11) | (1 << MizarParser.T__12))) != 0):
                self.state = 332
                self.directive()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabulary_directive(self):
            return self.getTypedRuleContext(MizarParser.Vocabulary_directiveContext,0)


        def library_directive(self):
            return self.getTypedRuleContext(MizarParser.Library_directiveContext,0)


        def requirement_directive(self):
            return self.getTypedRuleContext(MizarParser.Requirement_directiveContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirective" ):
                return visitor.visitDirective(self)
            else:
                return visitor.visitChildren(self)




    def directive(self):

        localctx = MizarParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_directive)
        try:
            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.vocabulary_directive()
                pass
            elif token in [MizarParser.T__4, MizarParser.T__5, MizarParser.T__6, MizarParser.T__7, MizarParser.T__8, MizarParser.T__9, MizarParser.T__10, MizarParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.library_directive()
                pass
            elif token in [MizarParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.requirement_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vocabulary_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabulary_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Vocabulary_nameContext)
            else:
                return self.getTypedRuleContext(MizarParser.Vocabulary_nameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_vocabulary_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVocabulary_directive" ):
                return visitor.visitVocabulary_directive(self)
            else:
                return visitor.visitChildren(self)




    def vocabulary_directive(self):

        localctx = MizarParser.Vocabulary_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_vocabulary_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(MizarParser.T__1)
            self.state = 344
            self.vocabulary_name()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 345
                self.match(MizarParser.T__2)
                self.state = 346
                self.vocabulary_name()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vocabulary_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_vocabulary_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVocabulary_name" ):
                return visitor.visitVocabulary_name(self)
            else:
                return visitor.visitChildren(self)




    def vocabulary_name(self):

        localctx = MizarParser.Vocabulary_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vocabulary_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Article_nameContext)
            else:
                return self.getTypedRuleContext(MizarParser.Article_nameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_library_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibrary_directive" ):
                return visitor.visitLibrary_directive(self)
            else:
                return visitor.visitChildren(self)




    def library_directive(self):

        localctx = MizarParser.Library_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_library_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__4) | (1 << MizarParser.T__5) | (1 << MizarParser.T__6) | (1 << MizarParser.T__7) | (1 << MizarParser.T__8) | (1 << MizarParser.T__9) | (1 << MizarParser.T__10) | (1 << MizarParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 357
            self.article_name()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 358
                self.match(MizarParser.T__2)
                self.state = 359
                self.article_name()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Article_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_article_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArticle_name" ):
                return visitor.visitArticle_name(self)
            else:
                return visitor.visitChildren(self)




    def article_name(self):

        localctx = MizarParser.Article_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_article_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Requirement_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RequirementContext)
            else:
                return self.getTypedRuleContext(MizarParser.RequirementContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_requirement_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequirement_directive" ):
                return visitor.visitRequirement_directive(self)
            else:
                return visitor.visitChildren(self)




    def requirement_directive(self):

        localctx = MizarParser.Requirement_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_requirement_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(MizarParser.T__12)
            self.state = 370
            self.requirement()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 371
                self.match(MizarParser.T__2)
                self.state = 372
                self.requirement()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 378
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_requirement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequirement" ):
                return visitor.visitRequirement(self)
            else:
                return visitor.visitChildren(self)




    def requirement(self):

        localctx = MizarParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Text_properContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SectionContext)
            else:
                return self.getTypedRuleContext(MizarParser.SectionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_text_proper

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitText_proper" ):
                return visitor.visitText_proper(self)
            else:
                return visitor.visitChildren(self)




    def text_proper(self):

        localctx = MizarParser.Text_properContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_text_proper)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 382
                self.section()
                self.state = 385 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__13):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def text_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Text_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Text_itemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_section

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection" ):
                return visitor.visitSection(self)
            else:
                return visitor.visitChildren(self)




    def section(self):

        localctx = MizarParser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(MizarParser.T__13)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__14) | (1 << MizarParser.T__15) | (1 << MizarParser.T__16) | (1 << MizarParser.T__18) | (1 << MizarParser.T__19) | (1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__57))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (MizarParser.T__73 - 74)) | (1 << (MizarParser.T__74 - 74)) | (1 << (MizarParser.T__78 - 74)) | (1 << (MizarParser.T__79 - 74)) | (1 << (MizarParser.T__80 - 74)) | (1 << (MizarParser.T__91 - 74)) | (1 << (MizarParser.T__92 - 74)) | (1 << (MizarParser.T__95 - 74)) | (1 << (MizarParser.T__106 - 74)) | (1 << (MizarParser.T__107 - 74)) | (1 << (MizarParser.T__108 - 74)) | (1 << (MizarParser.T__109 - 74)) | (1 << (MizarParser.T__110 - 74)) | (1 << (MizarParser.T__113 - 74)) | (1 << (MizarParser.T__116 - 74)) | (1 << (MizarParser.T__119 - 74)) | (1 << (MizarParser.T__122 - 74)) | (1 << (MizarParser.T__123 - 74)) | (1 << (MizarParser.T__124 - 74)) | (1 << (MizarParser.T__125 - 74)) | (1 << (MizarParser.T__126 - 74)) | (1 << (MizarParser.T__127 - 74)) | (1 << (MizarParser.T__128 - 74)) | (1 << (MizarParser.T__129 - 74)) | (1 << (MizarParser.T__130 - 74)) | (1 << (MizarParser.T__131 - 74)) | (1 << (MizarParser.PREDICATE_SYMBOL - 74)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 74)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 74)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 139)) | (1 << (MizarParser.IDENTIFIER - 139)) | (1 << (MizarParser.NUMERAL - 139)))) != 0):
                self.state = 388
                self.text_item()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Text_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservation(self):
            return self.getTypedRuleContext(MizarParser.ReservationContext,0)


        def definitional_item(self):
            return self.getTypedRuleContext(MizarParser.Definitional_itemContext,0)


        def registration_item(self):
            return self.getTypedRuleContext(MizarParser.Registration_itemContext,0)


        def notation_item(self):
            return self.getTypedRuleContext(MizarParser.Notation_itemContext,0)


        def theorem(self):
            return self.getTypedRuleContext(MizarParser.TheoremContext,0)


        def scheme_item(self):
            return self.getTypedRuleContext(MizarParser.Scheme_itemContext,0)


        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_text_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitText_item" ):
                return visitor.visitText_item(self)
            else:
                return visitor.visitChildren(self)




    def text_item(self):

        localctx = MizarParser.Text_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_text_item)
        try:
            self.state = 401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.reservation()
                pass
            elif token in [MizarParser.T__16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.definitional_item()
                pass
            elif token in [MizarParser.T__18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 396
                self.registration_item()
                pass
            elif token in [MizarParser.T__19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                self.notation_item()
                pass
            elif token in [MizarParser.T__73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 398
                self.theorem()
                pass
            elif token in [MizarParser.T__74]:
                self.enterOuterAlt(localctx, 6)
                self.state = 399
                self.scheme_item()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 400
                self.auxiliary_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservation_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reservation_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reservation_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reservation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservation" ):
                return visitor.visitReservation(self)
            else:
                return visitor.visitChildren(self)




    def reservation(self):

        localctx = MizarParser.ReservationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reservation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(MizarParser.T__14)
            self.state = 404
            self.reservation_segment()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 405
                self.match(MizarParser.T__2)
                self.state = 406
                self.reservation_segment()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reservation_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reserved_identifiers(self):
            return self.getTypedRuleContext(MizarParser.Reserved_identifiersContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reservation_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservation_segment" ):
                return visitor.visitReservation_segment(self)
            else:
                return visitor.visitChildren(self)




    def reservation_segment(self):

        localctx = MizarParser.Reservation_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_reservation_segment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.reserved_identifiers()
            self.state = 415
            self.match(MizarParser.T__15)
            self.state = 416
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_identifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reserved_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reserved_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reserved_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reserved_identifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReserved_identifiers" ):
                return visitor.visitReserved_identifiers(self)
            else:
                return visitor.visitChildren(self)




    def reserved_identifiers(self):

        localctx = MizarParser.Reserved_identifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reserved_identifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.reserved_identifier()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 419
                self.match(MizarParser.T__2)
                self.state = 420
                self.reserved_identifier()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_reserved_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReserved_identifier" ):
                return visitor.visitReserved_identifier(self)
            else:
                return visitor.visitChildren(self)




    def reserved_identifier(self):

        localctx = MizarParser.Reserved_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_reserved_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definitional_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definitional_block(self):
            return self.getTypedRuleContext(MizarParser.Definitional_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definitional_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinitional_item" ):
                return visitor.visitDefinitional_item(self)
            else:
                return visitor.visitChildren(self)




    def definitional_item(self):

        localctx = MizarParser.Definitional_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_definitional_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.definitional_block()
            self.state = 429
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Registration_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def registration_block(self):
            return self.getTypedRuleContext(MizarParser.Registration_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_registration_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegistration_item" ):
                return visitor.visitRegistration_item(self)
            else:
                return visitor.visitChildren(self)




    def registration_item(self):

        localctx = MizarParser.Registration_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_registration_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.registration_block()
            self.state = 432
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notation_block(self):
            return self.getTypedRuleContext(MizarParser.Notation_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotation_item" ):
                return visitor.visitNotation_item(self)
            else:
                return visitor.visitChildren(self)




    def notation_item(self):

        localctx = MizarParser.Notation_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_notation_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.notation_block()
            self.state = 435
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definitional_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definition_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Definition_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Definition_itemContext,i)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.DefinitionContext,i)


        def redefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RedefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.RedefinitionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_definitional_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinitional_block" ):
                return visitor.visitDefinitional_block(self)
            else:
                return visitor.visitChildren(self)




    def definitional_block(self):

        localctx = MizarParser.Definitional_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_definitional_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(MizarParser.T__16)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (MizarParser.T__15 - 16)) | (1 << (MizarParser.T__20 - 16)) | (1 << (MizarParser.T__22 - 16)) | (1 << (MizarParser.T__23 - 16)) | (1 << (MizarParser.T__24 - 16)) | (1 << (MizarParser.T__30 - 16)) | (1 << (MizarParser.T__34 - 16)) | (1 << (MizarParser.T__40 - 16)) | (1 << (MizarParser.T__46 - 16)) | (1 << (MizarParser.T__47 - 16)) | (1 << (MizarParser.T__50 - 16)) | (1 << (MizarParser.T__57 - 16)) | (1 << (MizarParser.T__58 - 16)) | (1 << (MizarParser.T__78 - 16)))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (MizarParser.T__79 - 80)) | (1 << (MizarParser.T__80 - 80)) | (1 << (MizarParser.T__85 - 80)) | (1 << (MizarParser.T__86 - 80)) | (1 << (MizarParser.T__91 - 80)) | (1 << (MizarParser.T__92 - 80)) | (1 << (MizarParser.T__95 - 80)) | (1 << (MizarParser.T__106 - 80)) | (1 << (MizarParser.T__107 - 80)) | (1 << (MizarParser.T__108 - 80)) | (1 << (MizarParser.T__109 - 80)) | (1 << (MizarParser.T__110 - 80)) | (1 << (MizarParser.T__113 - 80)) | (1 << (MizarParser.T__116 - 80)) | (1 << (MizarParser.T__119 - 80)) | (1 << (MizarParser.T__122 - 80)) | (1 << (MizarParser.T__123 - 80)) | (1 << (MizarParser.T__124 - 80)) | (1 << (MizarParser.T__125 - 80)) | (1 << (MizarParser.T__126 - 80)) | (1 << (MizarParser.T__127 - 80)) | (1 << (MizarParser.T__128 - 80)) | (1 << (MizarParser.T__129 - 80)) | (1 << (MizarParser.T__130 - 80)) | (1 << (MizarParser.T__131 - 80)) | (1 << (MizarParser.PREDICATE_SYMBOL - 80)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 80)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.IDENTIFIER - 80)) | (1 << (MizarParser.NUMERAL - 80)))) != 0):
                self.state = 441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__15, MizarParser.T__20, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__85, MizarParser.T__86, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 438
                    self.definition_item()
                    pass
                elif token in [MizarParser.T__23, MizarParser.T__30, MizarParser.T__40, MizarParser.T__50, MizarParser.T__58]:
                    self.state = 439
                    self.definition()
                    pass
                elif token in [MizarParser.T__22]:
                    self.state = 440
                    self.redefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 446
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Registration_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Loci_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Loci_declarationContext,i)


        def cluster_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Cluster_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Cluster_registrationContext,i)


        def identify_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Identify_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Identify_registrationContext,i)


        def property_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Property_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Property_registrationContext,i)


        def reduction_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reduction_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reduction_registrationContext,i)


        def auxiliary_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Auxiliary_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_registration_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegistration_block" ):
                return visitor.visitRegistration_block(self)
            else:
                return visitor.visitChildren(self)




    def registration_block(self):

        localctx = MizarParser.Registration_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_registration_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(MizarParser.T__18)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (MizarParser.T__15 - 16)) | (1 << (MizarParser.T__20 - 16)) | (1 << (MizarParser.T__24 - 16)) | (1 << (MizarParser.T__34 - 16)) | (1 << (MizarParser.T__39 - 16)) | (1 << (MizarParser.T__46 - 16)) | (1 << (MizarParser.T__47 - 16)) | (1 << (MizarParser.T__57 - 16)) | (1 << (MizarParser.T__59 - 16)) | (1 << (MizarParser.T__61 - 16)) | (1 << (MizarParser.T__64 - 16)) | (1 << (MizarParser.T__78 - 16)))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (MizarParser.T__79 - 80)) | (1 << (MizarParser.T__80 - 80)) | (1 << (MizarParser.T__91 - 80)) | (1 << (MizarParser.T__92 - 80)) | (1 << (MizarParser.T__95 - 80)) | (1 << (MizarParser.T__106 - 80)) | (1 << (MizarParser.T__107 - 80)) | (1 << (MizarParser.T__108 - 80)) | (1 << (MizarParser.T__109 - 80)) | (1 << (MizarParser.T__110 - 80)) | (1 << (MizarParser.T__113 - 80)) | (1 << (MizarParser.T__116 - 80)) | (1 << (MizarParser.T__119 - 80)) | (1 << (MizarParser.T__122 - 80)) | (1 << (MizarParser.T__123 - 80)) | (1 << (MizarParser.T__124 - 80)) | (1 << (MizarParser.T__125 - 80)) | (1 << (MizarParser.T__126 - 80)) | (1 << (MizarParser.T__127 - 80)) | (1 << (MizarParser.T__128 - 80)) | (1 << (MizarParser.T__129 - 80)) | (1 << (MizarParser.T__130 - 80)) | (1 << (MizarParser.T__131 - 80)) | (1 << (MizarParser.PREDICATE_SYMBOL - 80)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 80)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.IDENTIFIER - 80)) | (1 << (MizarParser.NUMERAL - 80)))) != 0):
                self.state = 455
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__20]:
                    self.state = 449
                    self.loci_declaration()
                    pass
                elif token in [MizarParser.T__59]:
                    self.state = 450
                    self.cluster_registration()
                    pass
                elif token in [MizarParser.T__61]:
                    self.state = 451
                    self.identify_registration()
                    pass
                elif token in [MizarParser.T__39]:
                    self.state = 452
                    self.property_registration()
                    pass
                elif token in [MizarParser.T__64]:
                    self.state = 453
                    self.reduction_registration()
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 454
                    self.auxiliary_item()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Loci_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Loci_declarationContext,i)


        def notation_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Notation_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Notation_declarationContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotation_block" ):
                return visitor.visitNotation_block(self)
            else:
                return visitor.visitChildren(self)




    def notation_block(self):

        localctx = MizarParser.Notation_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_notation_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(MizarParser.T__19)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__20) | (1 << MizarParser.T__35) | (1 << MizarParser.T__56))) != 0):
                self.state = 465
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__20]:
                    self.state = 463
                    self.loci_declaration()
                    pass
                elif token in [MizarParser.T__35, MizarParser.T__56]:
                    self.state = 464
                    self.notation_declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definition_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self):
            return self.getTypedRuleContext(MizarParser.Loci_declarationContext,0)


        def permissive_assumption(self):
            return self.getTypedRuleContext(MizarParser.Permissive_assumptionContext,0)


        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definition_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinition_item" ):
                return visitor.visitDefinition_item(self)
            else:
                return visitor.visitChildren(self)




    def definition_item(self):

        localctx = MizarParser.Definition_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_definition_item)
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.loci_declaration()
                pass
            elif token in [MizarParser.T__85, MizarParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.permissive_assumption()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.auxiliary_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_synonym(self):
            return self.getTypedRuleContext(MizarParser.Attribute_synonymContext,0)


        def attribute_antonym(self):
            return self.getTypedRuleContext(MizarParser.Attribute_antonymContext,0)


        def functor_synonym(self):
            return self.getTypedRuleContext(MizarParser.Functor_synonymContext,0)


        def mode_synonym(self):
            return self.getTypedRuleContext(MizarParser.Mode_synonymContext,0)


        def predicate_synonym(self):
            return self.getTypedRuleContext(MizarParser.Predicate_synonymContext,0)


        def predicate_antonym(self):
            return self.getTypedRuleContext(MizarParser.Predicate_antonymContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotation_declaration" ):
                return visitor.visitNotation_declaration(self)
            else:
                return visitor.visitChildren(self)




    def notation_declaration(self):

        localctx = MizarParser.Notation_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_notation_declaration)
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.attribute_synonym()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.attribute_antonym()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.functor_synonym()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.mode_synonym()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 481
                self.predicate_synonym()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 482
                self.predicate_antonym()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loci_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_loci_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoci_declaration" ):
                return visitor.visitLoci_declaration(self)
            else:
                return visitor.visitChildren(self)




    def loci_declaration(self):

        localctx = MizarParser.Loci_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_loci_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(MizarParser.T__20)
            self.state = 486
            self.qualified_variables()
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 487
                self.match(MizarParser.T__21)
                self.state = 488
                self.conditions()


            self.state = 491
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Permissive_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_permissive_assumption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPermissive_assumption" ):
                return visitor.visitPermissive_assumption(self)
            else:
                return visitor.visitChildren(self)




    def permissive_assumption(self):

        localctx = MizarParser.Permissive_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_permissive_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.assumption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_definition(self):
            return self.getTypedRuleContext(MizarParser.Structure_definitionContext,0)


        def mode_definition(self):
            return self.getTypedRuleContext(MizarParser.Mode_definitionContext,0)


        def functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Functor_definitionContext,0)


        def predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Predicate_definitionContext,0)


        def attribute_definition(self):
            return self.getTypedRuleContext(MizarParser.Attribute_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinition" ):
                return visitor.visitDefinition(self)
            else:
                return visitor.visitChildren(self)




    def definition(self):

        localctx = MizarParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_definition)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.structure_definition()
                pass
            elif token in [MizarParser.T__30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.mode_definition()
                pass
            elif token in [MizarParser.T__40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.functor_definition()
                pass
            elif token in [MizarParser.T__50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.predicate_definition()
                pass
            elif token in [MizarParser.T__58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.attribute_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_definition(self):
            return self.getTypedRuleContext(MizarParser.Mode_definitionContext,0)


        def functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Functor_definitionContext,0)


        def predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Predicate_definitionContext,0)


        def attribute_definition(self):
            return self.getTypedRuleContext(MizarParser.Attribute_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_redefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedefinition" ):
                return visitor.visitRedefinition(self)
            else:
                return visitor.visitChildren(self)




    def redefinition(self):

        localctx = MizarParser.RedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_redefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(MizarParser.T__22)
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__30]:
                self.state = 503
                self.mode_definition()
                pass
            elif token in [MizarParser.T__40]:
                self.state = 504
                self.functor_definition()
                pass
            elif token in [MizarParser.T__50]:
                self.state = 505
                self.predicate_definition()
                pass
            elif token in [MizarParser.T__58]:
                self.state = 506
                self.attribute_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def fields(self):
            return self.getTypedRuleContext(MizarParser.FieldsContext,0)


        def ancestors(self):
            return self.getTypedRuleContext(MizarParser.AncestorsContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structure_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructure_definition" ):
                return visitor.visitStructure_definition(self)
            else:
                return visitor.visitChildren(self)




    def structure_definition(self):

        localctx = MizarParser.Structure_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structure_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(MizarParser.T__23)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24:
                self.state = 510
                self.match(MizarParser.T__24)
                self.state = 511
                self.ancestors()
                self.state = 512
                self.match(MizarParser.T__25)


            self.state = 516
            self.structure_symbol()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__26:
                self.state = 517
                self.match(MizarParser.T__26)
                self.state = 518
                self.loci()


            self.state = 521
            self.match(MizarParser.T__27)
            self.state = 522
            self.fields()
            self.state = 523
            self.match(MizarParser.T__28)
            self.state = 524
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AncestorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_type_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Structure_type_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Structure_type_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_ancestors

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAncestors" ):
                return visitor.visitAncestors(self)
            else:
                return visitor.visitChildren(self)




    def ancestors(self):

        localctx = MizarParser.AncestorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ancestors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.structure_type_expression()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 527
                self.match(MizarParser.T__2)
                self.state = 528
                self.structure_type_expression()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTURE_SYMBOL(self):
            return self.getToken(MizarParser.STRUCTURE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_structure_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructure_symbol" ):
                return visitor.visitStructure_symbol(self)
            else:
                return visitor.visitChildren(self)




    def structure_symbol(self):

        localctx = MizarParser.Structure_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structure_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(MizarParser.STRUCTURE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_loci

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoci" ):
                return visitor.visitLoci(self)
            else:
                return visitor.visitChildren(self)




    def loci(self):

        localctx = MizarParser.LociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_loci)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.locus()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 537
                self.match(MizarParser.T__2)
                self.state = 538
                self.locus()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Field_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Field_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_fields

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFields" ):
                return visitor.visitFields(self)
            else:
                return visitor.visitChildren(self)




    def fields(self):

        localctx = MizarParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.field_segment()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 545
                self.match(MizarParser.T__2)
                self.state = 546
                self.field_segment()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_locus

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocus" ):
                return visitor.visitLocus(self)
            else:
                return visitor.visitChildren(self)




    def locus(self):

        localctx = MizarParser.LocusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_locus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_variable_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_identifier" ):
                return visitor.visitVariable_identifier(self)
            else:
                return visitor.visitChildren(self)




    def variable_identifier(self):

        localctx = MizarParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Selector_symbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.Selector_symbolContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_field_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_segment" ):
                return visitor.visitField_segment(self)
            else:
                return visitor.visitChildren(self)




    def field_segment(self):

        localctx = MizarParser.Field_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_field_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.selector_symbol()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 557
                self.match(MizarParser.T__2)
                self.state = 558
                self.selector_symbol()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 564
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECTOR_SYMBOL(self):
            return self.getToken(MizarParser.SELECTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_selector_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector_symbol" ):
                return visitor.visitSelector_symbol(self)
            else:
                return visitor.visitChildren(self)




    def selector_symbol(self):

        localctx = MizarParser.Selector_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_selector_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(MizarParser.SELECTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_specification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecification" ):
                return visitor.visitSpecification(self)
            else:
                return visitor.visitChildren(self)




    def specification(self):

        localctx = MizarParser.SpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(MizarParser.T__29)
            self.state = 569
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_pattern(self):
            return self.getTypedRuleContext(MizarParser.Mode_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def mode_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Mode_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Mode_propertyContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMode_definition" ):
                return visitor.visitMode_definition(self)
            else:
                return visitor.visitChildren(self)




    def mode_definition(self):

        localctx = MizarParser.Mode_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mode_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(MizarParser.T__30)
            self.state = 572
            self.mode_pattern()
            self.state = 586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__29, MizarParser.T__31]:
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__29:
                    self.state = 573
                    self.specification()


                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__31:
                    self.state = 576
                    self.match(MizarParser.T__31)
                    self.state = 577
                    self.definiens()


                self.state = 580
                self.match(MizarParser.T__3)
                self.state = 581
                self.correctness_conditions()
                pass
            elif token in [MizarParser.T__32]:
                self.state = 582
                self.match(MizarParser.T__32)
                self.state = 583
                self.type_expression()
                self.state = 584
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__39:
                self.state = 588
                self.mode_property()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_symbol(self):
            return self.getTypedRuleContext(MizarParser.Mode_symbolContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMode_pattern" ):
                return visitor.visitMode_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mode_pattern(self):

        localctx = MizarParser.Mode_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_mode_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.mode_symbol()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__33:
                self.state = 595
                self.match(MizarParser.T__33)
                self.state = 596
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODE_SYMBOL(self):
            return self.getToken(MizarParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_mode_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMode_symbol" ):
                return visitor.visitMode_symbol(self)
            else:
                return visitor.visitChildren(self)




    def mode_symbol(self):

        localctx = MizarParser.Mode_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mode_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__34 or _la==MizarParser.MODE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Mode_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Mode_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_synonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMode_synonym" ):
                return visitor.visitMode_synonym(self)
            else:
                return visitor.visitChildren(self)




    def mode_synonym(self):

        localctx = MizarParser.Mode_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mode_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(MizarParser.T__35)
            self.state = 602
            self.mode_pattern()
            self.state = 603
            self.match(MizarParser.T__15)
            self.state = 604
            self.mode_pattern()
            self.state = 605
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_definiens(self):
            return self.getTypedRuleContext(MizarParser.Simple_definiensContext,0)


        def conditional_definiens(self):
            return self.getTypedRuleContext(MizarParser.Conditional_definiensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definiens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefiniens" ):
                return visitor.visitDefiniens(self)
            else:
                return visitor.visitChildren(self)




    def definiens(self):

        localctx = MizarParser.DefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_definiens)
        try:
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.simple_definiens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.conditional_definiens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simple_definiens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_definiens" ):
                return visitor.visitSimple_definiens(self)
            else:
                return visitor.visitChildren(self)




    def simple_definiens(self):

        localctx = MizarParser.Simple_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simple_definiens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__36:
                self.state = 611
                self.match(MizarParser.T__36)
                self.state = 612
                self.label_identifier()
                self.state = 613
                self.match(MizarParser.T__36)


            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 617
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 618
                self.term_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_label_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_identifier" ):
                return visitor.visitLabel_identifier(self)
            else:
                return visitor.visitChildren(self)




    def label_identifier(self):

        localctx = MizarParser.Label_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_label_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partial_definiens_list(self):
            return self.getTypedRuleContext(MizarParser.Partial_definiens_listContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditional_definiens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_definiens" ):
                return visitor.visitConditional_definiens(self)
            else:
                return visitor.visitChildren(self)




    def conditional_definiens(self):

        localctx = MizarParser.Conditional_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_conditional_definiens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__36:
                self.state = 623
                self.match(MizarParser.T__36)
                self.state = 624
                self.label_identifier()
                self.state = 625
                self.match(MizarParser.T__36)


            self.state = 629
            self.partial_definiens_list()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__37:
                self.state = 630
                self.match(MizarParser.T__37)
                self.state = 633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 631
                    self.sentence()
                    pass

                elif la_ == 2:
                    self.state = 632
                    self.term_expression(0)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_definiens_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partial_definiens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Partial_definiensContext)
            else:
                return self.getTypedRuleContext(MizarParser.Partial_definiensContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_partial_definiens_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartial_definiens_list" ):
                return visitor.visitPartial_definiens_list(self)
            else:
                return visitor.visitChildren(self)




    def partial_definiens_list(self):

        localctx = MizarParser.Partial_definiens_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_partial_definiens_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.partial_definiens()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 638
                self.match(MizarParser.T__2)
                self.state = 639
                self.partial_definiens()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SentenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.SentenceContext,i)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_partial_definiens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartial_definiens" ):
                return visitor.visitPartial_definiens(self)
            else:
                return visitor.visitChildren(self)




    def partial_definiens(self):

        localctx = MizarParser.Partial_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_partial_definiens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 645
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 646
                self.term_expression(0)
                pass


            self.state = 649
            self.match(MizarParser.T__38)
            self.state = 650
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_property

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMode_property" ):
                return visitor.visitMode_property(self)
            else:
                return visitor.visitChildren(self)




    def mode_property(self):

        localctx = MizarParser.Mode_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_mode_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(MizarParser.T__39)
            self.state = 653
            self.justification()
            self.state = 654
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self):
            return self.getTypedRuleContext(MizarParser.Functor_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def functor_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_propertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_definition" ):
                return visitor.visitFunctor_definition(self)
            else:
                return visitor.visitChildren(self)




    def functor_definition(self):

        localctx = MizarParser.Functor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functor_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(MizarParser.T__40)
            self.state = 657
            self.functor_pattern()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__29:
                self.state = 658
                self.specification()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__31 or _la==MizarParser.T__41:
                self.state = 661
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__31 or _la==MizarParser.T__41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 662
                self.definiens()


            self.state = 665
            self.match(MizarParser.T__3)
            self.state = 666
            self.correctness_conditions()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__42) | (1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45))) != 0):
                self.state = 667
                self.functor_property()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_symbol(self):
            return self.getTypedRuleContext(MizarParser.Functor_symbolContext,0)


        def functor_loci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_lociContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_lociContext,i)


        def left_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Left_functor_bracketContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def right_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Right_functor_bracketContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_pattern" ):
                return visitor.visitFunctor_pattern(self)
            else:
                return visitor.visitChildren(self)




    def functor_pattern(self):

        localctx = MizarParser.Functor_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functor_pattern)
        self._la = 0 # Token type
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__24, MizarParser.FUNCTOR_SYMBOL, MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                    self.state = 673
                    self.functor_loci()


                self.state = 676
                self.functor_symbol()
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                    self.state = 677
                    self.functor_loci()


                pass
            elif token in [MizarParser.T__46, MizarParser.T__47, MizarParser.LEFT_FUNCTOR_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.left_functor_bracket()
                self.state = 681
                self.loci()
                self.state = 682
                self.right_functor_bracket()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_property

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_property" ):
                return visitor.visitFunctor_property(self)
            else:
                return visitor.visitChildren(self)




    def functor_property(self):

        localctx = MizarParser.Functor_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_functor_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__42) | (1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 687
            self.justification()
            self.state = 688
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_synonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_synonym" ):
                return visitor.visitFunctor_synonym(self)
            else:
                return visitor.visitChildren(self)




    def functor_synonym(self):

        localctx = MizarParser.Functor_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functor_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(MizarParser.T__35)
            self.state = 691
            self.functor_pattern()
            self.state = 692
            self.match(MizarParser.T__15)
            self.state = 693
            self.functor_pattern()
            self.state = 694
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_lociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_loci

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_loci" ):
                return visitor.visitFunctor_loci(self)
            else:
                return visitor.visitChildren(self)




    def functor_loci(self):

        localctx = MizarParser.Functor_lociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_functor_loci)
        try:
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.locus()
                pass
            elif token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.match(MizarParser.T__24)
                self.state = 698
                self.loci()
                self.state = 699
                self.match(MizarParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functor_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_symbol" ):
                return visitor.visitFunctor_symbol(self)
            else:
                return visitor.visitChildren(self)




    def functor_symbol(self):

        localctx = MizarParser.Functor_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_functor_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(MizarParser.FUNCTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Left_functor_bracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.LEFT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_left_functor_bracket

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeft_functor_bracket" ):
                return visitor.visitLeft_functor_bracket(self)
            else:
                return visitor.visitChildren(self)




    def left_functor_bracket(self):

        localctx = MizarParser.Left_functor_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_left_functor_bracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__46 or _la==MizarParser.T__47 or _la==MizarParser.LEFT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_functor_bracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.RIGHT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_right_functor_bracket

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRight_functor_bracket" ):
                return visitor.visitRight_functor_bracket(self)
            else:
                return visitor.visitChildren(self)




    def right_functor_bracket(self):

        localctx = MizarParser.Right_functor_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_right_functor_bracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__48 or _la==MizarParser.T__49 or _la==MizarParser.RIGHT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self):
            return self.getTypedRuleContext(MizarParser.Predicate_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def predicate_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_propertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_definition" ):
                return visitor.visitPredicate_definition(self)
            else:
                return visitor.visitChildren(self)




    def predicate_definition(self):

        localctx = MizarParser.Predicate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_predicate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(MizarParser.T__50)
            self.state = 710
            self.predicate_pattern()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__31:
                self.state = 711
                self.match(MizarParser.T__31)
                self.state = 712
                self.definiens()


            self.state = 715
            self.match(MizarParser.T__3)
            self.state = 716
            self.correctness_conditions()
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__51) | (1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55))) != 0):
                self.state = 717
                self.predicate_property()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_symbol(self):
            return self.getTypedRuleContext(MizarParser.Predicate_symbolContext,0)


        def loci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LociContext)
            else:
                return self.getTypedRuleContext(MizarParser.LociContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_pattern" ):
                return visitor.visitPredicate_pattern(self)
            else:
                return visitor.visitChildren(self)




    def predicate_pattern(self):

        localctx = MizarParser.Predicate_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_predicate_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 723
                self.loci()


            self.state = 726
            self.predicate_symbol()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 727
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_property

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_property" ):
                return visitor.visitPredicate_property(self)
            else:
                return visitor.visitChildren(self)




    def predicate_property(self):

        localctx = MizarParser.Predicate_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_predicate_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__51) | (1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 731
            self.justification()
            self.state = 732
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_synonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_synonym" ):
                return visitor.visitPredicate_synonym(self)
            else:
                return visitor.visitChildren(self)




    def predicate_synonym(self):

        localctx = MizarParser.Predicate_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicate_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(MizarParser.T__35)
            self.state = 735
            self.predicate_pattern()
            self.state = 736
            self.match(MizarParser.T__15)
            self.state = 737
            self.predicate_pattern()
            self.state = 738
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_antonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_antonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_antonym" ):
                return visitor.visitPredicate_antonym(self)
            else:
                return visitor.visitChildren(self)




    def predicate_antonym(self):

        localctx = MizarParser.Predicate_antonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicate_antonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(MizarParser.T__56)
            self.state = 741
            self.predicate_pattern()
            self.state = 742
            self.match(MizarParser.T__15)
            self.state = 743
            self.predicate_pattern()
            self.state = 744
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICATE_SYMBOL(self):
            return self.getToken(MizarParser.PREDICATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicate_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_symbol" ):
                return visitor.visitPredicate_symbol(self)
            else:
                return visitor.visitChildren(self)




    def predicate_symbol(self):

        localctx = MizarParser.Predicate_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_predicate_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__57 or _la==MizarParser.PREDICATE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self):
            return self.getTypedRuleContext(MizarParser.Attribute_patternContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = MizarParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_attribute_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(MizarParser.T__58)
            self.state = 749
            self.attribute_pattern()
            self.state = 750
            self.match(MizarParser.T__31)
            self.state = 751
            self.definiens()
            self.state = 752
            self.match(MizarParser.T__3)
            self.state = 753
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def attribute_symbol(self):
            return self.getTypedRuleContext(MizarParser.Attribute_symbolContext,0)


        def attribute_loci(self):
            return self.getTypedRuleContext(MizarParser.Attribute_lociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_pattern" ):
                return visitor.visitAttribute_pattern(self)
            else:
                return visitor.visitChildren(self)




    def attribute_pattern(self):

        localctx = MizarParser.Attribute_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_attribute_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.locus()
            self.state = 756
            self.match(MizarParser.T__32)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24 or _la==MizarParser.IDENTIFIER:
                self.state = 757
                self.attribute_loci()


            self.state = 760
            self.attribute_symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Attribute_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Attribute_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_synonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_synonym" ):
                return visitor.visitAttribute_synonym(self)
            else:
                return visitor.visitChildren(self)




    def attribute_synonym(self):

        localctx = MizarParser.Attribute_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attribute_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(MizarParser.T__35)
            self.state = 763
            self.attribute_pattern()
            self.state = 764
            self.match(MizarParser.T__15)
            self.state = 765
            self.attribute_pattern()
            self.state = 766
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_antonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Attribute_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Attribute_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_antonym

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_antonym" ):
                return visitor.visitAttribute_antonym(self)
            else:
                return visitor.visitChildren(self)




    def attribute_antonym(self):

        localctx = MizarParser.Attribute_antonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_attribute_antonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(MizarParser.T__56)
            self.state = 769
            self.attribute_pattern()
            self.state = 770
            self.match(MizarParser.T__15)
            self.state = 771
            self.attribute_pattern()
            self.state = 772
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE_SYMBOL(self):
            return self.getToken(MizarParser.ATTRIBUTE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_attribute_symbol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_symbol" ):
                return visitor.visitAttribute_symbol(self)
            else:
                return visitor.visitChildren(self)




    def attribute_symbol(self):

        localctx = MizarParser.Attribute_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attribute_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(MizarParser.ATTRIBUTE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_lociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_loci

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_loci" ):
                return visitor.visitAttribute_loci(self)
            else:
                return visitor.visitChildren(self)




    def attribute_loci(self):

        localctx = MizarParser.Attribute_lociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attribute_loci)
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.loci()
                pass
            elif token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.match(MizarParser.T__24)
                self.state = 778
                self.loci()
                self.state = 779
                self.match(MizarParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cluster_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existential_registration(self):
            return self.getTypedRuleContext(MizarParser.Existential_registrationContext,0)


        def conditional_registration(self):
            return self.getTypedRuleContext(MizarParser.Conditional_registrationContext,0)


        def functorial_registration(self):
            return self.getTypedRuleContext(MizarParser.Functorial_registrationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_cluster_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCluster_registration" ):
                return visitor.visitCluster_registration(self)
            else:
                return visitor.visitChildren(self)




    def cluster_registration(self):

        localctx = MizarParser.Cluster_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cluster_registration)
        try:
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.existential_registration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.conditional_registration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.functorial_registration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Existential_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existential_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistential_registration" ):
                return visitor.visitExistential_registration(self)
            else:
                return visitor.visitChildren(self)




    def existential_registration(self):

        localctx = MizarParser.Existential_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_existential_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(MizarParser.T__59)
            self.state = 789
            self.adjective_cluster()
            self.state = 790
            self.match(MizarParser.T__15)
            self.state = 791
            self.type_expression()
            self.state = 792
            self.match(MizarParser.T__3)
            self.state = 793
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Adjective_clusterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective_cluster

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdjective_cluster" ):
                return visitor.visitAdjective_cluster(self)
            else:
                return visitor.visitChildren(self)




    def adjective_cluster(self):

        localctx = MizarParser.Adjective_clusterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_adjective_cluster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 795
                    self.adjective() 
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdjectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_symbol(self):
            return self.getTypedRuleContext(MizarParser.Attribute_symbolContext,0)


        def adjective_arguments(self):
            return self.getTypedRuleContext(MizarParser.Adjective_argumentsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdjective" ):
                return visitor.visitAdjective(self)
            else:
                return visitor.visitChildren(self)




    def adjective(self):

        localctx = MizarParser.AdjectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_adjective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__60:
                self.state = 801
                self.match(MizarParser.T__60)


            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                self.state = 804
                self.adjective_arguments()


            self.state = 807
            self.attribute_symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective_cluster(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Adjective_clusterContext)
            else:
                return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditional_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_registration" ):
                return visitor.visitConditional_registration(self)
            else:
                return visitor.visitChildren(self)




    def conditional_registration(self):

        localctx = MizarParser.Conditional_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conditional_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(MizarParser.T__59)
            self.state = 810
            self.adjective_cluster()
            self.state = 811
            self.match(MizarParser.T__29)
            self.state = 812
            self.adjective_cluster()
            self.state = 813
            self.match(MizarParser.T__15)
            self.state = 814
            self.type_expression()
            self.state = 815
            self.match(MizarParser.T__3)
            self.state = 816
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functorial_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorial_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctorial_registration" ):
                return visitor.visitFunctorial_registration(self)
            else:
                return visitor.visitChildren(self)




    def functorial_registration(self):

        localctx = MizarParser.Functorial_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functorial_registration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(MizarParser.T__59)
            self.state = 819
            self.term_expression(0)
            self.state = 820
            self.match(MizarParser.T__29)
            self.state = 821
            self.adjective_cluster()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__15:
                self.state = 822
                self.match(MizarParser.T__15)
                self.state = 823
                self.type_expression()


            self.state = 826
            self.match(MizarParser.T__3)
            self.state = 827
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identify_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_patternContext,i)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_identify_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentify_registration" ):
                return visitor.visitIdentify_registration(self)
            else:
                return visitor.visitChildren(self)




    def identify_registration(self):

        localctx = MizarParser.Identify_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identify_registration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(MizarParser.T__61)
            self.state = 830
            self.functor_pattern()
            self.state = 831
            self.match(MizarParser.T__62)
            self.state = 832
            self.functor_pattern()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__63:
                self.state = 833
                self.match(MizarParser.T__63)
                self.state = 834
                self.locus()
                self.state = 835
                self.match(MizarParser.T__57)
                self.state = 836
                self.locus()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__2:
                    self.state = 837
                    self.match(MizarParser.T__2)
                    self.state = 838
                    self.locus()
                    self.state = 839
                    self.match(MizarParser.T__57)
                    self.state = 840
                    self.locus()
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 849
            self.match(MizarParser.T__3)
            self.state = 850
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_property_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty_registration" ):
                return visitor.visitProperty_registration(self)
            else:
                return visitor.visitChildren(self)




    def property_registration(self):

        localctx = MizarParser.Property_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_property_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(MizarParser.T__39)
            self.state = 853
            self.match(MizarParser.T__33)
            self.state = 854
            self.type_expression()
            self.state = 855
            self.justification()
            self.state = 856
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reduction_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reduction_registration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduction_registration" ):
                return visitor.visitReduction_registration(self)
            else:
                return visitor.visitChildren(self)




    def reduction_registration(self):

        localctx = MizarParser.Reduction_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_reduction_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(MizarParser.T__64)
            self.state = 859
            self.term_expression(0)
            self.state = 860
            self.match(MizarParser.T__65)
            self.state = 861
            self.term_expression(0)
            self.state = 862
            self.match(MizarParser.T__3)
            self.state = 863
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Correctness_conditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correctness_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Correctness_conditionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Correctness_conditionContext,i)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctness_conditions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrectness_conditions" ):
                return visitor.visitCorrectness_conditions(self)
            else:
                return visitor.visitChildren(self)




    def correctness_conditions(self):

        localctx = MizarParser.Correctness_conditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_correctness_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MizarParser.T__67 - 68)) | (1 << (MizarParser.T__68 - 68)) | (1 << (MizarParser.T__69 - 68)) | (1 << (MizarParser.T__70 - 68)) | (1 << (MizarParser.T__71 - 68)) | (1 << (MizarParser.T__72 - 68)))) != 0):
                self.state = 865
                self.correctness_condition()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__66:
                self.state = 871
                self.match(MizarParser.T__66)
                self.state = 872
                self.justification()
                self.state = 873
                self.match(MizarParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Correctness_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctness_condition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrectness_condition" ):
                return visitor.visitCorrectness_condition(self)
            else:
                return visitor.visitChildren(self)




    def correctness_condition(self):

        localctx = MizarParser.Correctness_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_correctness_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MizarParser.T__67 - 68)) | (1 << (MizarParser.T__68 - 68)) | (1 << (MizarParser.T__69 - 68)) | (1 << (MizarParser.T__70 - 68)) | (1 << (MizarParser.T__71 - 68)) | (1 << (MizarParser.T__72 - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 878
            self.justification()
            self.state = 879
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoremContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_theorem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheorem" ):
                return visitor.visitTheorem(self)
            else:
                return visitor.visitChildren(self)




    def theorem(self):

        localctx = MizarParser.TheoremContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_theorem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(MizarParser.T__73)
            self.state = 882
            self.compact_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_block(self):
            return self.getTypedRuleContext(MizarParser.Scheme_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_item" ):
                return visitor.visitScheme_item(self)
            else:
                return visitor.visitChildren(self)




    def scheme_item(self):

        localctx = MizarParser.Scheme_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_scheme_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.scheme_block()
            self.state = 885
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_identifier(self):
            return self.getTypedRuleContext(MizarParser.Scheme_identifierContext,0)


        def scheme_parameters(self):
            return self.getTypedRuleContext(MizarParser.Scheme_parametersContext,0)


        def scheme_conclusion(self):
            return self.getTypedRuleContext(MizarParser.Scheme_conclusionContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def scheme_premise(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Scheme_premiseContext)
            else:
                return self.getTypedRuleContext(MizarParser.Scheme_premiseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_block" ):
                return visitor.visitScheme_block(self)
            else:
                return visitor.visitChildren(self)




    def scheme_block(self):

        localctx = MizarParser.Scheme_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_scheme_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(MizarParser.T__74)
            self.state = 888
            self.scheme_identifier()
            self.state = 889
            self.match(MizarParser.T__46)
            self.state = 890
            self.scheme_parameters()
            self.state = 891
            self.match(MizarParser.T__48)
            self.state = 892
            self.match(MizarParser.T__36)
            self.state = 893
            self.scheme_conclusion()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__75:
                self.state = 894
                self.match(MizarParser.T__75)
                self.state = 895
                self.scheme_premise()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__76:
                    self.state = 896
                    self.match(MizarParser.T__76)
                    self.state = 897
                    self.scheme_premise()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 905
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__3 or _la==MizarParser.T__77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 906
            self.reasoning()
            self.state = 907
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_scheme_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_identifier" ):
                return visitor.visitScheme_identifier(self)
            else:
                return visitor.visitChildren(self)




    def scheme_identifier(self):

        localctx = MizarParser.Scheme_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_scheme_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Scheme_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Scheme_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_parameters" ):
                return visitor.visitScheme_parameters(self)
            else:
                return visitor.visitChildren(self)




    def scheme_parameters(self):

        localctx = MizarParser.Scheme_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_scheme_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.scheme_segment()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 912
                self.match(MizarParser.T__2)
                self.state = 913
                self.scheme_segment()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_conclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_conclusion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_conclusion" ):
                return visitor.visitScheme_conclusion(self)
            else:
                return visitor.visitChildren(self)




    def scheme_conclusion(self):

        localctx = MizarParser.Scheme_conclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_scheme_conclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_premiseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_premise

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_premise" ):
                return visitor.visitScheme_premise(self)
            else:
                return visitor.visitChildren(self)




    def scheme_premise(self):

        localctx = MizarParser.Scheme_premiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_scheme_premise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.proposition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_segment(self):
            return self.getTypedRuleContext(MizarParser.Predicate_segmentContext,0)


        def functor_segment(self):
            return self.getTypedRuleContext(MizarParser.Functor_segmentContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_segment" ):
                return visitor.visitScheme_segment(self)
            else:
                return visitor.visitChildren(self)




    def scheme_segment(self):

        localctx = MizarParser.Scheme_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_scheme_segment)
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.predicate_segment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.functor_segment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,i)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_segment" ):
                return visitor.visitPredicate_segment(self)
            else:
                return visitor.visitChildren(self)




    def predicate_segment(self):

        localctx = MizarParser.Predicate_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_predicate_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.predicate_identifier()
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 928
                self.match(MizarParser.T__2)
                self.state = 929
                self.predicate_identifier()
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 935
            self.match(MizarParser.T__47)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.MODE_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                self.state = 936
                self.type_expression_list()


            self.state = 939
            self.match(MizarParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicate_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_identifier" ):
                return visitor.visitPredicate_identifier(self)
            else:
                return visitor.visitChildren(self)




    def predicate_identifier(self):

        localctx = MizarParser.Predicate_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_predicate_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_identifierContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_segment" ):
                return visitor.visitFunctor_segment(self)
            else:
                return visitor.visitChildren(self)




    def functor_segment(self):

        localctx = MizarParser.Functor_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_functor_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.functor_identifier()
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 944
                self.match(MizarParser.T__2)
                self.state = 945
                self.functor_identifier()
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 951
            self.match(MizarParser.T__24)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.MODE_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                self.state = 952
                self.type_expression_list()


            self.state = 955
            self.match(MizarParser.T__25)
            self.state = 956
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functor_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctor_identifier" ):
                return visitor.visitFunctor_identifier(self)
            else:
                return visitor.visitChildren(self)




    def functor_identifier(self):

        localctx = MizarParser.Functor_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functor_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auxiliary_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MizarParser.StatementContext,0)


        def private_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_auxiliary_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuxiliary_item" ):
                return visitor.visitAuxiliary_item(self)
            else:
                return visitor.visitChildren(self)




    def auxiliary_item(self):

        localctx = MizarParser.Auxiliary_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_auxiliary_item)
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.statement()
                pass
            elif token in [MizarParser.T__34, MizarParser.T__78, MizarParser.T__79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.private_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_definition(self):
            return self.getTypedRuleContext(MizarParser.Constant_definitionContext,0)


        def private_functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_functor_definitionContext,0)


        def private_predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_predicate_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_definition" ):
                return visitor.visitPrivate_definition(self)
            else:
                return visitor.visitChildren(self)




    def private_definition(self):

        localctx = MizarParser.Private_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_private_definition)
        try:
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.constant_definition()
                pass
            elif token in [MizarParser.T__78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.private_functor_definition()
                pass
            elif token in [MizarParser.T__79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 966
                self.private_predicate_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating_list(self):
            return self.getTypedRuleContext(MizarParser.Equating_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_constant_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_definition" ):
                return visitor.visitConstant_definition(self)
            else:
                return visitor.visitChildren(self)




    def constant_definition(self):

        localctx = MizarParser.Constant_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_constant_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(MizarParser.T__34)
            self.state = 970
            self.equating_list()
            self.state = 971
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equating_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_equating_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquating_list" ):
                return visitor.visitEquating_list(self)
            else:
                return visitor.visitChildren(self)




    def equating_list(self):

        localctx = MizarParser.Equating_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_equating_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.equating()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 974
                self.match(MizarParser.T__2)
                self.state = 975
                self.equating()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquatingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_equating

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquating" ):
                return visitor.visitEquating(self)
            else:
                return visitor.visitChildren(self)




    def equating(self):

        localctx = MizarParser.EquatingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_equating)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.variable_identifier()
            self.state = 982
            self.match(MizarParser.T__57)
            self.state = 983
            self.term_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_functor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def private_functor_pattern(self):
            return self.getTypedRuleContext(MizarParser.Private_functor_patternContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_functor_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_functor_definition" ):
                return visitor.visitPrivate_functor_definition(self)
            else:
                return visitor.visitChildren(self)




    def private_functor_definition(self):

        localctx = MizarParser.Private_functor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_private_functor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(MizarParser.T__78)
            self.state = 986
            self.private_functor_pattern()
            self.state = 987
            self.match(MizarParser.T__57)
            self.state = 988
            self.term_expression(0)
            self.state = 989
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_predicate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def private_predicate_pattern(self):
            return self.getTypedRuleContext(MizarParser.Private_predicate_patternContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_predicate_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_predicate_definition" ):
                return visitor.visitPrivate_predicate_definition(self)
            else:
                return visitor.visitChildren(self)




    def private_predicate_definition(self):

        localctx = MizarParser.Private_predicate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_private_predicate_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(MizarParser.T__79)
            self.state = 992
            self.private_predicate_pattern()
            self.state = 993
            self.match(MizarParser.T__31)
            self.state = 994
            self.sentence()
            self.state = 995
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_functor_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_identifier(self):
            return self.getTypedRuleContext(MizarParser.Functor_identifierContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_functor_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_functor_pattern" ):
                return visitor.visitPrivate_functor_pattern(self)
            else:
                return visitor.visitChildren(self)




    def private_functor_pattern(self):

        localctx = MizarParser.Private_functor_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_private_functor_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.functor_identifier()
            self.state = 998
            self.match(MizarParser.T__24)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.MODE_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                self.state = 999
                self.type_expression_list()


            self.state = 1002
            self.match(MizarParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_predicate_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_identifier(self):
            return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_predicate_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_predicate_pattern" ):
                return visitor.visitPrivate_predicate_pattern(self)
            else:
                return visitor.visitChildren(self)




    def private_predicate_pattern(self):

        localctx = MizarParser.Private_predicate_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_private_predicate_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.predicate_identifier()
            self.state = 1005
            self.match(MizarParser.T__47)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__34) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47) | (1 << MizarParser.T__60))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.MODE_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                self.state = 1006
                self.type_expression_list()


            self.state = 1009
            self.match(MizarParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReasoningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reasoning_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reasoning_itemContext,i)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def case_list(self):
            return self.getTypedRuleContext(MizarParser.Case_listContext,0)


        def suppose_list(self):
            return self.getTypedRuleContext(MizarParser.Suppose_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoning

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReasoning" ):
                return visitor.visitReasoning(self)
            else:
                return visitor.visitChildren(self)




    def reasoning(self):

        localctx = MizarParser.ReasoningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_reasoning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1011
                    self.reasoning_item() 
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__80 or _la==MizarParser.T__81:
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__80:
                    self.state = 1017
                    self.match(MizarParser.T__80)


                self.state = 1020
                self.match(MizarParser.T__81)
                self.state = 1021
                self.match(MizarParser.T__82)
                self.state = 1022
                self.simple_justification()
                self.state = 1023
                self.match(MizarParser.T__3)
                self.state = 1026
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__83]:
                    self.state = 1024
                    self.case_list()
                    pass
                elif token in [MizarParser.T__84]:
                    self.state = 1025
                    self.suppose_list()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.CaseContext)
            else:
                return self.getTypedRuleContext(MizarParser.CaseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_case_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_list" ):
                return visitor.visitCase_list(self)
            else:
                return visitor.visitChildren(self)




    def case_list(self):

        localctx = MizarParser.Case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1030
                self.case()
                self.state = 1033 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__83):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_case

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase" ):
                return visitor.visitCase(self)
            else:
                return visitor.visitChildren(self)




    def case(self):

        localctx = MizarParser.CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(MizarParser.T__83)
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1036
                self.proposition()
                pass
            elif token in [MizarParser.T__100]:
                self.state = 1037
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1040
            self.match(MizarParser.T__3)
            self.state = 1041
            self.reasoning()
            self.state = 1042
            self.match(MizarParser.T__17)
            self.state = 1043
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Suppose_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suppose(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SupposeContext)
            else:
                return self.getTypedRuleContext(MizarParser.SupposeContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_suppose_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuppose_list" ):
                return visitor.visitSuppose_list(self)
            else:
                return visitor.visitChildren(self)




    def suppose_list(self):

        localctx = MizarParser.Suppose_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_suppose_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1045
                self.suppose()
                self.state = 1048 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__84):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_suppose

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuppose" ):
                return visitor.visitSuppose(self)
            else:
                return visitor.visitChildren(self)




    def suppose(self):

        localctx = MizarParser.SupposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_suppose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(MizarParser.T__84)
            self.state = 1053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1051
                self.proposition()
                pass
            elif token in [MizarParser.T__100]:
                self.state = 1052
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1055
            self.match(MizarParser.T__3)
            self.state = 1056
            self.reasoning()
            self.state = 1057
            self.match(MizarParser.T__17)
            self.state = 1058
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reasoning_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def skeleton_item(self):
            return self.getTypedRuleContext(MizarParser.Skeleton_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoning_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReasoning_item" ):
                return visitor.visitReasoning_item(self)
            else:
                return visitor.visitChildren(self)




    def reasoning_item(self):

        localctx = MizarParser.Reasoning_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_reasoning_item)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__24, MizarParser.T__34, MizarParser.T__46, MizarParser.T__47, MizarParser.T__57, MizarParser.T__78, MizarParser.T__79, MizarParser.T__80, MizarParser.T__91, MizarParser.T__92, MizarParser.T__95, MizarParser.T__106, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__113, MizarParser.T__116, MizarParser.T__119, MizarParser.T__122, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.auxiliary_item()
                pass
            elif token in [MizarParser.T__20, MizarParser.T__85, MizarParser.T__86, MizarParser.T__87, MizarParser.T__88, MizarParser.T__89, MizarParser.T__90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.skeleton_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Skeleton_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalization(self):
            return self.getTypedRuleContext(MizarParser.GeneralizationContext,0)


        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def conclusion(self):
            return self.getTypedRuleContext(MizarParser.ConclusionContext,0)


        def exemplification(self):
            return self.getTypedRuleContext(MizarParser.ExemplificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_skeleton_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkeleton_item" ):
                return visitor.visitSkeleton_item(self)
            else:
                return visitor.visitChildren(self)




    def skeleton_item(self):

        localctx = MizarParser.Skeleton_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_skeleton_item)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.generalization()
                pass
            elif token in [MizarParser.T__85, MizarParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.assumption()
                pass
            elif token in [MizarParser.T__87, MizarParser.T__88, MizarParser.T__89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.conclusion()
                pass
            elif token in [MizarParser.T__90]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1067
                self.exemplification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_generalization

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneralization" ):
                return visitor.visitGeneralization(self)
            else:
                return visitor.visitChildren(self)




    def generalization(self):

        localctx = MizarParser.GeneralizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_generalization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(MizarParser.T__20)
            self.state = 1071
            self.qualified_variables()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 1072
                self.match(MizarParser.T__21)
                self.state = 1073
                self.conditions()


            self.state = 1076
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_assumption(self):
            return self.getTypedRuleContext(MizarParser.Single_assumptionContext,0)


        def collective_assumption(self):
            return self.getTypedRuleContext(MizarParser.Collective_assumptionContext,0)


        def existential_assumption(self):
            return self.getTypedRuleContext(MizarParser.Existential_assumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_assumption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssumption" ):
                return visitor.visitAssumption(self)
            else:
                return visitor.visitChildren(self)




    def assumption(self):

        localctx = MizarParser.AssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_assumption)
        try:
            self.state = 1081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.single_assumption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.collective_assumption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.existential_assumption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_single_assumption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_assumption" ):
                return visitor.visitSingle_assumption(self)
            else:
                return visitor.visitChildren(self)




    def single_assumption(self):

        localctx = MizarParser.Single_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_single_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(MizarParser.T__85)
            self.state = 1084
            self.proposition()
            self.state = 1085
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collective_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_collective_assumption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollective_assumption" ):
                return visitor.visitCollective_assumption(self)
            else:
                return visitor.visitChildren(self)




    def collective_assumption(self):

        localctx = MizarParser.Collective_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_collective_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(MizarParser.T__85)
            self.state = 1088
            self.conditions()
            self.state = 1089
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Existential_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existential_assumption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistential_assumption" ):
                return visitor.visitExistential_assumption(self)
            else:
                return visitor.visitChildren(self)




    def existential_assumption(self):

        localctx = MizarParser.Existential_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_existential_assumption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(MizarParser.T__86)
            self.state = 1092
            self.qualified_variables()
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__21:
                self.state = 1093
                self.match(MizarParser.T__21)
                self.state = 1094
                self.conditions()


            self.state = 1097
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def iterative_equality(self):
            return self.getTypedRuleContext(MizarParser.Iterative_equalityContext,0)


        def diffuse_conclusion(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_conclusionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conclusion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConclusion" ):
                return visitor.visitConclusion(self)
            else:
                return visitor.visitChildren(self)




    def conclusion(self):

        localctx = MizarParser.ConclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conclusion)
        self._la = 0 # Token type
        try:
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__87 or _la==MizarParser.T__88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1100
                    self.compact_statement()
                    pass

                elif la_ == 2:
                    self.state = 1101
                    self.iterative_equality()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.diffuse_conclusion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Diffuse_conclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diffuse_statement(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_statementContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuse_conclusion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiffuse_conclusion" ):
                return visitor.visitDiffuse_conclusion(self)
            else:
                return visitor.visitChildren(self)




    def diffuse_conclusion(self):

        localctx = MizarParser.Diffuse_conclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_diffuse_conclusion)
        try:
            self.state = 1114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.match(MizarParser.T__87)
                self.state = 1108
                self.diffuse_statement()
                pass
            elif token in [MizarParser.T__89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.match(MizarParser.T__89)
                self.state = 1110
                self.reasoning()
                self.state = 1111
                self.match(MizarParser.T__17)
                self.state = 1112
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExemplificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def example(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ExampleContext)
            else:
                return self.getTypedRuleContext(MizarParser.ExampleContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_exemplification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExemplification" ):
                return visitor.visitExemplification(self)
            else:
                return visitor.visitChildren(self)




    def exemplification(self):

        localctx = MizarParser.ExemplificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_exemplification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(MizarParser.T__90)
            self.state = 1117
            self.example()
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1118
                self.match(MizarParser.T__2)
                self.state = 1119
                self.example()
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1125
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_example

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExample" ):
                return visitor.visitExample(self)
            else:
                return visitor.visitChildren(self)




    def example(self):

        localctx = MizarParser.ExampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_example)
        try:
            self.state = 1132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1127
                self.term_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1128
                self.variable_identifier()
                self.state = 1129
                self.match(MizarParser.T__57)
                self.state = 1130
                self.term_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linkable_statement(self):
            return self.getTypedRuleContext(MizarParser.Linkable_statementContext,0)


        def diffuse_statement(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_statementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = MizarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__80:
                    self.state = 1134
                    self.match(MizarParser.T__80)


                self.state = 1137
                self.linkable_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.diffuse_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Linkable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def choice_statement(self):
            return self.getTypedRuleContext(MizarParser.Choice_statementContext,0)


        def type_changing_statement(self):
            return self.getTypedRuleContext(MizarParser.Type_changing_statementContext,0)


        def iterative_equality(self):
            return self.getTypedRuleContext(MizarParser.Iterative_equalityContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_linkable_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkable_statement" ):
                return visitor.visitLinkable_statement(self)
            else:
                return visitor.visitChildren(self)




    def linkable_statement(self):

        localctx = MizarParser.Linkable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_linkable_statement)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1141
                self.compact_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self.choice_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1143
                self.type_changing_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1144
                self.iterative_equality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compact_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_compact_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompact_statement" ):
                return visitor.visitCompact_statement(self)
            else:
                return visitor.visitChildren(self)




    def compact_statement(self):

        localctx = MizarParser.Compact_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_compact_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.proposition()
            self.state = 1148
            self.justification()
            self.state = 1149
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Choice_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_choice_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChoice_statement" ):
                return visitor.visitChoice_statement(self)
            else:
                return visitor.visitChildren(self)




    def choice_statement(self):

        localctx = MizarParser.Choice_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_choice_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(MizarParser.T__91)
            self.state = 1152
            self.qualified_variables()
            self.state = 1153
            self.match(MizarParser.T__21)
            self.state = 1154
            self.conditions()
            self.state = 1155
            self.simple_justification()
            self.state = 1156
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_changing_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_change_list(self):
            return self.getTypedRuleContext(MizarParser.Type_change_listContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_type_changing_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_changing_statement" ):
                return visitor.visitType_changing_statement(self)
            else:
                return visitor.visitChildren(self)




    def type_changing_statement(self):

        localctx = MizarParser.Type_changing_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_type_changing_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(MizarParser.T__92)
            self.state = 1159
            self.type_change_list()
            self.state = 1160
            self.match(MizarParser.T__93)
            self.state = 1161
            self.type_expression()
            self.state = 1162
            self.simple_justification()
            self.state = 1163
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_change_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Variable_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_change_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_change_list" ):
                return visitor.visitType_change_list(self)
            else:
                return visitor.visitChildren(self)




    def type_change_list(self):

        localctx = MizarParser.Type_change_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_type_change_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1165
                self.equating()
                pass

            elif la_ == 2:
                self.state = 1166
                self.variable_identifier()
                pass


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1169
                self.match(MizarParser.T__2)
                self.state = 1172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.equating()
                    pass

                elif la_ == 2:
                    self.state = 1171
                    self.variable_identifier()
                    pass


                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iterative_equalityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def simple_justification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Simple_justificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Simple_justificationContext,i)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_iterative_equality

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterative_equality" ):
                return visitor.visitIterative_equality(self)
            else:
                return visitor.visitChildren(self)




    def iterative_equality(self):

        localctx = MizarParser.Iterative_equalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_iterative_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1179
                self.label_identifier()
                self.state = 1180
                self.match(MizarParser.T__36)


            self.state = 1184
            self.term_expression(0)
            self.state = 1185
            self.match(MizarParser.T__57)
            self.state = 1186
            self.term_expression(0)
            self.state = 1187
            self.simple_justification()
            self.state = 1192 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1188
                self.match(MizarParser.T__94)
                self.state = 1189
                self.term_expression(0)
                self.state = 1190
                self.simple_justification()
                self.state = 1194 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__94):
                    break

            self.state = 1196
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Diffuse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuse_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiffuse_statement" ):
                return visitor.visitDiffuse_statement(self)
            else:
                return visitor.visitChildren(self)




    def diffuse_statement(self):

        localctx = MizarParser.Diffuse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_diffuse_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 1198
                self.label_identifier()
                self.state = 1199
                self.match(MizarParser.T__36)


            self.state = 1203
            self.match(MizarParser.T__95)
            self.state = 1204
            self.reasoning()
            self.state = 1205
            self.match(MizarParser.T__17)
            self.state = 1206
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def proof(self):
            return self.getTypedRuleContext(MizarParser.ProofContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_justification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJustification" ):
                return visitor.visitJustification(self)
            else:
                return visitor.visitChildren(self)




    def justification(self):

        localctx = MizarParser.JustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_justification)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__96, MizarParser.T__97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.simple_justification()
                pass
            elif token in [MizarParser.T__77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.proof()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def straightforward_justification(self):
            return self.getTypedRuleContext(MizarParser.Straightforward_justificationContext,0)


        def scheme_justification(self):
            return self.getTypedRuleContext(MizarParser.Scheme_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simple_justification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_justification" ):
                return visitor.visitSimple_justification(self)
            else:
                return visitor.visitChildren(self)




    def simple_justification(self):

        localctx = MizarParser.Simple_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_simple_justification)
        try:
            self.state = 1214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__94, MizarParser.T__96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.straightforward_justification()
                pass
            elif token in [MizarParser.T__97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.scheme_justification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProofContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proof

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProof" ):
                return visitor.visitProof(self)
            else:
                return visitor.visitChildren(self)




    def proof(self):

        localctx = MizarParser.ProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_proof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(MizarParser.T__77)
            self.state = 1217
            self.reasoning()
            self.state = 1218
            self.match(MizarParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Straightforward_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_straightforward_justification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStraightforward_justification" ):
                return visitor.visitStraightforward_justification(self)
            else:
                return visitor.visitChildren(self)




    def straightforward_justification(self):

        localctx = MizarParser.Straightforward_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_straightforward_justification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__96:
                self.state = 1220
                self.match(MizarParser.T__96)
                self.state = 1221
                self.references()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Scheme_referenceContext,0)


        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_justification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_justification" ):
                return visitor.visitScheme_justification(self)
            else:
                return visitor.visitChildren(self)




    def scheme_justification(self):

        localctx = MizarParser.Scheme_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_scheme_justification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(MizarParser.T__97)
            self.state = 1225
            self.scheme_reference()
            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__24:
                self.state = 1226
                self.match(MizarParser.T__24)
                self.state = 1227
                self.references()
                self.state = 1228
                self.match(MizarParser.T__25)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReferenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReferenceContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_references

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferences" ):
                return visitor.visitReferences(self)
            else:
                return visitor.visitChildren(self)




    def references(self):

        localctx = MizarParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.reference()
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1233
                self.match(MizarParser.T__2)
                self.state = 1234
                self.reference()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_reference(self):
            return self.getTypedRuleContext(MizarParser.Local_referenceContext,0)


        def library_reference(self):
            return self.getTypedRuleContext(MizarParser.Library_referenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference" ):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = MizarParser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reference)
        try:
            self.state = 1242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.local_reference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.library_reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Local_scheme_referenceContext,0)


        def library_scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Library_scheme_referenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_reference" ):
                return visitor.visitScheme_reference(self)
            else:
                return visitor.visitChildren(self)




    def scheme_reference(self):

        localctx = MizarParser.Scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_scheme_reference)
        try:
            self.state = 1246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.local_scheme_reference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.library_scheme_reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_local_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_reference" ):
                return visitor.visitLocal_reference(self)
            else:
                return visitor.visitChildren(self)




    def local_reference(self):

        localctx = MizarParser.Local_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_local_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.label_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_identifier(self):
            return self.getTypedRuleContext(MizarParser.Scheme_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_local_scheme_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_scheme_reference" ):
                return visitor.visitLocal_scheme_reference(self)
            else:
                return visitor.visitChildren(self)




    def local_scheme_reference(self):

        localctx = MizarParser.Local_scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_local_scheme_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.scheme_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self):
            return self.getTypedRuleContext(MizarParser.Article_nameContext,0)


        def theorem_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Theorem_numberContext)
            else:
                return self.getTypedRuleContext(MizarParser.Theorem_numberContext,i)


        def definition_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Definition_numberContext)
            else:
                return self.getTypedRuleContext(MizarParser.Definition_numberContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_library_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibrary_reference" ):
                return visitor.visitLibrary_reference(self)
            else:
                return visitor.visitChildren(self)




    def library_reference(self):

        localctx = MizarParser.Library_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_library_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.article_name()
            self.state = 1253
            self.match(MizarParser.T__36)
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.NUMERAL]:
                self.state = 1254
                self.theorem_number()
                pass
            elif token in [MizarParser.T__98]:
                self.state = 1255
                self.match(MizarParser.T__98)
                self.state = 1256
                self.definition_number()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1259
                    self.match(MizarParser.T__2)
                    self.state = 1263
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MizarParser.NUMERAL]:
                        self.state = 1260
                        self.theorem_number()
                        pass
                    elif token in [MizarParser.T__98]:
                        self.state = 1261
                        self.match(MizarParser.T__98)
                        self.state = 1262
                        self.definition_number()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self):
            return self.getTypedRuleContext(MizarParser.Article_nameContext,0)


        def scheme_number(self):
            return self.getTypedRuleContext(MizarParser.Scheme_numberContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_library_scheme_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibrary_scheme_reference" ):
                return visitor.visitLibrary_scheme_reference(self)
            else:
                return visitor.visitChildren(self)




    def library_scheme_reference(self):

        localctx = MizarParser.Library_scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_library_scheme_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.article_name()
            self.state = 1271
            self.match(MizarParser.T__36)
            self.state = 1272
            self.match(MizarParser.T__99)
            self.state = 1273
            self.scheme_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Theorem_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_theorem_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheorem_number" ):
                return visitor.visitTheorem_number(self)
            else:
                return visitor.visitChildren(self)




    def theorem_number(self):

        localctx = MizarParser.Theorem_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_theorem_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definition_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_definition_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinition_number" ):
                return visitor.visitDefinition_number(self)
            else:
                return visitor.visitChildren(self)




    def definition_number(self):

        localctx = MizarParser.Definition_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_definition_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_scheme_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScheme_number" ):
                return visitor.visitScheme_number(self)
            else:
                return visitor.visitChildren(self)




    def scheme_number(self):

        localctx = MizarParser.Scheme_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_scheme_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PropositionContext)
            else:
                return self.getTypedRuleContext(MizarParser.PropositionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_conditions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditions" ):
                return visitor.visitConditions(self)
            else:
                return visitor.visitChildren(self)




    def conditions(self):

        localctx = MizarParser.ConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MizarParser.T__100)
            self.state = 1282
            self.proposition()
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__76:
                self.state = 1283
                self.match(MizarParser.T__76)
                self.state = 1284
                self.proposition()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proposition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProposition" ):
                return visitor.visitProposition(self)
            else:
                return visitor.visitChildren(self)




    def proposition(self):

        localctx = MizarParser.PropositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_proposition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1290
                self.label_identifier()
                self.state = 1291
                self.match(MizarParser.T__36)


            self.state = 1295
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SentenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_sentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSentence" ):
                return visitor.visitSentence(self)
            else:
                return visitor.visitChildren(self)




    def sentence(self):

        localctx = MizarParser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_sentence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.formula_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Formula_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Formula_expressionContext,i)


        def atomic_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Atomic_formula_expressionContext,0)


        def quantified_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Quantified_formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_formula_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormula_expression" ):
                return visitor.visitFormula_expression(self)
            else:
                return visitor.visitChildren(self)



    def formula_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.Formula_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_formula_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1300
                self.match(MizarParser.T__24)
                self.state = 1301
                self.formula_expression(0)
                self.state = 1302
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.state = 1304
                self.atomic_formula_expression()
                pass

            elif la_ == 3:
                self.state = 1305
                self.quantified_formula_expression()
                pass

            elif la_ == 4:
                self.state = 1306
                self.match(MizarParser.T__106)
                self.state = 1307
                self.formula_expression(3)
                pass

            elif la_ == 5:
                self.state = 1308
                self.match(MizarParser.T__107)
                pass

            elif la_ == 6:
                self.state = 1309
                self.match(MizarParser.T__108)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1312
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1313
                        self.match(MizarParser.T__101)
                        self.state = 1314
                        self.formula_expression(10)
                        pass

                    elif la_ == 2:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1315
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1316
                        self.match(MizarParser.T__101)
                        self.state = 1317
                        self.match(MizarParser.T__102)
                        self.state = 1318
                        self.match(MizarParser.T__101)
                        self.state = 1319
                        self.formula_expression(9)
                        pass

                    elif la_ == 3:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1320
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1321
                        self.match(MizarParser.T__103)
                        self.state = 1322
                        self.formula_expression(8)
                        pass

                    elif la_ == 4:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1323
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1324
                        self.match(MizarParser.T__103)
                        self.state = 1325
                        self.match(MizarParser.T__102)
                        self.state = 1326
                        self.match(MizarParser.T__103)
                        self.state = 1327
                        self.formula_expression(7)
                        pass

                    elif la_ == 5:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1328
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1329
                        self.match(MizarParser.T__104)
                        self.state = 1330
                        self.formula_expression(6)
                        pass

                    elif la_ == 6:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1331
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1332
                        self.match(MizarParser.T__105)
                        self.state = 1333
                        self.formula_expression(5)
                        pass

             
                self.state = 1338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atomic_formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_symbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_symbolContext,i)


        def term_expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expression_listContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expression_listContext,i)


        def predicate_identifier(self):
            return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_atomic_formula_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_formula_expression" ):
                return visitor.visitAtomic_formula_expression(self)
            else:
                return visitor.visitChildren(self)




    def atomic_formula_expression(self):

        localctx = MizarParser.Atomic_formula_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_atomic_formula_expression)
        self._la = 0 # Token type
        try:
            self.state = 1380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                    self.state = 1339
                    self.term_expression_list()


                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__109 or _la==MizarParser.T__110:
                    self.state = 1342
                    _la = self._input.LA(1)
                    if not(_la==MizarParser.T__109 or _la==MizarParser.T__110):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1343
                    self.match(MizarParser.T__106)


                self.state = 1346
                self.predicate_symbol()
                self.state = 1348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1347
                    self.term_expression_list()


                self.state = 1359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MizarParser.T__109 or _la==MizarParser.T__110:
                            self.state = 1350
                            _la = self._input.LA(1)
                            if not(_la==MizarParser.T__109 or _la==MizarParser.T__110):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1351
                            self.match(MizarParser.T__106)


                        self.state = 1354
                        self.predicate_symbol()
                        self.state = 1355
                        self.term_expression_list() 
                    self.state = 1361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.predicate_identifier()
                self.state = 1363
                self.match(MizarParser.T__47)
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                    self.state = 1364
                    self.term_expression_list()


                self.state = 1367
                self.match(MizarParser.T__49)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self.term_expression(0)
                self.state = 1370
                self.match(MizarParser.T__32)
                self.state = 1372 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1371
                        self.adjective()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1374 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1376
                self.term_expression(0)
                self.state = 1377
                self.match(MizarParser.T__32)
                self.state = 1378
                self.type_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def formula_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Formula_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Formula_expressionContext,i)


        def quantified_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Quantified_formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_quantified_formula_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_formula_expression" ):
                return visitor.visitQuantified_formula_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_formula_expression(self):

        localctx = MizarParser.Quantified_formula_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_quantified_formula_expression)
        self._la = 0 # Token type
        try:
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1382
                self.match(MizarParser.T__15)
                self.state = 1383
                self.qualified_variables()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__111:
                    self.state = 1384
                    self.match(MizarParser.T__111)
                    self.state = 1385
                    self.formula_expression(0)


                self.state = 1391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__112]:
                    self.state = 1388
                    self.match(MizarParser.T__112)
                    self.state = 1389
                    self.formula_expression(0)
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__113]:
                    self.state = 1390
                    self.quantified_formula_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MizarParser.T__113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                self.match(MizarParser.T__113)
                self.state = 1394
                self.qualified_variables()
                self.state = 1395
                self.match(MizarParser.T__111)
                self.state = 1396
                self.formula_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitly_qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Implicitly_qualified_variablesContext,0)


        def explicitly_qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Explicitly_qualified_variablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualified_variables

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_variables" ):
                return visitor.visitQualified_variables(self)
            else:
                return visitor.visitChildren(self)




    def qualified_variables(self):

        localctx = MizarParser.Qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_qualified_variables)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1400
                self.implicitly_qualified_variables()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1401
                self.explicitly_qualified_variables()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1402
                self.explicitly_qualified_variables()
                self.state = 1403
                self.match(MizarParser.T__2)
                self.state = 1404
                self.implicitly_qualified_variables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicitly_qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_implicitly_qualified_variables

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplicitly_qualified_variables" ):
                return visitor.visitImplicitly_qualified_variables(self)
            else:
                return visitor.visitChildren(self)




    def implicitly_qualified_variables(self):

        localctx = MizarParser.Implicitly_qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_implicitly_qualified_variables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.variables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicitly_qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Qualified_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Qualified_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_explicitly_qualified_variables

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitly_qualified_variables" ):
                return visitor.visitExplicitly_qualified_variables(self)
            else:
                return visitor.visitChildren(self)




    def explicitly_qualified_variables(self):

        localctx = MizarParser.Explicitly_qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_explicitly_qualified_variables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.qualified_segment()
            self.state = 1415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1411
                    self.match(MizarParser.T__2)
                    self.state = 1412
                    self.qualified_segment() 
                self.state = 1417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def qualification(self):
            return self.getTypedRuleContext(MizarParser.QualificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualified_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_segment" ):
                return visitor.visitQualified_segment(self)
            else:
                return visitor.visitChildren(self)




    def qualified_segment(self):

        localctx = MizarParser.Qualified_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_qualified_segment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.variables()
            self.state = 1419
            self.qualification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Variable_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_variables

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariables" ):
                return visitor.visitVariables(self)
            else:
                return visitor.visitChildren(self)




    def variables(self):

        localctx = MizarParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.variable_identifier()
            self.state = 1426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1422
                self.match(MizarParser.T__2)
                self.state = 1423
                self.variable_identifier()
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualification" ):
                return visitor.visitQualification(self)
            else:
                return visitor.visitChildren(self)




    def qualification(self):

        localctx = MizarParser.QualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_qualification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__114 or _la==MizarParser.T__115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1430
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def radix_type(self):
            return self.getTypedRuleContext(MizarParser.Radix_typeContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_expression" ):
                return visitor.visitType_expression(self)
            else:
                return visitor.visitChildren(self)




    def type_expression(self):

        localctx = MizarParser.Type_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_type_expression)
        try:
            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.match(MizarParser.T__24)
                self.state = 1433
                self.radix_type()
                self.state = 1434
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1436
                        self.adjective()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1439 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 1441
                self.type_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1443
                self.radix_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_type_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structure_type_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructure_type_expression" ):
                return visitor.visitStructure_type_expression(self)
            else:
                return visitor.visitChildren(self)




    def structure_type_expression(self):

        localctx = MizarParser.Structure_type_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_structure_type_expression)
        self._la = 0 # Token type
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(MizarParser.T__24)
                self.state = 1447
                self.structure_symbol()
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__26:
                    self.state = 1448
                    self.match(MizarParser.T__26)
                    self.state = 1449
                    self.term_expression_list()


                self.state = 1452
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1454
                self.adjective_cluster()
                self.state = 1455
                self.structure_symbol()
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__26:
                    self.state = 1456
                    self.match(MizarParser.T__26)
                    self.state = 1457
                    self.term_expression_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Radix_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_symbol(self):
            return self.getTypedRuleContext(MizarParser.Mode_symbolContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_radix_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRadix_type" ):
                return visitor.visitRadix_type(self)
            else:
                return visitor.visitChildren(self)




    def radix_type(self):

        localctx = MizarParser.Radix_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_radix_type)
        try:
            self.state = 1472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__34, MizarParser.MODE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.mode_symbol()
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.match(MizarParser.T__33)
                    self.state = 1464
                    self.term_expression_list()


                pass
            elif token in [MizarParser.STRUCTURE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.structure_symbol()
                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.match(MizarParser.T__26)
                    self.state = 1469
                    self.term_expression_list()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Type_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Type_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_expression_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_expression_list" ):
                return visitor.visitType_expression_list(self)
            else:
                return visitor.visitChildren(self)




    def type_expression_list(self):

        localctx = MizarParser.Type_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_type_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.type_expression()
            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1475
                self.match(MizarParser.T__2)
                self.state = 1476
                self.type_expression()
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Term_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def functor_symbol(self):
            return self.getTypedRuleContext(MizarParser.Functor_symbolContext,0)


        def arguments(self):
            return self.getTypedRuleContext(MizarParser.ArgumentsContext,0)


        def left_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Left_functor_bracketContext,0)


        def right_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Right_functor_bracketContext,0)


        def functor_identifier(self):
            return self.getTypedRuleContext(MizarParser.Functor_identifierContext,0)


        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def postqualification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PostqualificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.PostqualificationContext,i)


        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def selector_symbol(self):
            return self.getTypedRuleContext(MizarParser.Selector_symbolContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def private_definition_parameter(self):
            return self.getTypedRuleContext(MizarParser.Private_definition_parameterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_term_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_expression" ):
                return visitor.visitTerm_expression(self)
            else:
                return visitor.visitChildren(self)



    def term_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.Term_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 312
        self.enterRecursionRule(localctx, 312, self.RULE_term_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1483
                self.match(MizarParser.T__24)
                self.state = 1484
                self.term_expression(0)
                self.state = 1485
                self.match(MizarParser.T__25)
                pass

            elif la_ == 2:
                self.state = 1487
                self.match(MizarParser.T__24)
                self.state = 1488
                self.term_expression_list()
                self.state = 1489
                self.match(MizarParser.T__25)
                self.state = 1490
                self.functor_symbol()
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.arguments()


                pass

            elif la_ == 3:
                self.state = 1494
                self.functor_symbol()
                self.state = 1496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1495
                    self.arguments()


                pass

            elif la_ == 4:
                self.state = 1498
                self.left_functor_bracket()
                self.state = 1499
                self.term_expression_list()
                self.state = 1500
                self.right_functor_bracket()
                pass

            elif la_ == 5:
                self.state = 1502
                self.functor_identifier()
                self.state = 1503
                self.match(MizarParser.T__24)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__24) | (1 << MizarParser.T__46) | (1 << MizarParser.T__47))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (MizarParser.T__116 - 117)) | (1 << (MizarParser.T__119 - 117)) | (1 << (MizarParser.T__122 - 117)) | (1 << (MizarParser.T__123 - 117)) | (1 << (MizarParser.T__124 - 117)) | (1 << (MizarParser.T__125 - 117)) | (1 << (MizarParser.T__126 - 117)) | (1 << (MizarParser.T__127 - 117)) | (1 << (MizarParser.T__128 - 117)) | (1 << (MizarParser.T__129 - 117)) | (1 << (MizarParser.T__130 - 117)) | (1 << (MizarParser.T__131 - 117)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 117)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 117)) | (1 << (MizarParser.IDENTIFIER - 117)) | (1 << (MizarParser.NUMERAL - 117)))) != 0):
                    self.state = 1504
                    self.term_expression_list()


                self.state = 1507
                self.match(MizarParser.T__25)
                pass

            elif la_ == 6:
                self.state = 1509
                self.structure_symbol()
                self.state = 1510
                self.match(MizarParser.T__27)
                self.state = 1511
                self.term_expression_list()
                self.state = 1512
                self.match(MizarParser.T__28)
                pass

            elif la_ == 7:
                self.state = 1514
                self.match(MizarParser.T__116)
                self.state = 1515
                self.structure_symbol()
                self.state = 1516
                self.match(MizarParser.T__33)
                self.state = 1517
                self.term_expression(11)
                pass

            elif la_ == 8:
                self.state = 1519
                self.variable_identifier()
                pass

            elif la_ == 9:
                self.state = 1520
                self.match(MizarParser.T__46)
                self.state = 1521
                self.term_expression(0)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__120:
                    self.state = 1522
                    self.postqualification()
                    self.state = 1527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1528
                self.match(MizarParser.T__36)
                self.state = 1529
                self.sentence()
                self.state = 1530
                self.match(MizarParser.T__48)
                pass

            elif la_ == 10:
                self.state = 1532
                self.match(MizarParser.T__116)
                self.state = 1533
                self.match(MizarParser.T__34)
                self.state = 1534
                self.match(MizarParser.T__33)
                self.state = 1535
                self.match(MizarParser.T__117)
                self.state = 1536
                self.term_expression(0)
                self.state = 1540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1537
                        self.postqualification() 
                    self.state = 1542
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                pass

            elif la_ == 11:
                self.state = 1543
                self.match(MizarParser.NUMERAL)
                pass

            elif la_ == 12:
                self.state = 1544
                self.match(MizarParser.T__116)
                self.state = 1545
                self.selector_symbol()
                self.state = 1546
                self.match(MizarParser.T__33)
                self.state = 1547
                self.term_expression(5)
                pass

            elif la_ == 13:
                self.state = 1549
                self.match(MizarParser.T__116)
                self.state = 1550
                self.selector_symbol()
                pass

            elif la_ == 14:
                self.state = 1551
                self.match(MizarParser.T__116)
                self.state = 1552
                self.type_expression()
                pass

            elif la_ == 15:
                self.state = 1553
                self.private_definition_parameter()
                pass

            elif la_ == 16:
                self.state = 1554
                self.match(MizarParser.T__119)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1565
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        localctx = MizarParser.Term_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term_expression)
                        self.state = 1557
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1558
                        self.functor_symbol()
                        self.state = 1560
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                        if la_ == 1:
                            self.state = 1559
                            self.arguments()


                        pass

                    elif la_ == 2:
                        localctx = MizarParser.Term_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term_expression)
                        self.state = 1562
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1563
                        self.match(MizarParser.T__118)
                        self.state = 1564
                        self.type_expression()
                        pass

             
                self.state = 1569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = MizarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_arguments)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.term_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1571
                self.match(MizarParser.T__24)
                self.state = 1572
                self.term_expression_list()
                self.state = 1573
                self.match(MizarParser.T__25)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Adjective_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdjective_arguments" ):
                return visitor.visitAdjective_arguments(self)
            else:
                return visitor.visitChildren(self)




    def adjective_arguments(self):

        localctx = MizarParser.Adjective_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_adjective_arguments)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.term_expression_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self.match(MizarParser.T__24)
                self.state = 1579
                self.term_expression_list()
                self.state = 1580
                self.match(MizarParser.T__25)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Term_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_term_expression_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_expression_list" ):
                return visitor.visitTerm_expression_list(self)
            else:
                return visitor.visitChildren(self)




    def term_expression_list(self):

        localctx = MizarParser.Term_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_term_expression_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.term_expression(0)
            self.state = 1589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1585
                    self.match(MizarParser.T__2)
                    self.state = 1586
                    self.term_expression(0) 
                self.state = 1591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostqualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualifying_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Postqualifying_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Postqualifying_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostqualification" ):
                return visitor.visitPostqualification(self)
            else:
                return visitor.visitChildren(self)




    def postqualification(self):

        localctx = MizarParser.PostqualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_postqualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(MizarParser.T__120)
            self.state = 1593
            self.postqualifying_segment()
            self.state = 1598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1594
                    self.match(MizarParser.T__2)
                    self.state = 1595
                    self.postqualifying_segment() 
                self.state = 1600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postqualifying_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualified_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Postqualified_variableContext)
            else:
                return self.getTypedRuleContext(MizarParser.Postqualified_variableContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualifying_segment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostqualifying_segment" ):
                return visitor.visitPostqualifying_segment(self)
            else:
                return visitor.visitChildren(self)




    def postqualifying_segment(self):

        localctx = MizarParser.Postqualifying_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_postqualifying_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.postqualified_variable()
            self.state = 1606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1602
                    self.match(MizarParser.T__2)
                    self.state = 1603
                    self.postqualified_variable() 
                self.state = 1608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1609
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__32 or _la==MizarParser.T__121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1610
                self.type_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postqualified_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_postqualified_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostqualified_variable" ):
                return visitor.visitPostqualified_variable(self)
            else:
                return visitor.visitChildren(self)




    def postqualified_variable(self):

        localctx = MizarParser.Postqualified_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_postqualified_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_definition_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MizarParser.RULE_private_definition_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_definition_parameter" ):
                return visitor.visitPrivate_definition_parameter(self)
            else:
                return visitor.visitChildren(self)




    def private_definition_parameter(self):

        localctx = MizarParser.Private_definition_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_private_definition_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            _la = self._input.LA(1)
            if not(((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & ((1 << (MizarParser.T__122 - 123)) | (1 << (MizarParser.T__123 - 123)) | (1 << (MizarParser.T__124 - 123)) | (1 << (MizarParser.T__125 - 123)) | (1 << (MizarParser.T__126 - 123)) | (1 << (MizarParser.T__127 - 123)) | (1 << (MizarParser.T__128 - 123)) | (1 << (MizarParser.T__129 - 123)) | (1 << (MizarParser.T__130 - 123)) | (1 << (MizarParser.T__131 - 123)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[143] = self.formula_expression_sempred
        self._predicates[156] = self.term_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def formula_expression_sempred(self, localctx:Formula_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def term_expression_sempred(self, localctx:Term_expressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         




