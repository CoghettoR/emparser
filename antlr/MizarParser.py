# Generated from c:\dev\mimosa\amparser\antlr\Mizar.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0093")
        buf.write("\u0652\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\3\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\5\4\u0156\n\4\3\5\3\5\3")
        buf.write("\5\3\5\7\5\u015c\n\5\f\5\16\5\u015f\13\5\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\7\7\7\u0169\n\7\f\7\16\7\u016c\13\7\3")
        buf.write("\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u0176\n\t\f\t\16\t")
        buf.write("\u0179\13\t\3\t\3\t\3\n\3\n\3\13\6\13\u0180\n\13\r\13")
        buf.write("\16\13\u0181\3\f\3\f\7\f\u0186\n\f\f\f\16\f\u0189\13\f")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0192\n\r\3\16\3\16\3")
        buf.write("\16\3\16\7\16\u0198\n\16\f\16\16\16\u019b\13\16\3\16\3")
        buf.write("\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\7\25\u01b6\n\25\f\25\16\25\u01b9\13\25\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u01c4\n")
        buf.write("\26\f\26\16\26\u01c7\13\26\3\26\3\26\3\27\3\27\3\27\7")
        buf.write("\27\u01ce\n\27\f\27\16\27\u01d1\13\27\3\27\3\27\3\30\3")
        buf.write("\30\3\30\5\30\u01d8\n\30\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u01e0\n\31\3\32\3\32\3\32\3\32\5\32\u01e6\n\32\3")
        buf.write("\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34\3\34\5\34\u01f1")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u01f8\n\35\3\36\3")
        buf.write("\36\3\36\3\36\3\36\5\36\u01ff\n\36\3\36\3\36\3\36\5\36")
        buf.write("\u0204\n\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\7")
        buf.write("\37\u020e\n\37\f\37\16\37\u0211\13\37\3 \3 \3!\3!\3!\7")
        buf.write("!\u0218\n!\f!\16!\u021b\13!\3\"\3\"\3\"\7\"\u0220\n\"")
        buf.write("\f\"\16\"\u0223\13\"\3#\3#\3$\3$\3%\3%\3%\7%\u022c\n%")
        buf.write("\f%\16%\u022f\13%\3%\3%\3&\3&\3\'\3\'\3\'\3(\3(\3(\5(")
        buf.write("\u023b\n(\3(\3(\5(\u023f\n(\3(\3(\3(\3(\3(\3(\5(\u0247")
        buf.write("\n(\3(\7(\u024a\n(\f(\16(\u024d\13(\3)\3)\3)\5)\u0252")
        buf.write("\n)\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\5,\u025e\n,\3-\3-\3")
        buf.write("-\3-\5-\u0264\n-\3-\3-\5-\u0268\n-\3.\3.\3/\3/\3/\3/\5")
        buf.write("/\u0270\n/\3/\3/\3/\3/\5/\u0276\n/\5/\u0278\n/\3\60\3")
        buf.write("\60\3\60\7\60\u027d\n\60\f\60\16\60\u0280\13\60\3\61\3")
        buf.write("\61\5\61\u0284\n\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\5\63\u0290\n\63\3\63\3\63\5\63\u0294\n")
        buf.write("\63\3\63\3\63\3\63\7\63\u0299\n\63\f\63\16\63\u029c\13")
        buf.write("\63\3\64\5\64\u029f\n\64\3\64\3\64\5\64\u02a3\n\64\3\64")
        buf.write("\3\64\3\64\3\64\5\64\u02a9\n\64\3\65\3\65\3\65\3\65\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u02ba\n\67\38\38\39\39\3:\3:\3;\3;\3;\3;\5;\u02c6")
        buf.write("\n;\3;\3;\3;\7;\u02cb\n;\f;\16;\u02ce\13;\3<\5<\u02d1")
        buf.write("\n<\3<\3<\5<\u02d5\n<\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3")
        buf.write("?\3?\3?\3?\3?\3?\3@\3@\3A\3A\3A\3A\3A\3A\3A\3B\3B\3B\5")
        buf.write("B\u02f3\nB\3B\3B\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3")
        buf.write("E\3E\3F\3F\3F\3F\3F\5F\u030a\nF\3G\3G\3G\5G\u030f\nG\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3I\7I\u0319\nI\fI\16I\u031c\13I\3")
        buf.write("J\5J\u031f\nJ\3J\5J\u0322\nJ\3J\3J\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3L\3L\3L\3L\3L\3L\5L\u0335\nL\3L\3L\3L\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0347\nM\fM\16M\u034a")
        buf.write("\13M\5M\u034c\nM\3M\3M\3M\3N\3N\3N\3N\3N\3N\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3P\7P\u035f\nP\fP\16P\u0362\13P\3P\3P\3P\3")
        buf.write("P\5P\u0368\nP\3Q\3Q\3Q\3Q\3R\3R\3R\3S\3S\3S\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\7T\u037f\nT\fT\16T\u0382\13T\5")
        buf.write("T\u0384\nT\3T\3T\3T\3T\3U\3U\3V\3V\3V\7V\u038f\nV\fV\16")
        buf.write("V\u0392\13V\3W\3W\3X\3X\3Y\3Y\5Y\u039a\nY\3Z\3Z\3Z\7Z")
        buf.write("\u039f\nZ\fZ\16Z\u03a2\13Z\3Z\3Z\5Z\u03a6\nZ\3Z\3Z\3[")
        buf.write("\3[\3\\\3\\\3\\\7\\\u03af\n\\\f\\\16\\\u03b2\13\\\3\\")
        buf.write("\3\\\5\\\u03b6\n\\\3\\\3\\\3\\\3]\3]\3^\3^\5^\u03bf\n")
        buf.write("^\3_\3_\3_\5_\u03c4\n_\3`\3`\3`\3`\3a\3a\3a\7a\u03cd\n")
        buf.write("a\fa\16a\u03d0\13a\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3d\3")
        buf.write("d\3d\3d\3d\3d\3e\3e\3e\5e\u03e5\ne\3e\3e\3f\3f\3f\5f\u03ec")
        buf.write("\nf\3f\3f\3g\7g\u03f1\ng\fg\16g\u03f4\13g\3g\5g\u03f7")
        buf.write("\ng\3g\3g\3g\3g\3g\3g\5g\u03ff\ng\5g\u0401\ng\3h\6h\u0404")
        buf.write("\nh\rh\16h\u0405\3i\3i\3i\5i\u040b\ni\3i\3i\3i\3i\3i\3")
        buf.write("j\6j\u0413\nj\rj\16j\u0414\3k\3k\3k\5k\u041a\nk\3k\3k")
        buf.write("\3k\3k\3k\3l\3l\5l\u0423\nl\3m\3m\3m\3m\5m\u0429\nm\3")
        buf.write("n\3n\3n\3n\5n\u042f\nn\3n\3n\3o\3o\3o\5o\u0436\no\3p\3")
        buf.write("p\3p\3p\3q\3q\3q\3q\3r\3r\3r\3r\5r\u0444\nr\3r\3r\3s\3")
        buf.write("s\3s\5s\u044b\ns\3s\5s\u044e\ns\3t\3t\3t\3t\3t\3t\3t\5")
        buf.write("t\u0457\nt\3u\3u\3u\3u\7u\u045d\nu\fu\16u\u0460\13u\3")
        buf.write("u\3u\3v\3v\3v\3v\3v\5v\u0469\nv\3w\5w\u046c\nw\3w\3w\5")
        buf.write("w\u0470\nw\3x\3x\3x\3x\5x\u0476\nx\3y\3y\3y\3y\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3{\3{\3|\3|\5|\u048c\n|\3")
        buf.write("|\3|\3|\5|\u0491\n|\7|\u0493\n|\f|\16|\u0496\13|\3}\3")
        buf.write("}\3}\5}\u049b\n}\3}\3}\3}\3}\3}\3}\3}\3}\6}\u04a5\n}\r")
        buf.write("}\16}\u04a6\3}\3}\3~\3~\3~\5~\u04ae\n~\3~\3~\3~\3~\3~")
        buf.write("\3\177\3\177\5\177\u04b7\n\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u04bb\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\5\u0082\u04c3\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\5\u0083\u04cb\n\u0083\3\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u04d0\n\u0084\f\u0084\16\u0084")
        buf.write("\u04d3\13\u0084\3\u0085\3\u0085\5\u0085\u04d7\n\u0085")
        buf.write("\3\u0086\3\u0086\5\u0086\u04db\n\u0086\3\u0087\3\u0087")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u04e6\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u04ec\n\u0089\7\u0089\u04ee\n\u0089\f\u0089\16")
        buf.write("\u0089\u04f1\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u0502\n\u008e")
        buf.write("\f\u008e\16\u008e\u0505\13\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u050a\n\u008f\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u051b\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\7\u0091\u0533\n\u0091\f\u0091\16\u0091\u0536")
        buf.write("\13\u0091\3\u0092\5\u0092\u0539\n\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u053d\n\u0092\3\u0092\3\u0092\5\u0092\u0541\n")
        buf.write("\u0092\3\u0092\3\u0092\5\u0092\u0545\n\u0092\3\u0092\3")
        buf.write("\u0092\3\u0092\7\u0092\u054a\n\u0092\f\u0092\16\u0092")
        buf.write("\u054d\13\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0552")
        buf.write("\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092")
        buf.write("\u0559\n\u0092\r\u0092\16\u0092\u055a\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\5\u0092\u0561\n\u0092\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0567\n\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\5\u0093\u056c\n\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0573\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u057b\n\u0094")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u0582")
        buf.write("\n\u0096\f\u0096\16\u0096\u0585\13\u0096\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0098\3\u0098\3\u0098\7\u0098\u058d\n\u0098")
        buf.write("\f\u0098\16\u0098\u0590\13\u0098\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\6\u009a\u059a")
        buf.write("\n\u009a\r\u009a\16\u009a\u059b\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u05a1\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\5\u009b\u05a7\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u05af\n\u009b\5\u009b\u05b1\n")
        buf.write("\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u05b6\n\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\5\u009c\u05bb\n\u009c\5\u009c\u05bd")
        buf.write("\n\u009c\3\u009d\3\u009d\3\u009d\7\u009d\u05c2\n\u009d")
        buf.write("\f\u009d\16\u009d\u05c5\13\u009d\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u05ce\n\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\5\u009e\u05d3\n\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u05d7\n\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u05e0\n\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\7\u009e\u05f2\n\u009e\f\u009e\16\u009e")
        buf.write("\u05f5\13\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0601")
        buf.write("\n\u009e\f\u009e\16\u009e\u0604\13\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\5\u009e\u0612\n\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0617\n\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\7\u009e\u061c\n\u009e\f\u009e\16\u009e\u061f")
        buf.write("\13\u009e\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0628\n\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\5\u00a1\u062f\n\u00a1\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\7\u00a2\u0634\n\u00a2\f\u00a2\16\u00a2\u0637")
        buf.write("\13\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u063d")
        buf.write("\n\u00a3\f\u00a3\16\u00a3\u0640\13\u00a3\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\7\u00a4\u0645\n\u00a4\f\u00a4\16\u00a4\u0648")
        buf.write("\13\u00a4\3\u00a4\3\u00a4\5\u00a4\u064c\n\u00a4\3\u00a5")
        buf.write("\3\u00a5\3\u00a6\3\u00a6\3\u00a6\2\4\u0120\u013a\u00a7")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\2\21\3\2\7\16\4\2&&\u008a\u008a\4\2##--\3\2.\61")
        buf.write("\4\2\62\63\u008e\u008e\4\2\64\65\u008f\u008f\3\2\67;\4")
        buf.write("\2==\u0088\u0088\3\2GL\4\2\6\6QQ\3\2[\\\3\2qr\3\2vw\4")
        buf.write("\2$$}}\3\2~\u0087\2\u067c\2\u014c\3\2\2\2\4\u014f\3\2")
        buf.write("\2\2\6\u0155\3\2\2\2\b\u0157\3\2\2\2\n\u0162\3\2\2\2\f")
        buf.write("\u0164\3\2\2\2\16\u016f\3\2\2\2\20\u0171\3\2\2\2\22\u017c")
        buf.write("\3\2\2\2\24\u017f\3\2\2\2\26\u0183\3\2\2\2\30\u0191\3")
        buf.write("\2\2\2\32\u0193\3\2\2\2\34\u019e\3\2\2\2\36\u01a2\3\2")
        buf.write("\2\2 \u01a6\3\2\2\2\"\u01a8\3\2\2\2$\u01ab\3\2\2\2&\u01ae")
        buf.write("\3\2\2\2(\u01b1\3\2\2\2*\u01bc\3\2\2\2,\u01ca\3\2\2\2")
        buf.write(".\u01d7\3\2\2\2\60\u01df\3\2\2\2\62\u01e1\3\2\2\2\64\u01e9")
        buf.write("\3\2\2\2\66\u01f0\3\2\2\28\u01f2\3\2\2\2:\u01f9\3\2\2")
        buf.write("\2<\u020a\3\2\2\2>\u0212\3\2\2\2@\u0214\3\2\2\2B\u021c")
        buf.write("\3\2\2\2D\u0224\3\2\2\2F\u0226\3\2\2\2H\u0228\3\2\2\2")
        buf.write("J\u0232\3\2\2\2L\u0234\3\2\2\2N\u0237\3\2\2\2P\u024e\3")
        buf.write("\2\2\2R\u0253\3\2\2\2T\u0255\3\2\2\2V\u025d\3\2\2\2X\u0263")
        buf.write("\3\2\2\2Z\u0269\3\2\2\2\\\u026f\3\2\2\2^\u0279\3\2\2\2")
        buf.write("`\u0283\3\2\2\2b\u0288\3\2\2\2d\u028c\3\2\2\2f\u02a8\3")
        buf.write("\2\2\2h\u02aa\3\2\2\2j\u02ae\3\2\2\2l\u02b9\3\2\2\2n\u02bb")
        buf.write("\3\2\2\2p\u02bd\3\2\2\2r\u02bf\3\2\2\2t\u02c1\3\2\2\2")
        buf.write("v\u02d0\3\2\2\2x\u02d6\3\2\2\2z\u02da\3\2\2\2|\u02e0\3")
        buf.write("\2\2\2~\u02e6\3\2\2\2\u0080\u02e8\3\2\2\2\u0082\u02ef")
        buf.write("\3\2\2\2\u0084\u02f6\3\2\2\2\u0086\u02fc\3\2\2\2\u0088")
        buf.write("\u0302\3\2\2\2\u008a\u0309\3\2\2\2\u008c\u030e\3\2\2\2")
        buf.write("\u008e\u0310\3\2\2\2\u0090\u031a\3\2\2\2\u0092\u031e\3")
        buf.write("\2\2\2\u0094\u0325\3\2\2\2\u0096\u032e\3\2\2\2\u0098\u0339")
        buf.write("\3\2\2\2\u009a\u0350\3\2\2\2\u009c\u0356\3\2\2\2\u009e")
        buf.write("\u0360\3\2\2\2\u00a0\u0369\3\2\2\2\u00a2\u036d\3\2\2\2")
        buf.write("\u00a4\u0370\3\2\2\2\u00a6\u0373\3\2\2\2\u00a8\u0389\3")
        buf.write("\2\2\2\u00aa\u038b\3\2\2\2\u00ac\u0393\3\2\2\2\u00ae\u0395")
        buf.write("\3\2\2\2\u00b0\u0399\3\2\2\2\u00b2\u039b\3\2\2\2\u00b4")
        buf.write("\u03a9\3\2\2\2\u00b6\u03ab\3\2\2\2\u00b8\u03ba\3\2\2\2")
        buf.write("\u00ba\u03be\3\2\2\2\u00bc\u03c3\3\2\2\2\u00be\u03c5\3")
        buf.write("\2\2\2\u00c0\u03c9\3\2\2\2\u00c2\u03d1\3\2\2\2\u00c4\u03d5")
        buf.write("\3\2\2\2\u00c6\u03db\3\2\2\2\u00c8\u03e1\3\2\2\2\u00ca")
        buf.write("\u03e8\3\2\2\2\u00cc\u03f2\3\2\2\2\u00ce\u0403\3\2\2\2")
        buf.write("\u00d0\u0407\3\2\2\2\u00d2\u0412\3\2\2\2\u00d4\u0416\3")
        buf.write("\2\2\2\u00d6\u0422\3\2\2\2\u00d8\u0428\3\2\2\2\u00da\u042a")
        buf.write("\3\2\2\2\u00dc\u0435\3\2\2\2\u00de\u0437\3\2\2\2\u00e0")
        buf.write("\u043b\3\2\2\2\u00e2\u043f\3\2\2\2\u00e4\u044d\3\2\2\2")
        buf.write("\u00e6\u0456\3\2\2\2\u00e8\u0458\3\2\2\2\u00ea\u0468\3")
        buf.write("\2\2\2\u00ec\u046f\3\2\2\2\u00ee\u0475\3\2\2\2\u00f0\u0477")
        buf.write("\3\2\2\2\u00f2\u047b\3\2\2\2\u00f4\u0482\3\2\2\2\u00f6")
        buf.write("\u048b\3\2\2\2\u00f8\u049a\3\2\2\2\u00fa\u04ad\3\2\2\2")
        buf.write("\u00fc\u04b6\3\2\2\2\u00fe\u04ba\3\2\2\2\u0100\u04bc\3")
        buf.write("\2\2\2\u0102\u04c2\3\2\2\2\u0104\u04c4\3\2\2\2\u0106\u04cc")
        buf.write("\3\2\2\2\u0108\u04d6\3\2\2\2\u010a\u04da\3\2\2\2\u010c")
        buf.write("\u04dc\3\2\2\2\u010e\u04de\3\2\2\2\u0110\u04e0\3\2\2\2")
        buf.write("\u0112\u04f2\3\2\2\2\u0114\u04f7\3\2\2\2\u0116\u04f9\3")
        buf.write("\2\2\2\u0118\u04fb\3\2\2\2\u011a\u04fd\3\2\2\2\u011c\u0509")
        buf.write("\3\2\2\2\u011e\u050d\3\2\2\2\u0120\u051a\3\2\2\2\u0122")
        buf.write("\u0560\3\2\2\2\u0124\u0572\3\2\2\2\u0126\u057a\3\2\2\2")
        buf.write("\u0128\u057c\3\2\2\2\u012a\u057e\3\2\2\2\u012c\u0586\3")
        buf.write("\2\2\2\u012e\u0589\3\2\2\2\u0130\u0591\3\2\2\2\u0132\u05a0")
        buf.write("\3\2\2\2\u0134\u05b0\3\2\2\2\u0136\u05bc\3\2\2\2\u0138")
        buf.write("\u05be\3\2\2\2\u013a\u0611\3\2\2\2\u013c\u0620\3\2\2\2")
        buf.write("\u013e\u0627\3\2\2\2\u0140\u062e\3\2\2\2\u0142\u0630\3")
        buf.write("\2\2\2\u0144\u0638\3\2\2\2\u0146\u0641\3\2\2\2\u0148\u064d")
        buf.write("\3\2\2\2\u014a\u064f\3\2\2\2\u014c\u014d\5\4\3\2\u014d")
        buf.write("\u014e\5\24\13\2\u014e\3\3\2\2\2\u014f\u0150\7\3\2\2\u0150")
        buf.write("\u0151\b\3\1\2\u0151\5\3\2\2\2\u0152\u0156\5\b\5\2\u0153")
        buf.write("\u0156\5\f\7\2\u0154\u0156\5\20\t\2\u0155\u0152\3\2\2")
        buf.write("\2\u0155\u0153\3\2\2\2\u0155\u0154\3\2\2\2\u0156\7\3\2")
        buf.write("\2\2\u0157\u0158\7\4\2\2\u0158\u015d\5\n\6\2\u0159\u015a")
        buf.write("\7\5\2\2\u015a\u015c\5\n\6\2\u015b\u0159\3\2\2\2\u015c")
        buf.write("\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2")
        buf.write("\u015e\u0160\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0161\7")
        buf.write("\6\2\2\u0161\t\3\2\2\2\u0162\u0163\7\u0090\2\2\u0163\13")
        buf.write("\3\2\2\2\u0164\u0165\t\2\2\2\u0165\u016a\5\16\b\2\u0166")
        buf.write("\u0167\7\5\2\2\u0167\u0169\5\16\b\2\u0168\u0166\3\2\2")
        buf.write("\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u016d\3\2\2\2\u016c\u016a\3\2\2\2\u016d")
        buf.write("\u016e\7\6\2\2\u016e\r\3\2\2\2\u016f\u0170\7\u0090\2\2")
        buf.write("\u0170\17\3\2\2\2\u0171\u0172\7\17\2\2\u0172\u0177\5\22")
        buf.write("\n\2\u0173\u0174\7\5\2\2\u0174\u0176\5\22\n\2\u0175\u0173")
        buf.write("\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177")
        buf.write("\u0178\3\2\2\2\u0178\u017a\3\2\2\2\u0179\u0177\3\2\2\2")
        buf.write("\u017a\u017b\7\6\2\2\u017b\21\3\2\2\2\u017c\u017d\7\u0090")
        buf.write("\2\2\u017d\23\3\2\2\2\u017e\u0180\5\26\f\2\u017f\u017e")
        buf.write("\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u017f\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\25\3\2\2\2\u0183\u0187\7\20\2\2\u0184")
        buf.write("\u0186\5\30\r\2\u0185\u0184\3\2\2\2\u0186\u0189\3\2\2")
        buf.write("\2\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\27\3")
        buf.write("\2\2\2\u0189\u0187\3\2\2\2\u018a\u0192\5\32\16\2\u018b")
        buf.write("\u0192\5\"\22\2\u018c\u0192\5$\23\2\u018d\u0192\5&\24")
        buf.write("\2\u018e\u0192\5\u00a2R\2\u018f\u0192\5\u00a4S\2\u0190")
        buf.write("\u0192\5\u00ba^\2\u0191\u018a\3\2\2\2\u0191\u018b\3\2")
        buf.write("\2\2\u0191\u018c\3\2\2\2\u0191\u018d\3\2\2\2\u0191\u018e")
        buf.write("\3\2\2\2\u0191\u018f\3\2\2\2\u0191\u0190\3\2\2\2\u0192")
        buf.write("\31\3\2\2\2\u0193\u0194\7\21\2\2\u0194\u0199\5\34\17\2")
        buf.write("\u0195\u0196\7\5\2\2\u0196\u0198\5\34\17\2\u0197\u0195")
        buf.write("\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199")
        buf.write("\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b\u0199\3\2\2\2")
        buf.write("\u019c\u019d\7\6\2\2\u019d\33\3\2\2\2\u019e\u019f\5\36")
        buf.write("\20\2\u019f\u01a0\7\22\2\2\u01a0\u01a1\5\u0132\u009a\2")
        buf.write("\u01a1\35\3\2\2\2\u01a2\u01a3\5 \21\2\u01a3\u01a4\7\5")
        buf.write("\2\2\u01a4\u01a5\5 \21\2\u01a5\37\3\2\2\2\u01a6\u01a7")
        buf.write("\7\u0091\2\2\u01a7!\3\2\2\2\u01a8\u01a9\5(\25\2\u01a9")
        buf.write("\u01aa\7\6\2\2\u01aa#\3\2\2\2\u01ab\u01ac\5*\26\2\u01ac")
        buf.write("\u01ad\7\23\2\2\u01ad%\3\2\2\2\u01ae\u01af\5,\27\2\u01af")
        buf.write("\u01b0\7\6\2\2\u01b0\'\3\2\2\2\u01b1\u01b7\7\24\2\2\u01b2")
        buf.write("\u01b6\5.\30\2\u01b3\u01b6\5\66\34\2\u01b4\u01b6\58\35")
        buf.write("\2\u01b5\u01b2\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b4")
        buf.write("\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7")
        buf.write("\u01b8\3\2\2\2\u01b8\u01ba\3\2\2\2\u01b9\u01b7\3\2\2\2")
        buf.write("\u01ba\u01bb\7\25\2\2\u01bb)\3\2\2\2\u01bc\u01c5\7\26")
        buf.write("\2\2\u01bd\u01c4\5\62\32\2\u01be\u01c4\5\u008cG\2\u01bf")
        buf.write("\u01c4\5\u0098M\2\u01c0\u01c4\5\u009aN\2\u01c1\u01c4\5")
        buf.write("\u009cO\2\u01c2\u01c4\5\u00ba^\2\u01c3\u01bd\3\2\2\2\u01c3")
        buf.write("\u01be\3\2\2\2\u01c3\u01bf\3\2\2\2\u01c3\u01c0\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c3\u01c2\3\2\2\2\u01c4\u01c7\3")
        buf.write("\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8")
        buf.write("\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01c9\7\25\2\2\u01c9")
        buf.write("+\3\2\2\2\u01ca\u01cf\7\27\2\2\u01cb\u01ce\5\62\32\2\u01cc")
        buf.write("\u01ce\5\60\31\2\u01cd\u01cb\3\2\2\2\u01cd\u01cc\3\2\2")
        buf.write("\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2")
        buf.write("\u01d3\7\25\2\2\u01d3-\3\2\2\2\u01d4\u01d8\5\62\32\2\u01d5")
        buf.write("\u01d8\5\64\33\2\u01d6\u01d8\5\u00ba^\2\u01d7\u01d4\3")
        buf.write("\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8/")
        buf.write("\3\2\2\2\u01d9\u01e0\5\u0084C\2\u01da\u01e0\5\u0086D\2")
        buf.write("\u01db\u01e0\5j\66\2\u01dc\u01e0\5T+\2\u01dd\u01e0\5z")
        buf.write(">\2\u01de\u01e0\5|?\2\u01df\u01d9\3\2\2\2\u01df\u01da")
        buf.write("\3\2\2\2\u01df\u01db\3\2\2\2\u01df\u01dc\3\2\2\2\u01df")
        buf.write("\u01dd\3\2\2\2\u01df\u01de\3\2\2\2\u01e0\61\3\2\2\2\u01e1")
        buf.write("\u01e2\7\30\2\2\u01e2\u01e5\5\u0126\u0094\2\u01e3\u01e4")
        buf.write("\7\31\2\2\u01e4\u01e6\5\u011a\u008e\2\u01e5\u01e3\3\2")
        buf.write("\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8")
        buf.write("\7\6\2\2\u01e8\63\3\2\2\2\u01e9\u01ea\5\u00dco\2\u01ea")
        buf.write("\65\3\2\2\2\u01eb\u01f1\5:\36\2\u01ec\u01f1\5N(\2\u01ed")
        buf.write("\u01f1\5d\63\2\u01ee\u01f1\5t;\2\u01ef\u01f1\5\u0080A")
        buf.write("\2\u01f0\u01eb\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f0\u01ed")
        buf.write("\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01ef\3\2\2\2\u01f1")
        buf.write("\67\3\2\2\2\u01f2\u01f7\7\32\2\2\u01f3\u01f8\5N(\2\u01f4")
        buf.write("\u01f8\5d\63\2\u01f5\u01f8\5t;\2\u01f6\u01f8\5\u0080A")
        buf.write("\2\u01f7\u01f3\3\2\2\2\u01f7\u01f4\3\2\2\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f7\u01f6\3\2\2\2\u01f89\3\2\2\2\u01f9\u01fe")
        buf.write("\7\33\2\2\u01fa\u01fb\7\34\2\2\u01fb\u01fc\5<\37\2\u01fc")
        buf.write("\u01fd\7\35\2\2\u01fd\u01ff\3\2\2\2\u01fe\u01fa\3\2\2")
        buf.write("\2\u01fe\u01ff\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0203")
        buf.write("\5> \2\u0201\u0202\7\36\2\2\u0202\u0204\5@!\2\u0203\u0201")
        buf.write("\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("\u0206\7\37\2\2\u0206\u0207\5B\"\2\u0207\u0208\7 \2\2")
        buf.write("\u0208\u0209\7\6\2\2\u0209;\3\2\2\2\u020a\u020f\5\u0134")
        buf.write("\u009b\2\u020b\u020c\7\5\2\2\u020c\u020e\5\u0134\u009b")
        buf.write("\2\u020d\u020b\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d")
        buf.write("\3\2\2\2\u020f\u0210\3\2\2\2\u0210=\3\2\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0212\u0213\7\u008b\2\2\u0213?\3\2\2\2\u0214")
        buf.write("\u0219\5D#\2\u0215\u0216\7\5\2\2\u0216\u0218\5D#\2\u0217")
        buf.write("\u0215\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2")
        buf.write("\u0219\u021a\3\2\2\2\u021aA\3\2\2\2\u021b\u0219\3\2\2")
        buf.write("\2\u021c\u0221\5H%\2\u021d\u021e\7\5\2\2\u021e\u0220\5")
        buf.write("H%\2\u021f\u021d\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0222\3\2\2\2\u0222C\3\2\2\2\u0223\u0221")
        buf.write("\3\2\2\2\u0224\u0225\5F$\2\u0225E\3\2\2\2\u0226\u0227")
        buf.write("\7\u0091\2\2\u0227G\3\2\2\2\u0228\u022d\5J&\2\u0229\u022a")
        buf.write("\7\5\2\2\u022a\u022c\5J&\2\u022b\u0229\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("\u0230\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0231\5L\'\2")
        buf.write("\u0231I\3\2\2\2\u0232\u0233\7\u008c\2\2\u0233K\3\2\2\2")
        buf.write("\u0234\u0235\7!\2\2\u0235\u0236\5\u0132\u009a\2\u0236")
        buf.write("M\3\2\2\2\u0237\u0238\7\"\2\2\u0238\u0246\5P)\2\u0239")
        buf.write("\u023b\5L\'\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\u023e\3\2\2\2\u023c\u023d\7#\2\2\u023d\u023f\5")
        buf.write("V,\2\u023e\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240")
        buf.write("\3\2\2\2\u0240\u0241\7\6\2\2\u0241\u0247\5\u009eP\2\u0242")
        buf.write("\u0243\7$\2\2\u0243\u0244\5\u0132\u009a\2\u0244\u0245")
        buf.write("\7\6\2\2\u0245\u0247\3\2\2\2\u0246\u023a\3\2\2\2\u0246")
        buf.write("\u0242\3\2\2\2\u0247\u024b\3\2\2\2\u0248\u024a\5b\62\2")
        buf.write("\u0249\u0248\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3")
        buf.write("\2\2\2\u024b\u024c\3\2\2\2\u024cO\3\2\2\2\u024d\u024b")
        buf.write("\3\2\2\2\u024e\u0251\5R*\2\u024f\u0250\7%\2\2\u0250\u0252")
        buf.write("\5@!\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252Q")
        buf.write("\3\2\2\2\u0253\u0254\t\3\2\2\u0254S\3\2\2\2\u0255\u0256")
        buf.write("\7\'\2\2\u0256\u0257\5P)\2\u0257\u0258\7\22\2\2\u0258")
        buf.write("\u0259\5P)\2\u0259\u025a\7\6\2\2\u025aU\3\2\2\2\u025b")
        buf.write("\u025e\5X-\2\u025c\u025e\5\\/\2\u025d\u025b\3\2\2\2\u025d")
        buf.write("\u025c\3\2\2\2\u025eW\3\2\2\2\u025f\u0260\7(\2\2\u0260")
        buf.write("\u0261\5Z.\2\u0261\u0262\7(\2\2\u0262\u0264\3\2\2\2\u0263")
        buf.write("\u025f\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0267\3\2\2\2")
        buf.write("\u0265\u0268\5\u011e\u0090\2\u0266\u0268\5\u013a\u009e")
        buf.write("\2\u0267\u0265\3\2\2\2\u0267\u0266\3\2\2\2\u0268Y\3\2")
        buf.write("\2\2\u0269\u026a\7\u0091\2\2\u026a[\3\2\2\2\u026b\u026c")
        buf.write("\7(\2\2\u026c\u026d\5Z.\2\u026d\u026e\7(\2\2\u026e\u0270")
        buf.write("\3\2\2\2\u026f\u026b\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write("\u0271\3\2\2\2\u0271\u0277\5^\60\2\u0272\u0275\7)\2\2")
        buf.write("\u0273\u0276\5\u011e\u0090\2\u0274\u0276\5\u013a\u009e")
        buf.write("\2\u0275\u0273\3\2\2\2\u0275\u0274\3\2\2\2\u0276\u0278")
        buf.write("\3\2\2\2\u0277\u0272\3\2\2\2\u0277\u0278\3\2\2\2\u0278")
        buf.write("]\3\2\2\2\u0279\u027e\5`\61\2\u027a\u027b\7\5\2\2\u027b")
        buf.write("\u027d\5`\61\2\u027c\u027a\3\2\2\2\u027d\u0280\3\2\2\2")
        buf.write("\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2\u027f_\3\2\2")
        buf.write("\2\u0280\u027e\3\2\2\2\u0281\u0284\5\u011e\u0090\2\u0282")
        buf.write("\u0284\5\u013a\u009e\2\u0283\u0281\3\2\2\2\u0283\u0282")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\7*\2\2\u0286")
        buf.write("\u0287\5\u011e\u0090\2\u0287a\3\2\2\2\u0288\u0289\7+\2")
        buf.write("\2\u0289\u028a\5\u00fc\177\2\u028a\u028b\7\6\2\2\u028b")
        buf.write("c\3\2\2\2\u028c\u028d\7,\2\2\u028d\u028f\5f\64\2\u028e")
        buf.write("\u0290\5L\'\2\u028f\u028e\3\2\2\2\u028f\u0290\3\2\2\2")
        buf.write("\u0290\u0293\3\2\2\2\u0291\u0292\t\4\2\2\u0292\u0294\5")
        buf.write("V,\2\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295\u0296\7\6\2\2\u0296\u029a\5\u009eP\2\u0297")
        buf.write("\u0299\5h\65\2\u0298\u0297\3\2\2\2\u0299\u029c\3\2\2\2")
        buf.write("\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029be\3\2\2")
        buf.write("\2\u029c\u029a\3\2\2\2\u029d\u029f\5l\67\2\u029e\u029d")
        buf.write("\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0")
        buf.write("\u02a2\5n8\2\u02a1\u02a3\5l\67\2\u02a2\u02a1\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a9\3\2\2\2\u02a4\u02a5\5p9\2\u02a5")
        buf.write("\u02a6\5@!\2\u02a6\u02a7\5r:\2\u02a7\u02a9\3\2\2\2\u02a8")
        buf.write("\u029e\3\2\2\2\u02a8\u02a4\3\2\2\2\u02a9g\3\2\2\2\u02aa")
        buf.write("\u02ab\t\5\2\2\u02ab\u02ac\5\u00fc\177\2\u02ac\u02ad\7")
        buf.write("\6\2\2\u02adi\3\2\2\2\u02ae\u02af\7\'\2\2\u02af\u02b0")
        buf.write("\5f\64\2\u02b0\u02b1\7\22\2\2\u02b1\u02b2\5f\64\2\u02b2")
        buf.write("\u02b3\7\6\2\2\u02b3k\3\2\2\2\u02b4\u02ba\5D#\2\u02b5")
        buf.write("\u02b6\7\34\2\2\u02b6\u02b7\5@!\2\u02b7\u02b8\7\35\2\2")
        buf.write("\u02b8\u02ba\3\2\2\2\u02b9\u02b4\3\2\2\2\u02b9\u02b5\3")
        buf.write("\2\2\2\u02bam\3\2\2\2\u02bb\u02bc\7\u0089\2\2\u02bco\3")
        buf.write("\2\2\2\u02bd\u02be\t\6\2\2\u02beq\3\2\2\2\u02bf\u02c0")
        buf.write("\t\7\2\2\u02c0s\3\2\2\2\u02c1\u02c2\7\66\2\2\u02c2\u02c5")
        buf.write("\5v<\2\u02c3\u02c4\7#\2\2\u02c4\u02c6\5V,\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\7\6\2\2\u02c8\u02cc\5\u009eP\2\u02c9\u02cb\5x=")
        buf.write("\2\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cdu\3\2\2\2\u02ce\u02cc")
        buf.write("\3\2\2\2\u02cf\u02d1\5@!\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1")
        buf.write("\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d4\5~@\2\u02d3\u02d5")
        buf.write("\5@!\2\u02d4\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5w")
        buf.write("\3\2\2\2\u02d6\u02d7\t\b\2\2\u02d7\u02d8\5\u00fc\177\2")
        buf.write("\u02d8\u02d9\7\6\2\2\u02d9y\3\2\2\2\u02da\u02db\7\'\2")
        buf.write("\2\u02db\u02dc\5v<\2\u02dc\u02dd\7\22\2\2\u02dd\u02de")
        buf.write("\5v<\2\u02de\u02df\7\6\2\2\u02df{\3\2\2\2\u02e0\u02e1")
        buf.write("\7<\2\2\u02e1\u02e2\5v<\2\u02e2\u02e3\7\22\2\2\u02e3\u02e4")
        buf.write("\5v<\2\u02e4\u02e5\7\6\2\2\u02e5}\3\2\2\2\u02e6\u02e7")
        buf.write("\t\t\2\2\u02e7\177\3\2\2\2\u02e8\u02e9\7>\2\2\u02e9\u02ea")
        buf.write("\5\u0082B\2\u02ea\u02eb\7#\2\2\u02eb\u02ec\5V,\2\u02ec")
        buf.write("\u02ed\7\6\2\2\u02ed\u02ee\5\u009eP\2\u02ee\u0081\3\2")
        buf.write("\2\2\u02ef\u02f0\5D#\2\u02f0\u02f2\7$\2\2\u02f1\u02f3")
        buf.write("\5\u008aF\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02f5\5\u0088E\2\u02f5\u0083\3\2")
        buf.write("\2\2\u02f6\u02f7\7\'\2\2\u02f7\u02f8\5\u0082B\2\u02f8")
        buf.write("\u02f9\7\22\2\2\u02f9\u02fa\5\u0082B\2\u02fa\u02fb\7\6")
        buf.write("\2\2\u02fb\u0085\3\2\2\2\u02fc\u02fd\7<\2\2\u02fd\u02fe")
        buf.write("\5\u0082B\2\u02fe\u02ff\7\22\2\2\u02ff\u0300\5\u0082B")
        buf.write("\2\u0300\u0301\7\6\2\2\u0301\u0087\3\2\2\2\u0302\u0303")
        buf.write("\7\u008d\2\2\u0303\u0089\3\2\2\2\u0304\u030a\5@!\2\u0305")
        buf.write("\u0306\7\34\2\2\u0306\u0307\5@!\2\u0307\u0308\7\35\2\2")
        buf.write("\u0308\u030a\3\2\2\2\u0309\u0304\3\2\2\2\u0309\u0305\3")
        buf.write("\2\2\2\u030a\u008b\3\2\2\2\u030b\u030f\5\u008eH\2\u030c")
        buf.write("\u030f\5\u0094K\2\u030d\u030f\5\u0096L\2\u030e\u030b\3")
        buf.write("\2\2\2\u030e\u030c\3\2\2\2\u030e\u030d\3\2\2\2\u030f\u008d")
        buf.write("\3\2\2\2\u0310\u0311\7?\2\2\u0311\u0312\5\u0090I\2\u0312")
        buf.write("\u0313\7\22\2\2\u0313\u0314\5\u0132\u009a\2\u0314\u0315")
        buf.write("\7\6\2\2\u0315\u0316\5\u009eP\2\u0316\u008f\3\2\2\2\u0317")
        buf.write("\u0319\5\u0092J\2\u0318\u0317\3\2\2\2\u0319\u031c\3\2")
        buf.write("\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u0091")
        buf.write("\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u031f\7@\2\2\u031e")
        buf.write("\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0321\3\2\2\2")
        buf.write("\u0320\u0322\5\u0140\u00a1\2\u0321\u0320\3\2\2\2\u0321")
        buf.write("\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\5\u0088")
        buf.write("E\2\u0324\u0093\3\2\2\2\u0325\u0326\7?\2\2\u0326\u0327")
        buf.write("\5\u0090I\2\u0327\u0328\7!\2\2\u0328\u0329\5\u0090I\2")
        buf.write("\u0329\u032a\7\22\2\2\u032a\u032b\5\u0132\u009a\2\u032b")
        buf.write("\u032c\7\6\2\2\u032c\u032d\5\u009eP\2\u032d\u0095\3\2")
        buf.write("\2\2\u032e\u032f\7?\2\2\u032f\u0330\5\u013a\u009e\2\u0330")
        buf.write("\u0331\7!\2\2\u0331\u0334\5\u0090I\2\u0332\u0333\7\22")
        buf.write("\2\2\u0333\u0335\5\u0132\u009a\2\u0334\u0332\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337\7\6\2\2")
        buf.write("\u0337\u0338\5\u009eP\2\u0338\u0097\3\2\2\2\u0339\u033a")
        buf.write("\7A\2\2\u033a\u033b\5f\64\2\u033b\u033c\7B\2\2\u033c\u034b")
        buf.write("\5f\64\2\u033d\u033e\7C\2\2\u033e\u033f\5D#\2\u033f\u0340")
        buf.write("\7=\2\2\u0340\u0348\5D#\2\u0341\u0342\7\5\2\2\u0342\u0343")
        buf.write("\5D#\2\u0343\u0344\7=\2\2\u0344\u0345\5D#\2\u0345\u0347")
        buf.write("\3\2\2\2\u0346\u0341\3\2\2\2\u0347\u034a\3\2\2\2\u0348")
        buf.write("\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034c\3\2\2\2")
        buf.write("\u034a\u0348\3\2\2\2\u034b\u033d\3\2\2\2\u034b\u034c\3")
        buf.write("\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e\7\6\2\2\u034e\u034f")
        buf.write("\5\u009eP\2\u034f\u0099\3\2\2\2\u0350\u0351\7+\2\2\u0351")
        buf.write("\u0352\7%\2\2\u0352\u0353\5\u0132\u009a\2\u0353\u0354")
        buf.write("\5\u00fc\177\2\u0354\u0355\7\6\2\2\u0355\u009b\3\2\2\2")
        buf.write("\u0356\u0357\7D\2\2\u0357\u0358\5\u013a\u009e\2\u0358")
        buf.write("\u0359\7E\2\2\u0359\u035a\5\u013a\u009e\2\u035a\u035b")
        buf.write("\7\6\2\2\u035b\u035c\5\u009eP\2\u035c\u009d\3\2\2\2\u035d")
        buf.write("\u035f\5\u00a0Q\2\u035e\u035d\3\2\2\2\u035f\u0362\3\2")
        buf.write("\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0367")
        buf.write("\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0364\7F\2\2\u0364")
        buf.write("\u0365\5\u00fc\177\2\u0365\u0366\7\6\2\2\u0366\u0368\3")
        buf.write("\2\2\2\u0367\u0363\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u009f")
        buf.write("\3\2\2\2\u0369\u036a\t\n\2\2\u036a\u036b\5\u00fc\177\2")
        buf.write("\u036b\u036c\7\6\2\2\u036c\u00a1\3\2\2\2\u036d\u036e\7")
        buf.write("M\2\2\u036e\u036f\5\u00f0y\2\u036f\u00a3\3\2\2\2\u0370")
        buf.write("\u0371\5\u00a6T\2\u0371\u0372\7\6\2\2\u0372\u00a5\3\2")
        buf.write("\2\2\u0373\u0374\7N\2\2\u0374\u0375\5\u00a8U\2\u0375\u0376")
        buf.write("\7\62\2\2\u0376\u0377\5\u00aaV\2\u0377\u0378\7\64\2\2")
        buf.write("\u0378\u0379\7(\2\2\u0379\u0383\5\u00acW\2\u037a\u037b")
        buf.write("\7O\2\2\u037b\u0380\5\u00aeX\2\u037c\u037d\7P\2\2\u037d")
        buf.write("\u037f\5\u00aeX\2\u037e\u037c\3\2\2\2\u037f\u0382\3\2")
        buf.write("\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0384")
        buf.write("\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u037a\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386\t\13\2")
        buf.write("\2\u0386\u0387\5\u00ccg\2\u0387\u0388\7\25\2\2\u0388\u00a7")
        buf.write("\3\2\2\2\u0389\u038a\7\u0091\2\2\u038a\u00a9\3\2\2\2\u038b")
        buf.write("\u0390\5\u00b0Y\2\u038c\u038d\7\5\2\2\u038d\u038f\5\u00b0")
        buf.write("Y\2\u038e\u038c\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e")
        buf.write("\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u00ab\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0393\u0394\5\u011e\u0090\2\u0394\u00ad")
        buf.write("\3\2\2\2\u0395\u0396\5\u011c\u008f\2\u0396\u00af\3\2\2")
        buf.write("\2\u0397\u039a\5\u00b2Z\2\u0398\u039a\5\u00b6\\\2\u0399")
        buf.write("\u0397\3\2\2\2\u0399\u0398\3\2\2\2\u039a\u00b1\3\2\2\2")
        buf.write("\u039b\u03a0\5\u00b4[\2\u039c\u039d\7\5\2\2\u039d\u039f")
        buf.write("\5\u00b4[\2\u039e\u039c\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0")
        buf.write("\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3\3\2\2\2")
        buf.write("\u03a2\u03a0\3\2\2\2\u03a3\u03a5\7\63\2\2\u03a4\u03a6")
        buf.write("\5\u0138\u009d\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2")
        buf.write("\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\7\65\2\2\u03a8\u00b3")
        buf.write("\3\2\2\2\u03a9\u03aa\7\u0091\2\2\u03aa\u00b5\3\2\2\2\u03ab")
        buf.write("\u03b0\5\u00b8]\2\u03ac\u03ad\7\5\2\2\u03ad\u03af\5\u00b8")
        buf.write("]\2\u03ae\u03ac\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2")
        buf.write("\u03b0\3\2\2\2\u03b3\u03b5\7\34\2\2\u03b4\u03b6\5\u0138")
        buf.write("\u009d\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03b8\7\35\2\2\u03b8\u03b9\5L\'\2")
        buf.write("\u03b9\u00b7\3\2\2\2\u03ba\u03bb\7\u0091\2\2\u03bb\u00b9")
        buf.write("\3\2\2\2\u03bc\u03bf\5\u00ecw\2\u03bd\u03bf\5\u00bc_\2")
        buf.write("\u03be\u03bc\3\2\2\2\u03be\u03bd\3\2\2\2\u03bf\u00bb\3")
        buf.write("\2\2\2\u03c0\u03c4\5\u00be`\2\u03c1\u03c4\5\u00c4c\2\u03c2")
        buf.write("\u03c4\5\u00c6d\2\u03c3\u03c0\3\2\2\2\u03c3\u03c1\3\2")
        buf.write("\2\2\u03c3\u03c2\3\2\2\2\u03c4\u00bd\3\2\2\2\u03c5\u03c6")
        buf.write("\7&\2\2\u03c6\u03c7\5\u00c0a\2\u03c7\u03c8\7\6\2\2\u03c8")
        buf.write("\u00bf\3\2\2\2\u03c9\u03ce\5\u00c2b\2\u03ca\u03cb\7\5")
        buf.write("\2\2\u03cb\u03cd\5\u00c2b\2\u03cc\u03ca\3\2\2\2\u03cd")
        buf.write("\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u00c1\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03d2\5")
        buf.write("F$\2\u03d2\u03d3\7=\2\2\u03d3\u03d4\5\u013a\u009e\2\u03d4")
        buf.write("\u00c3\3\2\2\2\u03d5\u03d6\7R\2\2\u03d6\u03d7\5\u00c8")
        buf.write("e\2\u03d7\u03d8\7=\2\2\u03d8\u03d9\5\u013a\u009e\2\u03d9")
        buf.write("\u03da\7\6\2\2\u03da\u00c5\3\2\2\2\u03db\u03dc\7S\2\2")
        buf.write("\u03dc\u03dd\5\u00caf\2\u03dd\u03de\7#\2\2\u03de\u03df")
        buf.write("\5\u011e\u0090\2\u03df\u03e0\7\6\2\2\u03e0\u00c7\3\2\2")
        buf.write("\2\u03e1\u03e2\5\u00b8]\2\u03e2\u03e4\7\34\2\2\u03e3\u03e5")
        buf.write("\5\u0138\u009d\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2")
        buf.write("\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\7\35\2\2\u03e7\u00c9")
        buf.write("\3\2\2\2\u03e8\u03e9\5\u00b4[\2\u03e9\u03eb\7\63\2\2\u03ea")
        buf.write("\u03ec\5\u0138\u009d\2\u03eb\u03ea\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee\7\65\2\2\u03ee")
        buf.write("\u00cb\3\2\2\2\u03ef\u03f1\5\u00d6l\2\u03f0\u03ef\3\2")
        buf.write("\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3")
        buf.write("\3\2\2\2\u03f3\u0400\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5")
        buf.write("\u03f7\7T\2\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u03f8\3\2\2\2\u03f8\u03f9\7U\2\2\u03f9\u03fa\7")
        buf.write("V\2\2\u03fa\u03fb\5\u00fe\u0080\2\u03fb\u03fe\7\6\2\2")
        buf.write("\u03fc\u03ff\5\u00ceh\2\u03fd\u03ff\5\u00d2j\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03fe\u03fd\3\2\2\2\u03ff\u0401\3\2\2\2\u0400")
        buf.write("\u03f6\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u00cd\3\2\2\2")
        buf.write("\u0402\u0404\5\u00d0i\2\u0403\u0402\3\2\2\2\u0404\u0405")
        buf.write("\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406")
        buf.write("\u00cf\3\2\2\2\u0407\u040a\7W\2\2\u0408\u040b\5\u011c")
        buf.write("\u008f\2\u0409\u040b\5\u011a\u008e\2\u040a\u0408\3\2\2")
        buf.write("\2\u040a\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040d")
        buf.write("\7\6\2\2\u040d\u040e\5\u00ccg\2\u040e\u040f\7\25\2\2\u040f")
        buf.write("\u0410\7\6\2\2\u0410\u00d1\3\2\2\2\u0411\u0413\5\u00d4")
        buf.write("k\2\u0412\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0412")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u00d3\3\2\2\2\u0416")
        buf.write("\u0419\7X\2\2\u0417\u041a\5\u011c\u008f\2\u0418\u041a")
        buf.write("\5\u011a\u008e\2\u0419\u0417\3\2\2\2\u0419\u0418\3\2\2")
        buf.write("\2\u041a\u041b\3\2\2\2\u041b\u041c\7\6\2\2\u041c\u041d")
        buf.write("\5\u00ccg\2\u041d\u041e\7\25\2\2\u041e\u041f\7\6\2\2\u041f")
        buf.write("\u00d5\3\2\2\2\u0420\u0423\5\u00ba^\2\u0421\u0423\5\u00d8")
        buf.write("m\2\u0422\u0420\3\2\2\2\u0422\u0421\3\2\2\2\u0423\u00d7")
        buf.write("\3\2\2\2\u0424\u0429\5\u00dan\2\u0425\u0429\5\u00dco\2")
        buf.write("\u0426\u0429\5\u00e4s\2\u0427\u0429\5\u00e8u\2\u0428\u0424")
        buf.write("\3\2\2\2\u0428\u0425\3\2\2\2\u0428\u0426\3\2\2\2\u0428")
        buf.write("\u0427\3\2\2\2\u0429\u00d9\3\2\2\2\u042a\u042b\7\30\2")
        buf.write("\2\u042b\u042e\5\u0126\u0094\2\u042c\u042d\7\31\2\2\u042d")
        buf.write("\u042f\5\u011a\u008e\2\u042e\u042c\3\2\2\2\u042e\u042f")
        buf.write("\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\7\6\2\2\u0431")
        buf.write("\u00db\3\2\2\2\u0432\u0436\5\u00dep\2\u0433\u0436\5\u00e0")
        buf.write("q\2\u0434\u0436\5\u00e2r\2\u0435\u0432\3\2\2\2\u0435\u0433")
        buf.write("\3\2\2\2\u0435\u0434\3\2\2\2\u0436\u00dd\3\2\2\2\u0437")
        buf.write("\u0438\7Y\2\2\u0438\u0439\5\u011c\u008f\2\u0439\u043a")
        buf.write("\7\6\2\2\u043a\u00df\3\2\2\2\u043b\u043c\7Y\2\2\u043c")
        buf.write("\u043d\5\u011a\u008e\2\u043d\u043e\7\6\2\2\u043e\u00e1")
        buf.write("\3\2\2\2\u043f\u0440\7Z\2\2\u0440\u0443\5\u0126\u0094")
        buf.write("\2\u0441\u0442\7\31\2\2\u0442\u0444\5\u011a\u008e\2\u0443")
        buf.write("\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2")
        buf.write("\u0445\u0446\7\6\2\2\u0446\u00e3\3\2\2\2\u0447\u044a\t")
        buf.write("\f\2\2\u0448\u044b\5\u00f0y\2\u0449\u044b\5\u00f8}\2\u044a")
        buf.write("\u0448\3\2\2\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2\2")
        buf.write("\u044c\u044e\5\u00e6t\2\u044d\u0447\3\2\2\2\u044d\u044c")
        buf.write("\3\2\2\2\u044e\u00e5\3\2\2\2\u044f\u0450\7[\2\2\u0450")
        buf.write("\u0457\5\u00fa~\2\u0451\u0452\7]\2\2\u0452\u0453\5\u00cc")
        buf.write("g\2\u0453\u0454\7\25\2\2\u0454\u0455\7\6\2\2\u0455\u0457")
        buf.write("\3\2\2\2\u0456\u044f\3\2\2\2\u0456\u0451\3\2\2\2\u0457")
        buf.write("\u00e7\3\2\2\2\u0458\u0459\7^\2\2\u0459\u045e\5\u00ea")
        buf.write("v\2\u045a\u045b\7\5\2\2\u045b\u045d\5\u00eav\2\u045c\u045a")
        buf.write("\3\2\2\2\u045d\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0461\3\2\2\2\u0460\u045e\3\2\2\2")
        buf.write("\u0461\u0462\7\6\2\2\u0462\u00e9\3\2\2\2\u0463\u0469\5")
        buf.write("\u013a\u009e\2\u0464\u0465\5F$\2\u0465\u0466\7=\2\2\u0466")
        buf.write("\u0467\5\u013a\u009e\2\u0467\u0469\3\2\2\2\u0468\u0463")
        buf.write("\3\2\2\2\u0468\u0464\3\2\2\2\u0469\u00eb\3\2\2\2\u046a")
        buf.write("\u046c\7T\2\2\u046b\u046a\3\2\2\2\u046b\u046c\3\2\2\2")
        buf.write("\u046c\u046d\3\2\2\2\u046d\u0470\5\u00eex\2\u046e\u0470")
        buf.write("\5\u00fa~\2\u046f\u046b\3\2\2\2\u046f\u046e\3\2\2\2\u0470")
        buf.write("\u00ed\3\2\2\2\u0471\u0476\5\u00f0y\2\u0472\u0476\5\u00f2")
        buf.write("z\2\u0473\u0476\5\u00f4{\2\u0474\u0476\5\u00f8}\2\u0475")
        buf.write("\u0471\3\2\2\2\u0475\u0472\3\2\2\2\u0475\u0473\3\2\2\2")
        buf.write("\u0475\u0474\3\2\2\2\u0476\u00ef\3\2\2\2\u0477\u0478\5")
        buf.write("\u011c\u008f\2\u0478\u0479\5\u00fc\177\2\u0479\u047a\7")
        buf.write("\6\2\2\u047a\u00f1\3\2\2\2\u047b\u047c\7_\2\2\u047c\u047d")
        buf.write("\5\u0126\u0094\2\u047d\u047e\7\31\2\2\u047e\u047f\5\u011a")
        buf.write("\u008e\2\u047f\u0480\5\u00fe\u0080\2\u0480\u0481\7\6\2")
        buf.write("\2\u0481\u00f3\3\2\2\2\u0482\u0483\7`\2\2\u0483\u0484")
        buf.write("\5\u00f6|\2\u0484\u0485\7a\2\2\u0485\u0486\5\u0132\u009a")
        buf.write("\2\u0486\u0487\5\u00fe\u0080\2\u0487\u0488\7\6\2\2\u0488")
        buf.write("\u00f5\3\2\2\2\u0489\u048c\5\u00c2b\2\u048a\u048c\5F$")
        buf.write("\2\u048b\u0489\3\2\2\2\u048b\u048a\3\2\2\2\u048c\u0494")
        buf.write("\3\2\2\2\u048d\u0490\7\5\2\2\u048e\u0491\5\u00c2b\2\u048f")
        buf.write("\u0491\5F$\2\u0490\u048e\3\2\2\2\u0490\u048f\3\2\2\2\u0491")
        buf.write("\u0493\3\2\2\2\u0492\u048d\3\2\2\2\u0493\u0496\3\2\2\2")
        buf.write("\u0494\u0492\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u00f7\3")
        buf.write("\2\2\2\u0496\u0494\3\2\2\2\u0497\u0498\5Z.\2\u0498\u0499")
        buf.write("\7(\2\2\u0499\u049b\3\2\2\2\u049a\u0497\3\2\2\2\u049a")
        buf.write("\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d\5\u013a")
        buf.write("\u009e\2\u049d\u049e\7=\2\2\u049e\u049f\5\u013a\u009e")
        buf.write("\2\u049f\u04a4\5\u00fe\u0080\2\u04a0\u04a1\7b\2\2\u04a1")
        buf.write("\u04a2\5\u013a\u009e\2\u04a2\u04a3\5\u00fe\u0080\2\u04a3")
        buf.write("\u04a5\3\2\2\2\u04a4\u04a0\3\2\2\2\u04a5\u04a6\3\2\2\2")
        buf.write("\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\3")
        buf.write("\2\2\2\u04a8\u04a9\7\6\2\2\u04a9\u00f9\3\2\2\2\u04aa\u04ab")
        buf.write("\5Z.\2\u04ab\u04ac\7(\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04aa")
        buf.write("\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04af\3\2\2\2\u04af")
        buf.write("\u04b0\7c\2\2\u04b0\u04b1\5\u00ccg\2\u04b1\u04b2\7\25")
        buf.write("\2\2\u04b2\u04b3\7\6\2\2\u04b3\u00fb\3\2\2\2\u04b4\u04b7")
        buf.write("\5\u00fe\u0080\2\u04b5\u04b7\5\u0100\u0081\2\u04b6\u04b4")
        buf.write("\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7\u00fd\3\2\2\2\u04b8")
        buf.write("\u04bb\5\u0102\u0082\2\u04b9\u04bb\5\u0104\u0083\2\u04ba")
        buf.write("\u04b8\3\2\2\2\u04ba\u04b9\3\2\2\2\u04bb\u00ff\3\2\2\2")
        buf.write("\u04bc\u04bd\7Q\2\2\u04bd\u04be\5\u00ccg\2\u04be\u04bf")
        buf.write("\7\25\2\2\u04bf\u0101\3\2\2\2\u04c0\u04c1\7d\2\2\u04c1")
        buf.write("\u04c3\5\u0106\u0084\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3")
        buf.write("\3\2\2\2\u04c3\u0103\3\2\2\2\u04c4\u04c5\7e\2\2\u04c5")
        buf.write("\u04ca\5\u010a\u0086\2\u04c6\u04c7\7\34\2\2\u04c7\u04c8")
        buf.write("\5\u0106\u0084\2\u04c8\u04c9\7\35\2\2\u04c9\u04cb\3\2")
        buf.write("\2\2\u04ca\u04c6\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u0105")
        buf.write("\3\2\2\2\u04cc\u04d1\5\u0108\u0085\2\u04cd\u04ce\7\5\2")
        buf.write("\2\u04ce\u04d0\5\u0108\u0085\2\u04cf\u04cd\3\2\2\2\u04d0")
        buf.write("\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2")
        buf.write("\u04d2\u0107\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d4\u04d7\5")
        buf.write("\u010c\u0087\2\u04d5\u04d7\5\u0110\u0089\2\u04d6\u04d4")
        buf.write("\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7\u0109\3\2\2\2\u04d8")
        buf.write("\u04db\5\u010e\u0088\2\u04d9\u04db\5\u0112\u008a\2\u04da")
        buf.write("\u04d8\3\2\2\2\u04da\u04d9\3\2\2\2\u04db\u010b\3\2\2\2")
        buf.write("\u04dc\u04dd\5Z.\2\u04dd\u010d\3\2\2\2\u04de\u04df\5\u00a8")
        buf.write("U\2\u04df\u010f\3\2\2\2\u04e0\u04e1\5\16\b\2\u04e1\u04e5")
        buf.write("\7(\2\2\u04e2\u04e6\5\u0114\u008b\2\u04e3\u04e4\7f\2\2")
        buf.write("\u04e4\u04e6\5\u0116\u008c\2\u04e5\u04e2\3\2\2\2\u04e5")
        buf.write("\u04e3\3\2\2\2\u04e6\u04ef\3\2\2\2\u04e7\u04eb\7\5\2\2")
        buf.write("\u04e8\u04ec\5\u0114\u008b\2\u04e9\u04ea\7f\2\2\u04ea")
        buf.write("\u04ec\5\u0116\u008c\2\u04eb\u04e8\3\2\2\2\u04eb\u04e9")
        buf.write("\3\2\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04e7\3\2\2\2\u04ee")
        buf.write("\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2")
        buf.write("\u04f0\u0111\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f2\u04f3\5")
        buf.write("\16\b\2\u04f3\u04f4\7(\2\2\u04f4\u04f5\7g\2\2\u04f5\u04f6")
        buf.write("\5\u0118\u008d\2\u04f6\u0113\3\2\2\2\u04f7\u04f8\7\u0092")
        buf.write("\2\2\u04f8\u0115\3\2\2\2\u04f9\u04fa\7\u0092\2\2\u04fa")
        buf.write("\u0117\3\2\2\2\u04fb\u04fc\7\u0092\2\2\u04fc\u0119\3\2")
        buf.write("\2\2\u04fd\u04fe\7h\2\2\u04fe\u0503\5\u011c\u008f\2\u04ff")
        buf.write("\u0500\7P\2\2\u0500\u0502\5\u011c\u008f\2\u0501\u04ff")
        buf.write("\3\2\2\2\u0502\u0505\3\2\2\2\u0503\u0501\3\2\2\2\u0503")
        buf.write("\u0504\3\2\2\2\u0504\u011b\3\2\2\2\u0505\u0503\3\2\2\2")
        buf.write("\u0506\u0507\5Z.\2\u0507\u0508\7(\2\2\u0508\u050a\3\2")
        buf.write("\2\2\u0509\u0506\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b")
        buf.write("\3\2\2\2\u050b\u050c\5\u011e\u0090\2\u050c\u011d\3\2\2")
        buf.write("\2\u050d\u050e\5\u0120\u0091\2\u050e\u011f\3\2\2\2\u050f")
        buf.write("\u0510\b\u0091\1\2\u0510\u0511\7\34\2\2\u0511\u0512\5")
        buf.write("\u0120\u0091\2\u0512\u0513\7\35\2\2\u0513\u051b\3\2\2")
        buf.write("\2\u0514\u051b\5\u0122\u0092\2\u0515\u051b\5\u0124\u0093")
        buf.write("\2\u0516\u0517\7n\2\2\u0517\u051b\5\u0120\u0091\5\u0518")
        buf.write("\u051b\7o\2\2\u0519\u051b\7p\2\2\u051a\u050f\3\2\2\2\u051a")
        buf.write("\u0514\3\2\2\2\u051a\u0515\3\2\2\2\u051a\u0516\3\2\2\2")
        buf.write("\u051a\u0518\3\2\2\2\u051a\u0519\3\2\2\2\u051b\u0534\3")
        buf.write("\2\2\2\u051c\u051d\f\13\2\2\u051d\u051e\7i\2\2\u051e\u0533")
        buf.write("\5\u0120\u0091\f\u051f\u0520\f\n\2\2\u0520\u0521\7i\2")
        buf.write("\2\u0521\u0522\7j\2\2\u0522\u0523\7i\2\2\u0523\u0533\5")
        buf.write("\u0120\u0091\13\u0524\u0525\f\t\2\2\u0525\u0526\7k\2\2")
        buf.write("\u0526\u0533\5\u0120\u0091\n\u0527\u0528\f\b\2\2\u0528")
        buf.write("\u0529\7k\2\2\u0529\u052a\7j\2\2\u052a\u052b\7k\2\2\u052b")
        buf.write("\u0533\5\u0120\u0091\t\u052c\u052d\f\7\2\2\u052d\u052e")
        buf.write("\7l\2\2\u052e\u0533\5\u0120\u0091\b\u052f\u0530\f\6\2")
        buf.write("\2\u0530\u0531\7m\2\2\u0531\u0533\5\u0120\u0091\7\u0532")
        buf.write("\u051c\3\2\2\2\u0532\u051f\3\2\2\2\u0532\u0524\3\2\2\2")
        buf.write("\u0532\u0527\3\2\2\2\u0532\u052c\3\2\2\2\u0532\u052f\3")
        buf.write("\2\2\2\u0533\u0536\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535")
        buf.write("\3\2\2\2\u0535\u0121\3\2\2\2\u0536\u0534\3\2\2\2\u0537")
        buf.write("\u0539\5\u0142\u00a2\2\u0538\u0537\3\2\2\2\u0538\u0539")
        buf.write("\3\2\2\2\u0539\u053c\3\2\2\2\u053a\u053b\t\r\2\2\u053b")
        buf.write("\u053d\7n\2\2\u053c\u053a\3\2\2\2\u053c\u053d\3\2\2\2")
        buf.write("\u053d\u053e\3\2\2\2\u053e\u0540\5~@\2\u053f\u0541\5\u0142")
        buf.write("\u00a2\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541")
        buf.write("\u054b\3\2\2\2\u0542\u0543\t\r\2\2\u0543\u0545\7n\2\2")
        buf.write("\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0546\3")
        buf.write("\2\2\2\u0546\u0547\5~@\2\u0547\u0548\5\u0142\u00a2\2\u0548")
        buf.write("\u054a\3\2\2\2\u0549\u0544\3\2\2\2\u054a\u054d\3\2\2\2")
        buf.write("\u054b\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u0561\3")
        buf.write("\2\2\2\u054d\u054b\3\2\2\2\u054e\u054f\5\u00b4[\2\u054f")
        buf.write("\u0551\7\63\2\2\u0550\u0552\5\u0142\u00a2\2\u0551\u0550")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u0554\7\65\2\2\u0554\u0561\3\2\2\2\u0555\u0556\5\u013a")
        buf.write("\u009e\2\u0556\u0558\7$\2\2\u0557\u0559\5\u0092J\2\u0558")
        buf.write("\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u0558\3\2\2\2")
        buf.write("\u055a\u055b\3\2\2\2\u055b\u0561\3\2\2\2\u055c\u055d\5")
        buf.write("\u013a\u009e\2\u055d\u055e\7$\2\2\u055e\u055f\5\u0132")
        buf.write("\u009a\2\u055f\u0561\3\2\2\2\u0560\u0538\3\2\2\2\u0560")
        buf.write("\u054e\3\2\2\2\u0560\u0555\3\2\2\2\u0560\u055c\3\2\2\2")
        buf.write("\u0561\u0123\3\2\2\2\u0562\u0563\7\22\2\2\u0563\u0566")
        buf.write("\5\u0126\u0094\2\u0564\u0565\7s\2\2\u0565\u0567\5\u0120")
        buf.write("\u0091\2\u0566\u0564\3\2\2\2\u0566\u0567\3\2\2\2\u0567")
        buf.write("\u056b\3\2\2\2\u0568\u0569\7t\2\2\u0569\u056c\5\u0120")
        buf.write("\u0091\2\u056a\u056c\5\u0124\u0093\2\u056b\u0568\3\2\2")
        buf.write("\2\u056b\u056a\3\2\2\2\u056c\u0573\3\2\2\2\u056d\u056e")
        buf.write("\7u\2\2\u056e\u056f\5\u0126\u0094\2\u056f\u0570\7s\2\2")
        buf.write("\u0570\u0571\5\u0120\u0091\2\u0571\u0573\3\2\2\2\u0572")
        buf.write("\u0562\3\2\2\2\u0572\u056d\3\2\2\2\u0573\u0125\3\2\2\2")
        buf.write("\u0574\u057b\5\u0128\u0095\2\u0575\u057b\5\u012a\u0096")
        buf.write("\2\u0576\u0577\5\u012a\u0096\2\u0577\u0578\7\5\2\2\u0578")
        buf.write("\u0579\5\u0128\u0095\2\u0579\u057b\3\2\2\2\u057a\u0574")
        buf.write("\3\2\2\2\u057a\u0575\3\2\2\2\u057a\u0576\3\2\2\2\u057b")
        buf.write("\u0127\3\2\2\2\u057c\u057d\5\u012e\u0098\2\u057d\u0129")
        buf.write("\3\2\2\2\u057e\u0583\5\u012c\u0097\2\u057f\u0580\7\5\2")
        buf.write("\2\u0580\u0582\5\u012c\u0097\2\u0581\u057f\3\2\2\2\u0582")
        buf.write("\u0585\3\2\2\2\u0583\u0581\3\2\2\2\u0583\u0584\3\2\2\2")
        buf.write("\u0584\u012b\3\2\2\2\u0585\u0583\3\2\2\2\u0586\u0587\5")
        buf.write("\u012e\u0098\2\u0587\u0588\5\u0130\u0099\2\u0588\u012d")
        buf.write("\3\2\2\2\u0589\u058e\5F$\2\u058a\u058b\7\5\2\2\u058b\u058d")
        buf.write("\5F$\2\u058c\u058a\3\2\2\2\u058d\u0590\3\2\2\2\u058e\u058c")
        buf.write("\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u012f\3\2\2\2\u0590")
        buf.write("\u058e\3\2\2\2\u0591\u0592\t\16\2\2\u0592\u0593\5\u0132")
        buf.write("\u009a\2\u0593\u0131\3\2\2\2\u0594\u0595\7\34\2\2\u0595")
        buf.write("\u0596\5\u0136\u009c\2\u0596\u0597\7\35\2\2\u0597\u05a1")
        buf.write("\3\2\2\2\u0598\u059a\5\u0092J\2\u0599\u0598\3\2\2\2\u059a")
        buf.write("\u059b\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2")
        buf.write("\u059c\u059d\3\2\2\2\u059d\u059e\5\u0132\u009a\2\u059e")
        buf.write("\u05a1\3\2\2\2\u059f\u05a1\5\u0136\u009c\2\u05a0\u0594")
        buf.write("\3\2\2\2\u05a0\u0599\3\2\2\2\u05a0\u059f\3\2\2\2\u05a1")
        buf.write("\u0133\3\2\2\2\u05a2\u05a3\7\34\2\2\u05a3\u05a6\5> \2")
        buf.write("\u05a4\u05a5\7\36\2\2\u05a5\u05a7\5\u0142\u00a2\2\u05a6")
        buf.write("\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2")
        buf.write("\u05a8\u05a9\7\35\2\2\u05a9\u05b1\3\2\2\2\u05aa\u05ab")
        buf.write("\5\u0090I\2\u05ab\u05ae\5> \2\u05ac\u05ad\7\36\2\2\u05ad")
        buf.write("\u05af\5\u0142\u00a2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af")
        buf.write("\3\2\2\2\u05af\u05b1\3\2\2\2\u05b0\u05a2\3\2\2\2\u05b0")
        buf.write("\u05aa\3\2\2\2\u05b1\u0135\3\2\2\2\u05b2\u05b5\5R*\2\u05b3")
        buf.write("\u05b4\7%\2\2\u05b4\u05b6\5\u0142\u00a2\2\u05b5\u05b3")
        buf.write("\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05bd\3\2\2\2\u05b7")
        buf.write("\u05ba\5> \2\u05b8\u05b9\7\36\2\2\u05b9\u05bb\5\u0142")
        buf.write("\u00a2\2\u05ba\u05b8\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb")
        buf.write("\u05bd\3\2\2\2\u05bc\u05b2\3\2\2\2\u05bc\u05b7\3\2\2\2")
        buf.write("\u05bd\u0137\3\2\2\2\u05be\u05c3\5\u0132\u009a\2\u05bf")
        buf.write("\u05c0\7\5\2\2\u05c0\u05c2\5\u0132\u009a\2\u05c1\u05bf")
        buf.write("\3\2\2\2\u05c2\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3")
        buf.write("\u05c4\3\2\2\2\u05c4\u0139\3\2\2\2\u05c5\u05c3\3\2\2\2")
        buf.write("\u05c6\u05c7\b\u009e\1\2\u05c7\u05c8\7\34\2\2\u05c8\u05c9")
        buf.write("\5\u013a\u009e\2\u05c9\u05ca\7\35\2\2\u05ca\u0612\3\2")
        buf.write("\2\2\u05cb\u05cd\5n8\2\u05cc\u05ce\5\u013e\u00a0\2\u05cd")
        buf.write("\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u0612\3\2\2\2")
        buf.write("\u05cf\u05d0\7\34\2\2\u05d0\u05d2\5\u0142\u00a2\2\u05d1")
        buf.write("\u05d3\7\35\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2")
        buf.write("\2\u05d3\u05d4\3\2\2\2\u05d4\u05d6\5n8\2\u05d5\u05d7\5")
        buf.write("\u013e\u00a0\2\u05d6\u05d5\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7\u0612\3\2\2\2\u05d8\u05d9\5p9\2\u05d9\u05da\5\u0142")
        buf.write("\u00a2\2\u05da\u05db\5r:\2\u05db\u0612\3\2\2\2\u05dc\u05dd")
        buf.write("\5\u00b8]\2\u05dd\u05df\7\34\2\2\u05de\u05e0\5\u0142\u00a2")
        buf.write("\2\u05df\u05de\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1")
        buf.write("\3\2\2\2\u05e1\u05e2\7\35\2\2\u05e2\u0612\3\2\2\2\u05e3")
        buf.write("\u05e4\5> \2\u05e4\u05e5\7\37\2\2\u05e5\u05e6\5\u0142")
        buf.write("\u00a2\2\u05e6\u05e7\7 \2\2\u05e7\u0612\3\2\2\2\u05e8")
        buf.write("\u05e9\7x\2\2\u05e9\u05ea\5> \2\u05ea\u05eb\7%\2\2\u05eb")
        buf.write("\u05ec\5\u013a\u009e\r\u05ec\u0612\3\2\2\2\u05ed\u0612")
        buf.write("\5F$\2\u05ee\u05ef\7\62\2\2\u05ef\u05f3\5\u013a\u009e")
        buf.write("\2\u05f0\u05f2\5\u0144\u00a3\2\u05f1\u05f0\3\2\2\2\u05f2")
        buf.write("\u05f5\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4\3\2\2\2")
        buf.write("\u05f4\u05f6\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6\u05f7\7")
        buf.write("(\2\2\u05f7\u05f8\5\u011e\u0090\2\u05f8\u05f9\7\64\2\2")
        buf.write("\u05f9\u0612\3\2\2\2\u05fa\u05fb\7x\2\2\u05fb\u05fc\7")
        buf.write("&\2\2\u05fc\u05fd\7%\2\2\u05fd\u05fe\7y\2\2\u05fe\u0602")
        buf.write("\5\u013a\u009e\2\u05ff\u0601\5\u0144\u00a3\2\u0600\u05ff")
        buf.write("\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602")
        buf.write("\u0603\3\2\2\2\u0603\u0612\3\2\2\2\u0604\u0602\3\2\2\2")
        buf.write("\u0605\u0612\7\u0092\2\2\u0606\u0607\7x\2\2\u0607\u0608")
        buf.write("\5J&\2\u0608\u0609\7%\2\2\u0609\u060a\5\u013a\u009e\7")
        buf.write("\u060a\u0612\3\2\2\2\u060b\u060c\7x\2\2\u060c\u0612\5")
        buf.write("J&\2\u060d\u060e\7x\2\2\u060e\u0612\5\u0132\u009a\2\u060f")
        buf.write("\u0612\5\u014a\u00a6\2\u0610\u0612\7{\2\2\u0611\u05c6")
        buf.write("\3\2\2\2\u0611\u05cb\3\2\2\2\u0611\u05cf\3\2\2\2\u0611")
        buf.write("\u05d8\3\2\2\2\u0611\u05dc\3\2\2\2\u0611\u05e3\3\2\2\2")
        buf.write("\u0611\u05e8\3\2\2\2\u0611\u05ed\3\2\2\2\u0611\u05ee\3")
        buf.write("\2\2\2\u0611\u05fa\3\2\2\2\u0611\u0605\3\2\2\2\u0611\u0606")
        buf.write("\3\2\2\2\u0611\u060b\3\2\2\2\u0611\u060d\3\2\2\2\u0611")
        buf.write("\u060f\3\2\2\2\u0611\u0610\3\2\2\2\u0612\u061d\3\2\2\2")
        buf.write("\u0613\u0614\f\23\2\2\u0614\u0616\5n8\2\u0615\u0617\5")
        buf.write("\u013e\u00a0\2\u0616\u0615\3\2\2\2\u0616\u0617\3\2\2\2")
        buf.write("\u0617\u061c\3\2\2\2\u0618\u0619\f\b\2\2\u0619\u061a\7")
        buf.write("z\2\2\u061a\u061c\5\u0132\u009a\2\u061b\u0613\3\2\2\2")
        buf.write("\u061b\u0618\3\2\2\2\u061c\u061f\3\2\2\2\u061d\u061b\3")
        buf.write("\2\2\2\u061d\u061e\3\2\2\2\u061e\u013b\3\2\2\2\u061f\u061d")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u013d\3\2\2\2\u0622")
        buf.write("\u0628\5\u013a\u009e\2\u0623\u0624\7\34\2\2\u0624\u0625")
        buf.write("\5\u0142\u00a2\2\u0625\u0626\7\35\2\2\u0626\u0628\3\2")
        buf.write("\2\2\u0627\u0622\3\2\2\2\u0627\u0623\3\2\2\2\u0628\u013f")
        buf.write("\3\2\2\2\u0629\u062f\5\u0142\u00a2\2\u062a\u062b\7\34")
        buf.write("\2\2\u062b\u062c\5\u0142\u00a2\2\u062c\u062d\7\35\2\2")
        buf.write("\u062d\u062f\3\2\2\2\u062e\u0629\3\2\2\2\u062e\u062a\3")
        buf.write("\2\2\2\u062f\u0141\3\2\2\2\u0630\u0635\5\u013a\u009e\2")
        buf.write("\u0631\u0632\7\5\2\2\u0632\u0634\5\u013a\u009e\2\u0633")
        buf.write("\u0631\3\2\2\2\u0634\u0637\3\2\2\2\u0635\u0633\3\2\2\2")
        buf.write("\u0635\u0636\3\2\2\2\u0636\u0143\3\2\2\2\u0637\u0635\3")
        buf.write("\2\2\2\u0638\u0639\7|\2\2\u0639\u063e\5\u0146\u00a4\2")
        buf.write("\u063a\u063b\7\5\2\2\u063b\u063d\5\u0146\u00a4\2\u063c")
        buf.write("\u063a\3\2\2\2\u063d\u0640\3\2\2\2\u063e\u063c\3\2\2\2")
        buf.write("\u063e\u063f\3\2\2\2\u063f\u0145\3\2\2\2\u0640\u063e\3")
        buf.write("\2\2\2\u0641\u0646\5\u0148\u00a5\2\u0642\u0643\7\5\2\2")
        buf.write("\u0643\u0645\5\u0148\u00a5\2\u0644\u0642\3\2\2\2\u0645")
        buf.write("\u0648\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2")
        buf.write("\u0647\u064b\3\2\2\2\u0648\u0646\3\2\2\2\u0649\u064a\t")
        buf.write("\17\2\2\u064a\u064c\5\u0132\u009a\2\u064b\u0649\3\2\2")
        buf.write("\2\u064b\u064c\3\2\2\2\u064c\u0147\3\2\2\2\u064d\u064e")
        buf.write("\7\u0091\2\2\u064e\u0149\3\2\2\2\u064f\u0650\t\20\2\2")
        buf.write("\u0650\u014b\3\2\2\2\u009c\u0155\u015d\u016a\u0177\u0181")
        buf.write("\u0187\u0191\u0199\u01b5\u01b7\u01c3\u01c5\u01cd\u01cf")
        buf.write("\u01d7\u01df\u01e5\u01f0\u01f7\u01fe\u0203\u020f\u0219")
        buf.write("\u0221\u022d\u023a\u023e\u0246\u024b\u0251\u025d\u0263")
        buf.write("\u0267\u026f\u0275\u0277\u027e\u0283\u028f\u0293\u029a")
        buf.write("\u029e\u02a2\u02a8\u02b9\u02c5\u02cc\u02d0\u02d4\u02f2")
        buf.write("\u0309\u030e\u031a\u031e\u0321\u0334\u0348\u034b\u0360")
        buf.write("\u0367\u0380\u0383\u0390\u0399\u03a0\u03a5\u03b0\u03b5")
        buf.write("\u03be\u03c3\u03ce\u03e4\u03eb\u03f2\u03f6\u03fe\u0400")
        buf.write("\u0405\u040a\u0414\u0419\u0422\u0428\u042e\u0435\u0443")
        buf.write("\u044a\u044d\u0456\u045e\u0468\u046b\u046f\u0475\u048b")
        buf.write("\u0490\u0494\u049a\u04a6\u04ad\u04b6\u04ba\u04c2\u04ca")
        buf.write("\u04d1\u04d6\u04da\u04e5\u04eb\u04ef\u0503\u0509\u051a")
        buf.write("\u0532\u0534\u0538\u053c\u0540\u0544\u054b\u0551\u055a")
        buf.write("\u0560\u0566\u056b\u0572\u057a\u0583\u058e\u059b\u05a0")
        buf.write("\u05a6\u05ae\u05b0\u05b5\u05ba\u05bc\u05c3\u05cd\u05d2")
        buf.write("\u05d6\u05df\u05f3\u0602\u0611\u0616\u061b\u061d\u0627")
        buf.write("\u062e\u0635\u063e\u0646\u064b")
        return buf.getvalue()


class MizarParser ( Parser ):

    grammarFileName = "Mizar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'environ'", "'vocabularies'", "','", 
                     "';'", "'notations'", "'constructors'", "'registrations'", 
                     "'definitions'", "'expansions'", "'equalities'", "'theorems'", 
                     "'schemes'", "'requirements'", "'begin'", "'reserve'", 
                     "'for'", "'; '", "'definition'", "'end'", "'registration'", 
                     "'notation'", "'let'", "'such'", "'redefine'", "'struct'", 
                     "'('", "')'", "'over'", "'(#'", "'#)'", "'->'", "'mode'", 
                     "'means'", "'is'", "'of'", "'set'", "'synonym'", "':'", 
                     "'otherwise'", "'if'", "'sethood'", "'func'", "'equals'", 
                     "'commutativity'", "'idempotence'", "'involutiveness'", 
                     "'projectivity'", "'{'", "'['", "'}'", "']'", "'pred'", 
                     "'symmetry'", "'asymmetry'", "'connectedness'", "'reflexivity'", 
                     "'irreflexivity'", "'antonym'", "'='", "'attr'", "'cluster'", 
                     "'non'", "'identify'", "'with'", "'when'", "'reduce'", 
                     "'to'", "'correctness'", "'existence'", "'uniqueness'", 
                     "'coherence'", "'compatibility'", "'consistency'", 
                     "'reducibility'", "'theorem'", "'scheme'", "'provided'", 
                     "'and'", "'proof'", "'deffunc'", "'defpred'", "'then'", 
                     "'per'", "'cases'", "'case'", "'suppose'", "'assume'", 
                     "'given'", "'thus'", "'hence'", "'hereby'", "'take'", 
                     "'consider'", "'reconsider'", "'as'", "'.='", "'now'", 
                     "'by'", "'from'", "'def'", "'sch'", "'that'", "'&'", 
                     "'...'", "'or'", "'implies'", "'iff'", "'not'", "'contradiction'", 
                     "'thesis'", "'does'", "'do'", "'st'", "'holds'", "'ex'", 
                     "'being'", "'be'", "'the'", "'all'", "'qua'", "'it'", 
                     "'where'", "'are'", "'$1'", "'$2'", "'$3'", "'$4'", 
                     "'$5'", "'$6'", "'$7'", "'$8'", "'$9'", "'$10'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "PREDICATE_SYMBOL", "FUNCTOR_SYMBOL", 
                      "MODE_SYMBOL", "STRUCTURE_SYMBOL", "SELECTOR_SYMBOL", 
                      "ATTRIBUTE_SYMBOL", "LEFT_FUNCTOR_SYMBOL", "RIGHT_FUNCTOR_SYMBOL", 
                      "FILE_NAME", "IDENTIFIER", "NUMERAL", "WHITE_SPACE" ]

    RULE_article = 0
    RULE_environment_declaration = 1
    RULE_directive = 2
    RULE_vocabulary_directive = 3
    RULE_vocabulary_name = 4
    RULE_library_directive = 5
    RULE_article_name = 6
    RULE_requirement_directive = 7
    RULE_requirement = 8
    RULE_text_proper = 9
    RULE_section = 10
    RULE_text_item = 11
    RULE_reservation = 12
    RULE_reservation_segment = 13
    RULE_reserved_identifiers = 14
    RULE_reserved_identifier = 15
    RULE_definitional_item = 16
    RULE_registration_item = 17
    RULE_notation_item = 18
    RULE_definitional_block = 19
    RULE_registration_block = 20
    RULE_notation_block = 21
    RULE_definition_item = 22
    RULE_notation_declaration = 23
    RULE_loci_declaration = 24
    RULE_permissive_assumption = 25
    RULE_definition = 26
    RULE_redefinition = 27
    RULE_structure_definition = 28
    RULE_ancestors = 29
    RULE_structure_symbol = 30
    RULE_loci = 31
    RULE_fields = 32
    RULE_locus = 33
    RULE_variable_identifier = 34
    RULE_field_segment = 35
    RULE_selector_symbol = 36
    RULE_specification = 37
    RULE_mode_definition = 38
    RULE_mode_pattern = 39
    RULE_mode_symbol = 40
    RULE_mode_synonym = 41
    RULE_definiens = 42
    RULE_simple_definiens = 43
    RULE_label_identifier = 44
    RULE_conditional_definiens = 45
    RULE_partial_definiens_list = 46
    RULE_partial_definiens = 47
    RULE_mode_property = 48
    RULE_functor_definition = 49
    RULE_functor_pattern = 50
    RULE_functor_property = 51
    RULE_functor_synonym = 52
    RULE_functor_loci = 53
    RULE_functor_symbol = 54
    RULE_left_functor_bracket = 55
    RULE_right_functor_bracket = 56
    RULE_predicate_definition = 57
    RULE_predicate_pattern = 58
    RULE_predicate_property = 59
    RULE_predicate_synonym = 60
    RULE_predicate_antonym = 61
    RULE_predicate_symbol = 62
    RULE_attribute_definition = 63
    RULE_attribute_pattern = 64
    RULE_attribute_synonym = 65
    RULE_attribute_antonym = 66
    RULE_attribute_symbol = 67
    RULE_attribute_loci = 68
    RULE_cluster_registration = 69
    RULE_existential_registration = 70
    RULE_adjective_cluster = 71
    RULE_adjective = 72
    RULE_conditional_registration = 73
    RULE_functorial_registration = 74
    RULE_identify_registration = 75
    RULE_property_registration = 76
    RULE_reduction_registration = 77
    RULE_correctness_conditions = 78
    RULE_correctness_condition = 79
    RULE_theorem = 80
    RULE_scheme_item = 81
    RULE_scheme_block = 82
    RULE_scheme_identifier = 83
    RULE_scheme_parameters = 84
    RULE_scheme_conclusion = 85
    RULE_scheme_premise = 86
    RULE_scheme_segment = 87
    RULE_predicate_segment = 88
    RULE_predicate_identifier = 89
    RULE_functor_segment = 90
    RULE_functor_identifier = 91
    RULE_auxiliary_item = 92
    RULE_private_definition = 93
    RULE_constant_definition = 94
    RULE_equating_list = 95
    RULE_equating = 96
    RULE_private_functor_definition = 97
    RULE_private_predicate_definition = 98
    RULE_private_functor_pattern = 99
    RULE_private_predicate_pattern = 100
    RULE_reasoning = 101
    RULE_case_list = 102
    RULE_case = 103
    RULE_suppose_list = 104
    RULE_suppose = 105
    RULE_reasoning_item = 106
    RULE_skeleton_item = 107
    RULE_generalization = 108
    RULE_assumption = 109
    RULE_single_assumption = 110
    RULE_collective_assumption = 111
    RULE_existential_assumption = 112
    RULE_conclusion = 113
    RULE_diffuse_conclusion = 114
    RULE_exemplification = 115
    RULE_example = 116
    RULE_statement = 117
    RULE_linkable_statement = 118
    RULE_compact_statement = 119
    RULE_choice_statement = 120
    RULE_type_changing_statement = 121
    RULE_type_change_list = 122
    RULE_iterative_equality = 123
    RULE_diffuse_statement = 124
    RULE_justification = 125
    RULE_simple_justification = 126
    RULE_proof = 127
    RULE_straightforward_justification = 128
    RULE_scheme_justification = 129
    RULE_references = 130
    RULE_reference = 131
    RULE_scheme_reference = 132
    RULE_local_reference = 133
    RULE_local_scheme_reference = 134
    RULE_library_reference = 135
    RULE_library_scheme_reference = 136
    RULE_theorem_number = 137
    RULE_definition_number = 138
    RULE_scheme_number = 139
    RULE_conditions = 140
    RULE_proposition = 141
    RULE_sentence = 142
    RULE_formula_expression = 143
    RULE_atomic_formula_expression = 144
    RULE_quantified_formula_expression = 145
    RULE_qualified_variables = 146
    RULE_implicitly_qualified_variables = 147
    RULE_explicitly_qualified_variables = 148
    RULE_qualified_segment = 149
    RULE_variables = 150
    RULE_qualification = 151
    RULE_type_expression = 152
    RULE_structure_type_expression = 153
    RULE_radix_type = 154
    RULE_type_expression_list = 155
    RULE_term_expression = 156
    RULE_term_expression_impl = 157
    RULE_arguments = 158
    RULE_adjective_arguments = 159
    RULE_term_expression_list = 160
    RULE_postqualification = 161
    RULE_postqualifying_segment = 162
    RULE_postqualified_variable = 163
    RULE_private_definition_parameter = 164

    ruleNames =  [ "article", "environment_declaration", "directive", "vocabulary_directive", 
                   "vocabulary_name", "library_directive", "article_name", 
                   "requirement_directive", "requirement", "text_proper", 
                   "section", "text_item", "reservation", "reservation_segment", 
                   "reserved_identifiers", "reserved_identifier", "definitional_item", 
                   "registration_item", "notation_item", "definitional_block", 
                   "registration_block", "notation_block", "definition_item", 
                   "notation_declaration", "loci_declaration", "permissive_assumption", 
                   "definition", "redefinition", "structure_definition", 
                   "ancestors", "structure_symbol", "loci", "fields", "locus", 
                   "variable_identifier", "field_segment", "selector_symbol", 
                   "specification", "mode_definition", "mode_pattern", "mode_symbol", 
                   "mode_synonym", "definiens", "simple_definiens", "label_identifier", 
                   "conditional_definiens", "partial_definiens_list", "partial_definiens", 
                   "mode_property", "functor_definition", "functor_pattern", 
                   "functor_property", "functor_synonym", "functor_loci", 
                   "functor_symbol", "left_functor_bracket", "right_functor_bracket", 
                   "predicate_definition", "predicate_pattern", "predicate_property", 
                   "predicate_synonym", "predicate_antonym", "predicate_symbol", 
                   "attribute_definition", "attribute_pattern", "attribute_synonym", 
                   "attribute_antonym", "attribute_symbol", "attribute_loci", 
                   "cluster_registration", "existential_registration", "adjective_cluster", 
                   "adjective", "conditional_registration", "functorial_registration", 
                   "identify_registration", "property_registration", "reduction_registration", 
                   "correctness_conditions", "correctness_condition", "theorem", 
                   "scheme_item", "scheme_block", "scheme_identifier", "scheme_parameters", 
                   "scheme_conclusion", "scheme_premise", "scheme_segment", 
                   "predicate_segment", "predicate_identifier", "functor_segment", 
                   "functor_identifier", "auxiliary_item", "private_definition", 
                   "constant_definition", "equating_list", "equating", "private_functor_definition", 
                   "private_predicate_definition", "private_functor_pattern", 
                   "private_predicate_pattern", "reasoning", "case_list", 
                   "case", "suppose_list", "suppose", "reasoning_item", 
                   "skeleton_item", "generalization", "assumption", "single_assumption", 
                   "collective_assumption", "existential_assumption", "conclusion", 
                   "diffuse_conclusion", "exemplification", "example", "statement", 
                   "linkable_statement", "compact_statement", "choice_statement", 
                   "type_changing_statement", "type_change_list", "iterative_equality", 
                   "diffuse_statement", "justification", "simple_justification", 
                   "proof", "straightforward_justification", "scheme_justification", 
                   "references", "reference", "scheme_reference", "local_reference", 
                   "local_scheme_reference", "library_reference", "library_scheme_reference", 
                   "theorem_number", "definition_number", "scheme_number", 
                   "conditions", "proposition", "sentence", "formula_expression", 
                   "atomic_formula_expression", "quantified_formula_expression", 
                   "qualified_variables", "implicitly_qualified_variables", 
                   "explicitly_qualified_variables", "qualified_segment", 
                   "variables", "qualification", "type_expression", "structure_type_expression", 
                   "radix_type", "type_expression_list", "term_expression", 
                   "term_expression_impl", "arguments", "adjective_arguments", 
                   "term_expression_list", "postqualification", "postqualifying_segment", 
                   "postqualified_variable", "private_definition_parameter" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    PREDICATE_SYMBOL=134
    FUNCTOR_SYMBOL=135
    MODE_SYMBOL=136
    STRUCTURE_SYMBOL=137
    SELECTOR_SYMBOL=138
    ATTRIBUTE_SYMBOL=139
    LEFT_FUNCTOR_SYMBOL=140
    RIGHT_FUNCTOR_SYMBOL=141
    FILE_NAME=142
    IDENTIFIER=143
    NUMERAL=144
    WHITE_SPACE=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ArticleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def environment_declaration(self):
            return self.getTypedRuleContext(MizarParser.Environment_declarationContext,0)


        def text_proper(self):
            return self.getTypedRuleContext(MizarParser.Text_properContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_article

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticle" ):
                listener.enterArticle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticle" ):
                listener.exitArticle(self)




    def article(self):

        localctx = MizarParser.ArticleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_article)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.environment_declaration()
            self.state = 331
            self.text_proper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Environment_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MizarParser.RULE_environment_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironment_declaration" ):
                listener.enterEnvironment_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironment_declaration" ):
                listener.exitEnvironment_declaration(self)




    def environment_declaration(self):

        localctx = MizarParser.Environment_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_environment_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(MizarParser.T__0)
             directive 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabulary_directive(self):
            return self.getTypedRuleContext(MizarParser.Vocabulary_directiveContext,0)


        def library_directive(self):
            return self.getTypedRuleContext(MizarParser.Library_directiveContext,0)


        def requirement_directive(self):
            return self.getTypedRuleContext(MizarParser.Requirement_directiveContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)




    def directive(self):

        localctx = MizarParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_directive)
        try:
            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.vocabulary_directive()
                pass
            elif token in [MizarParser.T__4, MizarParser.T__5, MizarParser.T__6, MizarParser.T__7, MizarParser.T__8, MizarParser.T__9, MizarParser.T__10, MizarParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.library_directive()
                pass
            elif token in [MizarParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.requirement_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vocabulary_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vocabulary_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Vocabulary_nameContext)
            else:
                return self.getTypedRuleContext(MizarParser.Vocabulary_nameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_vocabulary_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVocabulary_directive" ):
                listener.enterVocabulary_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVocabulary_directive" ):
                listener.exitVocabulary_directive(self)




    def vocabulary_directive(self):

        localctx = MizarParser.Vocabulary_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_vocabulary_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(MizarParser.T__1)
            self.state = 342
            self.vocabulary_name()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 343
                self.match(MizarParser.T__2)
                self.state = 344
                self.vocabulary_name()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vocabulary_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_vocabulary_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVocabulary_name" ):
                listener.enterVocabulary_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVocabulary_name" ):
                listener.exitVocabulary_name(self)




    def vocabulary_name(self):

        localctx = MizarParser.Vocabulary_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vocabulary_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Article_nameContext)
            else:
                return self.getTypedRuleContext(MizarParser.Article_nameContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_library_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary_directive" ):
                listener.enterLibrary_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary_directive" ):
                listener.exitLibrary_directive(self)




    def library_directive(self):

        localctx = MizarParser.Library_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_library_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__4) | (1 << MizarParser.T__5) | (1 << MizarParser.T__6) | (1 << MizarParser.T__7) | (1 << MizarParser.T__8) | (1 << MizarParser.T__9) | (1 << MizarParser.T__10) | (1 << MizarParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 355
            self.article_name()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 356
                self.match(MizarParser.T__2)
                self.state = 357
                self.article_name()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Article_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_article_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticle_name" ):
                listener.enterArticle_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticle_name" ):
                listener.exitArticle_name(self)




    def article_name(self):

        localctx = MizarParser.Article_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_article_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Requirement_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RequirementContext)
            else:
                return self.getTypedRuleContext(MizarParser.RequirementContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_requirement_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement_directive" ):
                listener.enterRequirement_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement_directive" ):
                listener.exitRequirement_directive(self)




    def requirement_directive(self):

        localctx = MizarParser.Requirement_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_requirement_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(MizarParser.T__12)
            self.state = 368
            self.requirement()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 369
                self.match(MizarParser.T__2)
                self.state = 370
                self.requirement()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 376
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_NAME(self):
            return self.getToken(MizarParser.FILE_NAME, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = MizarParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(MizarParser.FILE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Text_properContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SectionContext)
            else:
                return self.getTypedRuleContext(MizarParser.SectionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_text_proper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText_proper" ):
                listener.enterText_proper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText_proper" ):
                listener.exitText_proper(self)




    def text_proper(self):

        localctx = MizarParser.Text_properContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_text_proper)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 380
                self.section()
                self.state = 383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__13):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def text_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Text_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Text_itemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection" ):
                listener.enterSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection" ):
                listener.exitSection(self)




    def section(self):

        localctx = MizarParser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(MizarParser.T__13)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__14) | (1 << MizarParser.T__15) | (1 << MizarParser.T__17) | (1 << MizarParser.T__19) | (1 << MizarParser.T__20) | (1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__58))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (MizarParser.T__74 - 75)) | (1 << (MizarParser.T__75 - 75)) | (1 << (MizarParser.T__79 - 75)) | (1 << (MizarParser.T__80 - 75)) | (1 << (MizarParser.T__81 - 75)) | (1 << (MizarParser.T__92 - 75)) | (1 << (MizarParser.T__93 - 75)) | (1 << (MizarParser.T__96 - 75)) | (1 << (MizarParser.T__107 - 75)) | (1 << (MizarParser.T__108 - 75)) | (1 << (MizarParser.T__109 - 75)) | (1 << (MizarParser.T__110 - 75)) | (1 << (MizarParser.T__111 - 75)) | (1 << (MizarParser.T__114 - 75)) | (1 << (MizarParser.T__117 - 75)) | (1 << (MizarParser.T__120 - 75)) | (1 << (MizarParser.T__123 - 75)) | (1 << (MizarParser.T__124 - 75)) | (1 << (MizarParser.T__125 - 75)) | (1 << (MizarParser.T__126 - 75)) | (1 << (MizarParser.T__127 - 75)) | (1 << (MizarParser.T__128 - 75)) | (1 << (MizarParser.T__129 - 75)) | (1 << (MizarParser.T__130 - 75)) | (1 << (MizarParser.T__131 - 75)) | (1 << (MizarParser.T__132 - 75)) | (1 << (MizarParser.PREDICATE_SYMBOL - 75)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 75)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 75)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 140)) | (1 << (MizarParser.IDENTIFIER - 140)) | (1 << (MizarParser.NUMERAL - 140)))) != 0):
                self.state = 386
                self.text_item()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Text_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservation(self):
            return self.getTypedRuleContext(MizarParser.ReservationContext,0)


        def definitional_item(self):
            return self.getTypedRuleContext(MizarParser.Definitional_itemContext,0)


        def registration_item(self):
            return self.getTypedRuleContext(MizarParser.Registration_itemContext,0)


        def notation_item(self):
            return self.getTypedRuleContext(MizarParser.Notation_itemContext,0)


        def theorem(self):
            return self.getTypedRuleContext(MizarParser.TheoremContext,0)


        def scheme_item(self):
            return self.getTypedRuleContext(MizarParser.Scheme_itemContext,0)


        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_text_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText_item" ):
                listener.enterText_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText_item" ):
                listener.exitText_item(self)




    def text_item(self):

        localctx = MizarParser.Text_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_text_item)
        try:
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.reservation()
                pass
            elif token in [MizarParser.T__17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.definitional_item()
                pass
            elif token in [MizarParser.T__19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 394
                self.registration_item()
                pass
            elif token in [MizarParser.T__20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 395
                self.notation_item()
                pass
            elif token in [MizarParser.T__74]:
                self.enterOuterAlt(localctx, 5)
                self.state = 396
                self.theorem()
                pass
            elif token in [MizarParser.T__75]:
                self.enterOuterAlt(localctx, 6)
                self.state = 397
                self.scheme_item()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__35, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__79, MizarParser.T__80, MizarParser.T__81, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 398
                self.auxiliary_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservation_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reservation_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reservation_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reservation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservation" ):
                listener.enterReservation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservation" ):
                listener.exitReservation(self)




    def reservation(self):

        localctx = MizarParser.ReservationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_reservation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(MizarParser.T__14)
            self.state = 402
            self.reservation_segment()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 403
                self.match(MizarParser.T__2)
                self.state = 404
                self.reservation_segment()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reservation_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reserved_identifiers(self):
            return self.getTypedRuleContext(MizarParser.Reserved_identifiersContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reservation_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservation_segment" ):
                listener.enterReservation_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservation_segment" ):
                listener.exitReservation_segment(self)




    def reservation_segment(self):

        localctx = MizarParser.Reservation_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_reservation_segment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.reserved_identifiers()
            self.state = 413
            self.match(MizarParser.T__15)
            self.state = 414
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_identifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reserved_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reserved_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reserved_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_reserved_identifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_identifiers" ):
                listener.enterReserved_identifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_identifiers" ):
                listener.exitReserved_identifiers(self)




    def reserved_identifiers(self):

        localctx = MizarParser.Reserved_identifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reserved_identifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.reserved_identifier()

            self.state = 417
            self.match(MizarParser.T__2)
            self.state = 418
            self.reserved_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_reserved_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_identifier" ):
                listener.enterReserved_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_identifier" ):
                listener.exitReserved_identifier(self)




    def reserved_identifier(self):

        localctx = MizarParser.Reserved_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_reserved_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definitional_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definitional_block(self):
            return self.getTypedRuleContext(MizarParser.Definitional_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definitional_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitional_item" ):
                listener.enterDefinitional_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitional_item" ):
                listener.exitDefinitional_item(self)




    def definitional_item(self):

        localctx = MizarParser.Definitional_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_definitional_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.definitional_block()
            self.state = 423
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Registration_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def registration_block(self):
            return self.getTypedRuleContext(MizarParser.Registration_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_registration_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegistration_item" ):
                listener.enterRegistration_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegistration_item" ):
                listener.exitRegistration_item(self)




    def registration_item(self):

        localctx = MizarParser.Registration_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_registration_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.registration_block()
            self.state = 426
            self.match(MizarParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notation_block(self):
            return self.getTypedRuleContext(MizarParser.Notation_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotation_item" ):
                listener.enterNotation_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotation_item" ):
                listener.exitNotation_item(self)




    def notation_item(self):

        localctx = MizarParser.Notation_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_notation_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.notation_block()
            self.state = 429
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definitional_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definition_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Definition_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Definition_itemContext,i)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.DefinitionContext,i)


        def redefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.RedefinitionContext)
            else:
                return self.getTypedRuleContext(MizarParser.RedefinitionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_definitional_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitional_block" ):
                listener.enterDefinitional_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitional_block" ):
                listener.exitDefinitional_block(self)




    def definitional_block(self):

        localctx = MizarParser.Definitional_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_definitional_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(MizarParser.T__17)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__15) | (1 << MizarParser.T__21) | (1 << MizarParser.T__23) | (1 << MizarParser.T__24) | (1 << MizarParser.T__25) | (1 << MizarParser.T__31) | (1 << MizarParser.T__35) | (1 << MizarParser.T__41) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__51) | (1 << MizarParser.T__58) | (1 << MizarParser.T__59))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (MizarParser.T__79 - 80)) | (1 << (MizarParser.T__80 - 80)) | (1 << (MizarParser.T__81 - 80)) | (1 << (MizarParser.T__86 - 80)) | (1 << (MizarParser.T__87 - 80)) | (1 << (MizarParser.T__92 - 80)) | (1 << (MizarParser.T__93 - 80)) | (1 << (MizarParser.T__96 - 80)) | (1 << (MizarParser.T__107 - 80)) | (1 << (MizarParser.T__108 - 80)) | (1 << (MizarParser.T__109 - 80)) | (1 << (MizarParser.T__110 - 80)) | (1 << (MizarParser.T__111 - 80)) | (1 << (MizarParser.T__114 - 80)) | (1 << (MizarParser.T__117 - 80)) | (1 << (MizarParser.T__120 - 80)) | (1 << (MizarParser.T__123 - 80)) | (1 << (MizarParser.T__124 - 80)) | (1 << (MizarParser.T__125 - 80)) | (1 << (MizarParser.T__126 - 80)) | (1 << (MizarParser.T__127 - 80)) | (1 << (MizarParser.T__128 - 80)) | (1 << (MizarParser.T__129 - 80)) | (1 << (MizarParser.T__130 - 80)) | (1 << (MizarParser.T__131 - 80)) | (1 << (MizarParser.T__132 - 80)) | (1 << (MizarParser.PREDICATE_SYMBOL - 80)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 80)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 80)) | (1 << (MizarParser.IDENTIFIER - 80)))) != 0) or _la==MizarParser.NUMERAL:
                self.state = 435
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__15, MizarParser.T__21, MizarParser.T__25, MizarParser.T__35, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__79, MizarParser.T__80, MizarParser.T__81, MizarParser.T__86, MizarParser.T__87, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 432
                    self.definition_item()
                    pass
                elif token in [MizarParser.T__24, MizarParser.T__31, MizarParser.T__41, MizarParser.T__51, MizarParser.T__59]:
                    self.state = 433
                    self.definition()
                    pass
                elif token in [MizarParser.T__23]:
                    self.state = 434
                    self.redefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 440
            self.match(MizarParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Registration_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Loci_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Loci_declarationContext,i)


        def cluster_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Cluster_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Cluster_registrationContext,i)


        def identify_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Identify_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Identify_registrationContext,i)


        def property_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Property_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Property_registrationContext,i)


        def reduction_registration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reduction_registrationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reduction_registrationContext,i)


        def auxiliary_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Auxiliary_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_registration_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegistration_block" ):
                listener.enterRegistration_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegistration_block" ):
                listener.exitRegistration_block(self)




    def registration_block(self):

        localctx = MizarParser.Registration_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_registration_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(MizarParser.T__19)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__15) | (1 << MizarParser.T__21) | (1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__40) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__58) | (1 << MizarParser.T__60) | (1 << MizarParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (MizarParser.T__65 - 66)) | (1 << (MizarParser.T__79 - 66)) | (1 << (MizarParser.T__80 - 66)) | (1 << (MizarParser.T__81 - 66)) | (1 << (MizarParser.T__92 - 66)) | (1 << (MizarParser.T__93 - 66)) | (1 << (MizarParser.T__96 - 66)) | (1 << (MizarParser.T__107 - 66)) | (1 << (MizarParser.T__108 - 66)) | (1 << (MizarParser.T__109 - 66)) | (1 << (MizarParser.T__110 - 66)) | (1 << (MizarParser.T__111 - 66)) | (1 << (MizarParser.T__114 - 66)) | (1 << (MizarParser.T__117 - 66)) | (1 << (MizarParser.T__120 - 66)) | (1 << (MizarParser.T__123 - 66)) | (1 << (MizarParser.T__124 - 66)) | (1 << (MizarParser.T__125 - 66)) | (1 << (MizarParser.T__126 - 66)) | (1 << (MizarParser.T__127 - 66)) | (1 << (MizarParser.T__128 - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (MizarParser.T__129 - 130)) | (1 << (MizarParser.T__130 - 130)) | (1 << (MizarParser.T__131 - 130)) | (1 << (MizarParser.T__132 - 130)) | (1 << (MizarParser.PREDICATE_SYMBOL - 130)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 130)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 130)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 130)) | (1 << (MizarParser.IDENTIFIER - 130)) | (1 << (MizarParser.NUMERAL - 130)))) != 0):
                self.state = 449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__21]:
                    self.state = 443
                    self.loci_declaration()
                    pass
                elif token in [MizarParser.T__60]:
                    self.state = 444
                    self.cluster_registration()
                    pass
                elif token in [MizarParser.T__62]:
                    self.state = 445
                    self.identify_registration()
                    pass
                elif token in [MizarParser.T__40]:
                    self.state = 446
                    self.property_registration()
                    pass
                elif token in [MizarParser.T__65]:
                    self.state = 447
                    self.reduction_registration()
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__35, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__79, MizarParser.T__80, MizarParser.T__81, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                    self.state = 448
                    self.auxiliary_item()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 454
            self.match(MizarParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Loci_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Loci_declarationContext,i)


        def notation_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Notation_declarationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Notation_declarationContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotation_block" ):
                listener.enterNotation_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotation_block" ):
                listener.exitNotation_block(self)




    def notation_block(self):

        localctx = MizarParser.Notation_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_notation_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(MizarParser.T__20)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__21) | (1 << MizarParser.T__36) | (1 << MizarParser.T__57))) != 0):
                self.state = 459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__21]:
                    self.state = 457
                    self.loci_declaration()
                    pass
                elif token in [MizarParser.T__36, MizarParser.T__57]:
                    self.state = 458
                    self.notation_declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 464
            self.match(MizarParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definition_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci_declaration(self):
            return self.getTypedRuleContext(MizarParser.Loci_declarationContext,0)


        def permissive_assumption(self):
            return self.getTypedRuleContext(MizarParser.Permissive_assumptionContext,0)


        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definition_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition_item" ):
                listener.enterDefinition_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition_item" ):
                listener.exitDefinition_item(self)




    def definition_item(self):

        localctx = MizarParser.Definition_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_definition_item)
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.loci_declaration()
                pass
            elif token in [MizarParser.T__86, MizarParser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.permissive_assumption()
                pass
            elif token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__35, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__79, MizarParser.T__80, MizarParser.T__81, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 468
                self.auxiliary_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Notation_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_synonym(self):
            return self.getTypedRuleContext(MizarParser.Attribute_synonymContext,0)


        def attribute_antonym(self):
            return self.getTypedRuleContext(MizarParser.Attribute_antonymContext,0)


        def functor_synonym(self):
            return self.getTypedRuleContext(MizarParser.Functor_synonymContext,0)


        def mode_synonym(self):
            return self.getTypedRuleContext(MizarParser.Mode_synonymContext,0)


        def predicate_synonym(self):
            return self.getTypedRuleContext(MizarParser.Predicate_synonymContext,0)


        def predicate_antonym(self):
            return self.getTypedRuleContext(MizarParser.Predicate_antonymContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_notation_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotation_declaration" ):
                listener.enterNotation_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotation_declaration" ):
                listener.exitNotation_declaration(self)




    def notation_declaration(self):

        localctx = MizarParser.Notation_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_notation_declaration)
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.attribute_synonym()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.attribute_antonym()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.functor_synonym()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 474
                self.mode_synonym()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.predicate_synonym()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 476
                self.predicate_antonym()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loci_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_loci_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoci_declaration" ):
                listener.enterLoci_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoci_declaration" ):
                listener.exitLoci_declaration(self)




    def loci_declaration(self):

        localctx = MizarParser.Loci_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_loci_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(MizarParser.T__21)
            self.state = 480
            self.qualified_variables()
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__22:
                self.state = 481
                self.match(MizarParser.T__22)
                self.state = 482
                self.conditions()


            self.state = 485
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Permissive_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_permissive_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermissive_assumption" ):
                listener.enterPermissive_assumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermissive_assumption" ):
                listener.exitPermissive_assumption(self)




    def permissive_assumption(self):

        localctx = MizarParser.Permissive_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_permissive_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.assumption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_definition(self):
            return self.getTypedRuleContext(MizarParser.Structure_definitionContext,0)


        def mode_definition(self):
            return self.getTypedRuleContext(MizarParser.Mode_definitionContext,0)


        def functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Functor_definitionContext,0)


        def predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Predicate_definitionContext,0)


        def attribute_definition(self):
            return self.getTypedRuleContext(MizarParser.Attribute_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = MizarParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_definition)
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.structure_definition()
                pass
            elif token in [MizarParser.T__31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.mode_definition()
                pass
            elif token in [MizarParser.T__41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.functor_definition()
                pass
            elif token in [MizarParser.T__51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.predicate_definition()
                pass
            elif token in [MizarParser.T__59]:
                self.enterOuterAlt(localctx, 5)
                self.state = 493
                self.attribute_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_definition(self):
            return self.getTypedRuleContext(MizarParser.Mode_definitionContext,0)


        def functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Functor_definitionContext,0)


        def predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Predicate_definitionContext,0)


        def attribute_definition(self):
            return self.getTypedRuleContext(MizarParser.Attribute_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_redefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedefinition" ):
                listener.enterRedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedefinition" ):
                listener.exitRedefinition(self)




    def redefinition(self):

        localctx = MizarParser.RedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_redefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(MizarParser.T__23)
            self.state = 501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__31]:
                self.state = 497
                self.mode_definition()
                pass
            elif token in [MizarParser.T__41]:
                self.state = 498
                self.functor_definition()
                pass
            elif token in [MizarParser.T__51]:
                self.state = 499
                self.predicate_definition()
                pass
            elif token in [MizarParser.T__59]:
                self.state = 500
                self.attribute_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def fields(self):
            return self.getTypedRuleContext(MizarParser.FieldsContext,0)


        def ancestors(self):
            return self.getTypedRuleContext(MizarParser.AncestorsContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structure_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructure_definition" ):
                listener.enterStructure_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructure_definition" ):
                listener.exitStructure_definition(self)




    def structure_definition(self):

        localctx = MizarParser.Structure_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structure_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(MizarParser.T__24)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__25:
                self.state = 504
                self.match(MizarParser.T__25)
                self.state = 505
                self.ancestors()
                self.state = 506
                self.match(MizarParser.T__26)


            self.state = 510
            self.structure_symbol()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__27:
                self.state = 511
                self.match(MizarParser.T__27)
                self.state = 512
                self.loci()


            self.state = 515
            self.match(MizarParser.T__28)
            self.state = 516
            self.fields()
            self.state = 517
            self.match(MizarParser.T__29)
            self.state = 518
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AncestorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_type_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Structure_type_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Structure_type_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_ancestors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAncestors" ):
                listener.enterAncestors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAncestors" ):
                listener.exitAncestors(self)




    def ancestors(self):

        localctx = MizarParser.AncestorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ancestors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.structure_type_expression()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 521
                self.match(MizarParser.T__2)
                self.state = 522
                self.structure_type_expression()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTURE_SYMBOL(self):
            return self.getToken(MizarParser.STRUCTURE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_structure_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructure_symbol" ):
                listener.enterStructure_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructure_symbol" ):
                listener.exitStructure_symbol(self)




    def structure_symbol(self):

        localctx = MizarParser.Structure_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structure_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(MizarParser.STRUCTURE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_loci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoci" ):
                listener.enterLoci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoci" ):
                listener.exitLoci(self)




    def loci(self):

        localctx = MizarParser.LociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_loci)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.locus()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 531
                self.match(MizarParser.T__2)
                self.state = 532
                self.locus()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Field_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Field_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFields" ):
                listener.enterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFields" ):
                listener.exitFields(self)




    def fields(self):

        localctx = MizarParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.field_segment()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 539
                self.match(MizarParser.T__2)
                self.state = 540
                self.field_segment()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_locus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocus" ):
                listener.enterLocus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocus" ):
                listener.exitLocus(self)




    def locus(self):

        localctx = MizarParser.LocusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_locus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier" ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier" ):
                listener.exitVariable_identifier(self)




    def variable_identifier(self):

        localctx = MizarParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Selector_symbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.Selector_symbolContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_field_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_segment" ):
                listener.enterField_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_segment" ):
                listener.exitField_segment(self)




    def field_segment(self):

        localctx = MizarParser.Field_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_field_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.selector_symbol()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 551
                self.match(MizarParser.T__2)
                self.state = 552
                self.selector_symbol()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 558
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECTOR_SYMBOL(self):
            return self.getToken(MizarParser.SELECTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_selector_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_symbol" ):
                listener.enterSelector_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_symbol" ):
                listener.exitSelector_symbol(self)




    def selector_symbol(self):

        localctx = MizarParser.Selector_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_selector_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(MizarParser.SELECTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecification" ):
                listener.enterSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecification" ):
                listener.exitSpecification(self)




    def specification(self):

        localctx = MizarParser.SpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(MizarParser.T__30)
            self.state = 563
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_pattern(self):
            return self.getTypedRuleContext(MizarParser.Mode_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def mode_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Mode_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Mode_propertyContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMode_definition" ):
                listener.enterMode_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMode_definition" ):
                listener.exitMode_definition(self)




    def mode_definition(self):

        localctx = MizarParser.Mode_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mode_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MizarParser.T__31)
            self.state = 566
            self.mode_pattern()
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__30, MizarParser.T__32]:
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__30:
                    self.state = 567
                    self.specification()


                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__32:
                    self.state = 570
                    self.match(MizarParser.T__32)
                    self.state = 571
                    self.definiens()


                self.state = 574
                self.match(MizarParser.T__3)
                self.state = 575
                self.correctness_conditions()
                pass
            elif token in [MizarParser.T__33]:
                self.state = 576
                self.match(MizarParser.T__33)
                self.state = 577
                self.type_expression()
                self.state = 578
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__40:
                self.state = 582
                self.mode_property()
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_symbol(self):
            return self.getTypedRuleContext(MizarParser.Mode_symbolContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMode_pattern" ):
                listener.enterMode_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMode_pattern" ):
                listener.exitMode_pattern(self)




    def mode_pattern(self):

        localctx = MizarParser.Mode_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_mode_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.mode_symbol()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__34:
                self.state = 589
                self.match(MizarParser.T__34)
                self.state = 590
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODE_SYMBOL(self):
            return self.getToken(MizarParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_mode_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMode_symbol" ):
                listener.enterMode_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMode_symbol" ):
                listener.exitMode_symbol(self)




    def mode_symbol(self):

        localctx = MizarParser.Mode_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mode_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__35 or _la==MizarParser.MODE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Mode_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Mode_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMode_synonym" ):
                listener.enterMode_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMode_synonym" ):
                listener.exitMode_synonym(self)




    def mode_synonym(self):

        localctx = MizarParser.Mode_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mode_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(MizarParser.T__36)
            self.state = 596
            self.mode_pattern()
            self.state = 597
            self.match(MizarParser.T__15)
            self.state = 598
            self.mode_pattern()
            self.state = 599
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefiniensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_definiens(self):
            return self.getTypedRuleContext(MizarParser.Simple_definiensContext,0)


        def conditional_definiens(self):
            return self.getTypedRuleContext(MizarParser.Conditional_definiensContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_definiens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniens" ):
                listener.enterDefiniens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniens" ):
                listener.exitDefiniens(self)




    def definiens(self):

        localctx = MizarParser.DefiniensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_definiens)
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.simple_definiens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.conditional_definiens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simple_definiens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_definiens" ):
                listener.enterSimple_definiens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_definiens" ):
                listener.exitSimple_definiens(self)




    def simple_definiens(self):

        localctx = MizarParser.Simple_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simple_definiens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__37:
                self.state = 605
                self.match(MizarParser.T__37)
                self.state = 606
                self.label_identifier()
                self.state = 607
                self.match(MizarParser.T__37)


            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 611
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 612
                self.term_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_label_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_identifier" ):
                listener.enterLabel_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_identifier" ):
                listener.exitLabel_identifier(self)




    def label_identifier(self):

        localctx = MizarParser.Label_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_label_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partial_definiens_list(self):
            return self.getTypedRuleContext(MizarParser.Partial_definiens_listContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditional_definiens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_definiens" ):
                listener.enterConditional_definiens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_definiens" ):
                listener.exitConditional_definiens(self)




    def conditional_definiens(self):

        localctx = MizarParser.Conditional_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_conditional_definiens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__37:
                self.state = 617
                self.match(MizarParser.T__37)
                self.state = 618
                self.label_identifier()
                self.state = 619
                self.match(MizarParser.T__37)


            self.state = 623
            self.partial_definiens_list()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__38:
                self.state = 624
                self.match(MizarParser.T__38)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.sentence()
                    pass

                elif la_ == 2:
                    self.state = 626
                    self.term_expression(0)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_definiens_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partial_definiens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Partial_definiensContext)
            else:
                return self.getTypedRuleContext(MizarParser.Partial_definiensContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_partial_definiens_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartial_definiens_list" ):
                listener.enterPartial_definiens_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartial_definiens_list" ):
                listener.exitPartial_definiens_list(self)




    def partial_definiens_list(self):

        localctx = MizarParser.Partial_definiens_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_partial_definiens_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.partial_definiens()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 632
                self.match(MizarParser.T__2)
                self.state = 633
                self.partial_definiens()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_definiensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SentenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.SentenceContext,i)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_partial_definiens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartial_definiens" ):
                listener.enterPartial_definiens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartial_definiens" ):
                listener.exitPartial_definiens(self)




    def partial_definiens(self):

        localctx = MizarParser.Partial_definiensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_partial_definiens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 639
                self.sentence()
                pass

            elif la_ == 2:
                self.state = 640
                self.term_expression(0)
                pass


            self.state = 643
            self.match(MizarParser.T__39)
            self.state = 644
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mode_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_mode_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMode_property" ):
                listener.enterMode_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMode_property" ):
                listener.exitMode_property(self)




    def mode_property(self):

        localctx = MizarParser.Mode_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_mode_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(MizarParser.T__40)
            self.state = 647
            self.justification()
            self.state = 648
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self):
            return self.getTypedRuleContext(MizarParser.Functor_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def functor_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_propertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_definition" ):
                listener.enterFunctor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_definition" ):
                listener.exitFunctor_definition(self)




    def functor_definition(self):

        localctx = MizarParser.Functor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functor_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(MizarParser.T__41)
            self.state = 651
            self.functor_pattern()
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__30:
                self.state = 652
                self.specification()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__32 or _la==MizarParser.T__42:
                self.state = 655
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__32 or _la==MizarParser.T__42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 656
                self.definiens()


            self.state = 659
            self.match(MizarParser.T__3)
            self.state = 660
            self.correctness_conditions()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45) | (1 << MizarParser.T__46))) != 0):
                self.state = 661
                self.functor_property()
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_symbol(self):
            return self.getTypedRuleContext(MizarParser.Functor_symbolContext,0)


        def functor_loci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_lociContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_lociContext,i)


        def left_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Left_functor_bracketContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def right_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Right_functor_bracketContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_pattern" ):
                listener.enterFunctor_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_pattern" ):
                listener.exitFunctor_pattern(self)




    def functor_pattern(self):

        localctx = MizarParser.Functor_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functor_pattern)
        self._la = 0 # Token type
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__25, MizarParser.FUNCTOR_SYMBOL, MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__25 or _la==MizarParser.IDENTIFIER:
                    self.state = 667
                    self.functor_loci()


                self.state = 670
                self.functor_symbol()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__25 or _la==MizarParser.IDENTIFIER:
                    self.state = 671
                    self.functor_loci()


                pass
            elif token in [MizarParser.T__47, MizarParser.T__48, MizarParser.LEFT_FUNCTOR_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.left_functor_bracket()
                self.state = 675
                self.loci()
                self.state = 676
                self.right_functor_bracket()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_property" ):
                listener.enterFunctor_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_property" ):
                listener.exitFunctor_property(self)




    def functor_property(self):

        localctx = MizarParser.Functor_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_functor_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__43) | (1 << MizarParser.T__44) | (1 << MizarParser.T__45) | (1 << MizarParser.T__46))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 681
            self.justification()
            self.state = 682
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_synonym" ):
                listener.enterFunctor_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_synonym" ):
                listener.exitFunctor_synonym(self)




    def functor_synonym(self):

        localctx = MizarParser.Functor_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functor_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(MizarParser.T__36)
            self.state = 685
            self.functor_pattern()
            self.state = 686
            self.match(MizarParser.T__15)
            self.state = 687
            self.functor_pattern()
            self.state = 688
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_lociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_loci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_loci" ):
                listener.enterFunctor_loci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_loci" ):
                listener.exitFunctor_loci(self)




    def functor_loci(self):

        localctx = MizarParser.Functor_lociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_functor_loci)
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.locus()
                pass
            elif token in [MizarParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(MizarParser.T__25)
                self.state = 692
                self.loci()
                self.state = 693
                self.match(MizarParser.T__26)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functor_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_symbol" ):
                listener.enterFunctor_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_symbol" ):
                listener.exitFunctor_symbol(self)




    def functor_symbol(self):

        localctx = MizarParser.Functor_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_functor_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(MizarParser.FUNCTOR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Left_functor_bracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.LEFT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_left_functor_bracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeft_functor_bracket" ):
                listener.enterLeft_functor_bracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeft_functor_bracket" ):
                listener.exitLeft_functor_bracket(self)




    def left_functor_bracket(self):

        localctx = MizarParser.Left_functor_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_left_functor_bracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__47 or _la==MizarParser.T__48 or _la==MizarParser.LEFT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_functor_bracketContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_FUNCTOR_SYMBOL(self):
            return self.getToken(MizarParser.RIGHT_FUNCTOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_right_functor_bracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_functor_bracket" ):
                listener.enterRight_functor_bracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_functor_bracket" ):
                listener.exitRight_functor_bracket(self)




    def right_functor_bracket(self):

        localctx = MizarParser.Right_functor_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_right_functor_bracket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__49 or _la==MizarParser.T__50 or _la==MizarParser.RIGHT_FUNCTOR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self):
            return self.getTypedRuleContext(MizarParser.Predicate_patternContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def predicate_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_propertyContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_propertyContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_definition" ):
                listener.enterPredicate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_definition" ):
                listener.exitPredicate_definition(self)




    def predicate_definition(self):

        localctx = MizarParser.Predicate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_predicate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(MizarParser.T__51)
            self.state = 704
            self.predicate_pattern()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__32:
                self.state = 705
                self.match(MizarParser.T__32)
                self.state = 706
                self.definiens()


            self.state = 709
            self.match(MizarParser.T__3)
            self.state = 710
            self.correctness_conditions()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55) | (1 << MizarParser.T__56))) != 0):
                self.state = 711
                self.predicate_property()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_symbol(self):
            return self.getTypedRuleContext(MizarParser.Predicate_symbolContext,0)


        def loci(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LociContext)
            else:
                return self.getTypedRuleContext(MizarParser.LociContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_pattern" ):
                listener.enterPredicate_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_pattern" ):
                listener.exitPredicate_pattern(self)




    def predicate_pattern(self):

        localctx = MizarParser.Predicate_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_predicate_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 717
                self.loci()


            self.state = 720
            self.predicate_symbol()
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 721
                self.loci()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_property" ):
                listener.enterPredicate_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_property" ):
                listener.exitPredicate_property(self)




    def predicate_property(self):

        localctx = MizarParser.Predicate_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_predicate_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__52) | (1 << MizarParser.T__53) | (1 << MizarParser.T__54) | (1 << MizarParser.T__55) | (1 << MizarParser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 725
            self.justification()
            self.state = 726
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_synonym" ):
                listener.enterPredicate_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_synonym" ):
                listener.exitPredicate_synonym(self)




    def predicate_synonym(self):

        localctx = MizarParser.Predicate_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicate_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(MizarParser.T__36)
            self.state = 729
            self.predicate_pattern()
            self.state = 730
            self.match(MizarParser.T__15)
            self.state = 731
            self.predicate_pattern()
            self.state = 732
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_antonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_antonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_antonym" ):
                listener.enterPredicate_antonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_antonym" ):
                listener.exitPredicate_antonym(self)




    def predicate_antonym(self):

        localctx = MizarParser.Predicate_antonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicate_antonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(MizarParser.T__57)
            self.state = 735
            self.predicate_pattern()
            self.state = 736
            self.match(MizarParser.T__15)
            self.state = 737
            self.predicate_pattern()
            self.state = 738
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICATE_SYMBOL(self):
            return self.getToken(MizarParser.PREDICATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicate_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_symbol" ):
                listener.enterPredicate_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_symbol" ):
                listener.exitPredicate_symbol(self)




    def predicate_symbol(self):

        localctx = MizarParser.Predicate_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_predicate_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__58 or _la==MizarParser.PREDICATE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self):
            return self.getTypedRuleContext(MizarParser.Attribute_patternContext,0)


        def definiens(self):
            return self.getTypedRuleContext(MizarParser.DefiniensContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)




    def attribute_definition(self):

        localctx = MizarParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_attribute_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(MizarParser.T__59)
            self.state = 743
            self.attribute_pattern()
            self.state = 744
            self.match(MizarParser.T__32)
            self.state = 745
            self.definiens()
            self.state = 746
            self.match(MizarParser.T__3)
            self.state = 747
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locus(self):
            return self.getTypedRuleContext(MizarParser.LocusContext,0)


        def attribute_symbol(self):
            return self.getTypedRuleContext(MizarParser.Attribute_symbolContext,0)


        def attribute_loci(self):
            return self.getTypedRuleContext(MizarParser.Attribute_lociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_pattern" ):
                listener.enterAttribute_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_pattern" ):
                listener.exitAttribute_pattern(self)




    def attribute_pattern(self):

        localctx = MizarParser.Attribute_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_attribute_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.locus()
            self.state = 750
            self.match(MizarParser.T__33)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__25 or _la==MizarParser.IDENTIFIER:
                self.state = 751
                self.attribute_loci()


            self.state = 754
            self.attribute_symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Attribute_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Attribute_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_synonym" ):
                listener.enterAttribute_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_synonym" ):
                listener.exitAttribute_synonym(self)




    def attribute_synonym(self):

        localctx = MizarParser.Attribute_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attribute_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(MizarParser.T__36)
            self.state = 757
            self.attribute_pattern()
            self.state = 758
            self.match(MizarParser.T__15)
            self.state = 759
            self.attribute_pattern()
            self.state = 760
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_antonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Attribute_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Attribute_patternContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_antonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_antonym" ):
                listener.enterAttribute_antonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_antonym" ):
                listener.exitAttribute_antonym(self)




    def attribute_antonym(self):

        localctx = MizarParser.Attribute_antonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_attribute_antonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(MizarParser.T__57)
            self.state = 763
            self.attribute_pattern()
            self.state = 764
            self.match(MizarParser.T__15)
            self.state = 765
            self.attribute_pattern()
            self.state = 766
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE_SYMBOL(self):
            return self.getToken(MizarParser.ATTRIBUTE_SYMBOL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_attribute_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_symbol" ):
                listener.enterAttribute_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_symbol" ):
                listener.exitAttribute_symbol(self)




    def attribute_symbol(self):

        localctx = MizarParser.Attribute_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attribute_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(MizarParser.ATTRIBUTE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_lociContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loci(self):
            return self.getTypedRuleContext(MizarParser.LociContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_attribute_loci

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_loci" ):
                listener.enterAttribute_loci(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_loci" ):
                listener.exitAttribute_loci(self)




    def attribute_loci(self):

        localctx = MizarParser.Attribute_lociContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attribute_loci)
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.loci()
                pass
            elif token in [MizarParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(MizarParser.T__25)
                self.state = 772
                self.loci()
                self.state = 773
                self.match(MizarParser.T__26)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cluster_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existential_registration(self):
            return self.getTypedRuleContext(MizarParser.Existential_registrationContext,0)


        def conditional_registration(self):
            return self.getTypedRuleContext(MizarParser.Conditional_registrationContext,0)


        def functorial_registration(self):
            return self.getTypedRuleContext(MizarParser.Functorial_registrationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_cluster_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_registration" ):
                listener.enterCluster_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_registration" ):
                listener.exitCluster_registration(self)




    def cluster_registration(self):

        localctx = MizarParser.Cluster_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cluster_registration)
        try:
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.existential_registration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.conditional_registration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 779
                self.functorial_registration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Existential_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existential_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistential_registration" ):
                listener.enterExistential_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistential_registration" ):
                listener.exitExistential_registration(self)




    def existential_registration(self):

        localctx = MizarParser.Existential_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_existential_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(MizarParser.T__60)
            self.state = 783
            self.adjective_cluster()
            self.state = 784
            self.match(MizarParser.T__15)
            self.state = 785
            self.type_expression()
            self.state = 786
            self.match(MizarParser.T__3)
            self.state = 787
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Adjective_clusterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective_cluster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjective_cluster" ):
                listener.enterAdjective_cluster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjective_cluster" ):
                listener.exitAdjective_cluster(self)




    def adjective_cluster(self):

        localctx = MizarParser.Adjective_clusterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_adjective_cluster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self.adjective() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdjectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_symbol(self):
            return self.getTypedRuleContext(MizarParser.Attribute_symbolContext,0)


        def adjective_arguments(self):
            return self.getTypedRuleContext(MizarParser.Adjective_argumentsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjective" ):
                listener.enterAdjective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjective" ):
                listener.exitAdjective(self)




    def adjective(self):

        localctx = MizarParser.AdjectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_adjective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__61:
                self.state = 795
                self.match(MizarParser.T__61)


            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 798
                self.adjective_arguments()


            self.state = 801
            self.attribute_symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def adjective_cluster(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Adjective_clusterContext)
            else:
                return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conditional_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_registration" ):
                listener.enterConditional_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_registration" ):
                listener.exitConditional_registration(self)




    def conditional_registration(self):

        localctx = MizarParser.Conditional_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conditional_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(MizarParser.T__60)
            self.state = 804
            self.adjective_cluster()
            self.state = 805
            self.match(MizarParser.T__30)
            self.state = 806
            self.adjective_cluster()
            self.state = 807
            self.match(MizarParser.T__15)
            self.state = 808
            self.type_expression()
            self.state = 809
            self.match(MizarParser.T__3)
            self.state = 810
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functorial_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functorial_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctorial_registration" ):
                listener.enterFunctorial_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctorial_registration" ):
                listener.exitFunctorial_registration(self)




    def functorial_registration(self):

        localctx = MizarParser.Functorial_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functorial_registration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MizarParser.T__60)
            self.state = 813
            self.term_expression(0)
            self.state = 814
            self.match(MizarParser.T__30)
            self.state = 815
            self.adjective_cluster()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__15:
                self.state = 816
                self.match(MizarParser.T__15)
                self.state = 817
                self.type_expression()


            self.state = 820
            self.match(MizarParser.T__3)
            self.state = 821
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identify_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_patternContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_patternContext,i)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def locus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.LocusContext)
            else:
                return self.getTypedRuleContext(MizarParser.LocusContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_identify_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentify_registration" ):
                listener.enterIdentify_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentify_registration" ):
                listener.exitIdentify_registration(self)




    def identify_registration(self):

        localctx = MizarParser.Identify_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identify_registration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(MizarParser.T__62)
            self.state = 824
            self.functor_pattern()
            self.state = 825
            self.match(MizarParser.T__63)
            self.state = 826
            self.functor_pattern()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__64:
                self.state = 827
                self.match(MizarParser.T__64)
                self.state = 828
                self.locus()
                self.state = 829
                self.match(MizarParser.T__58)
                self.state = 830
                self.locus()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__2:
                    self.state = 831
                    self.match(MizarParser.T__2)
                    self.state = 832
                    self.locus()
                    self.state = 833
                    self.match(MizarParser.T__58)
                    self.state = 834
                    self.locus()
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 843
            self.match(MizarParser.T__3)
            self.state = 844
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_property_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_registration" ):
                listener.enterProperty_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_registration" ):
                listener.exitProperty_registration(self)




    def property_registration(self):

        localctx = MizarParser.Property_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_property_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(MizarParser.T__40)
            self.state = 847
            self.match(MizarParser.T__34)
            self.state = 848
            self.type_expression()
            self.state = 849
            self.justification()
            self.state = 850
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reduction_registrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def correctness_conditions(self):
            return self.getTypedRuleContext(MizarParser.Correctness_conditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reduction_registration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduction_registration" ):
                listener.enterReduction_registration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduction_registration" ):
                listener.exitReduction_registration(self)




    def reduction_registration(self):

        localctx = MizarParser.Reduction_registrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_reduction_registration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(MizarParser.T__65)
            self.state = 853
            self.term_expression(0)
            self.state = 854
            self.match(MizarParser.T__66)
            self.state = 855
            self.term_expression(0)
            self.state = 856
            self.match(MizarParser.T__3)
            self.state = 857
            self.correctness_conditions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Correctness_conditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correctness_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Correctness_conditionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Correctness_conditionContext,i)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctness_conditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrectness_conditions" ):
                listener.enterCorrectness_conditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrectness_conditions" ):
                listener.exitCorrectness_conditions(self)




    def correctness_conditions(self):

        localctx = MizarParser.Correctness_conditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_correctness_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MizarParser.T__68 - 69)) | (1 << (MizarParser.T__69 - 69)) | (1 << (MizarParser.T__70 - 69)) | (1 << (MizarParser.T__71 - 69)) | (1 << (MizarParser.T__72 - 69)) | (1 << (MizarParser.T__73 - 69)))) != 0):
                self.state = 859
                self.correctness_condition()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__67:
                self.state = 865
                self.match(MizarParser.T__67)
                self.state = 866
                self.justification()
                self.state = 867
                self.match(MizarParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Correctness_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_correctness_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrectness_condition" ):
                listener.enterCorrectness_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrectness_condition" ):
                listener.exitCorrectness_condition(self)




    def correctness_condition(self):

        localctx = MizarParser.Correctness_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_correctness_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MizarParser.T__68 - 69)) | (1 << (MizarParser.T__69 - 69)) | (1 << (MizarParser.T__70 - 69)) | (1 << (MizarParser.T__71 - 69)) | (1 << (MizarParser.T__72 - 69)) | (1 << (MizarParser.T__73 - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 872
            self.justification()
            self.state = 873
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoremContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_theorem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheorem" ):
                listener.enterTheorem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheorem" ):
                listener.exitTheorem(self)




    def theorem(self):

        localctx = MizarParser.TheoremContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_theorem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(MizarParser.T__74)
            self.state = 876
            self.compact_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_block(self):
            return self.getTypedRuleContext(MizarParser.Scheme_blockContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_item" ):
                listener.enterScheme_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_item" ):
                listener.exitScheme_item(self)




    def scheme_item(self):

        localctx = MizarParser.Scheme_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_scheme_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.scheme_block()
            self.state = 879
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_identifier(self):
            return self.getTypedRuleContext(MizarParser.Scheme_identifierContext,0)


        def scheme_parameters(self):
            return self.getTypedRuleContext(MizarParser.Scheme_parametersContext,0)


        def scheme_conclusion(self):
            return self.getTypedRuleContext(MizarParser.Scheme_conclusionContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def scheme_premise(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Scheme_premiseContext)
            else:
                return self.getTypedRuleContext(MizarParser.Scheme_premiseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_block" ):
                listener.enterScheme_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_block" ):
                listener.exitScheme_block(self)




    def scheme_block(self):

        localctx = MizarParser.Scheme_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_scheme_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(MizarParser.T__75)
            self.state = 882
            self.scheme_identifier()
            self.state = 883
            self.match(MizarParser.T__47)
            self.state = 884
            self.scheme_parameters()
            self.state = 885
            self.match(MizarParser.T__49)
            self.state = 886
            self.match(MizarParser.T__37)
            self.state = 887
            self.scheme_conclusion()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__76:
                self.state = 888
                self.match(MizarParser.T__76)
                self.state = 889
                self.scheme_premise()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__77:
                    self.state = 890
                    self.match(MizarParser.T__77)
                    self.state = 891
                    self.scheme_premise()
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 899
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__3 or _la==MizarParser.T__78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 900
            self.reasoning()
            self.state = 901
            self.match(MizarParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_scheme_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_identifier" ):
                listener.enterScheme_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_identifier" ):
                listener.exitScheme_identifier(self)




    def scheme_identifier(self):

        localctx = MizarParser.Scheme_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_scheme_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Scheme_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Scheme_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_parameters" ):
                listener.enterScheme_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_parameters" ):
                listener.exitScheme_parameters(self)




    def scheme_parameters(self):

        localctx = MizarParser.Scheme_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_scheme_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.scheme_segment()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 906
                self.match(MizarParser.T__2)
                self.state = 907
                self.scheme_segment()
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_conclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_conclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_conclusion" ):
                listener.enterScheme_conclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_conclusion" ):
                listener.exitScheme_conclusion(self)




    def scheme_conclusion(self):

        localctx = MizarParser.Scheme_conclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_scheme_conclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_premiseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_premise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_premise" ):
                listener.enterScheme_premise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_premise" ):
                listener.exitScheme_premise(self)




    def scheme_premise(self):

        localctx = MizarParser.Scheme_premiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_scheme_premise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.proposition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_segment(self):
            return self.getTypedRuleContext(MizarParser.Predicate_segmentContext,0)


        def functor_segment(self):
            return self.getTypedRuleContext(MizarParser.Functor_segmentContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_segment" ):
                listener.enterScheme_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_segment" ):
                listener.exitScheme_segment(self)




    def scheme_segment(self):

        localctx = MizarParser.Scheme_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_scheme_segment)
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.predicate_segment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.functor_segment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,i)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_predicate_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_segment" ):
                listener.enterPredicate_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_segment" ):
                listener.exitPredicate_segment(self)




    def predicate_segment(self):

        localctx = MizarParser.Predicate_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_predicate_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.predicate_identifier()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 922
                self.match(MizarParser.T__2)
                self.state = 923
                self.predicate_identifier()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self.match(MizarParser.T__48)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__61))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 930
                self.type_expression_list()


            self.state = 933
            self.match(MizarParser.T__50)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predicate_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_predicate_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_identifier" ):
                listener.enterPredicate_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_identifier" ):
                listener.exitPredicate_identifier(self)




    def predicate_identifier(self):

        localctx = MizarParser.Predicate_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_predicate_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Functor_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Functor_identifierContext,i)


        def specification(self):
            return self.getTypedRuleContext(MizarParser.SpecificationContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_functor_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_segment" ):
                listener.enterFunctor_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_segment" ):
                listener.exitFunctor_segment(self)




    def functor_segment(self):

        localctx = MizarParser.Functor_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_functor_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.functor_identifier()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 938
                self.match(MizarParser.T__2)
                self.state = 939
                self.functor_identifier()
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 945
            self.match(MizarParser.T__25)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__61))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 946
                self.type_expression_list()


            self.state = 949
            self.match(MizarParser.T__26)
            self.state = 950
            self.specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functor_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_functor_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctor_identifier" ):
                listener.enterFunctor_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctor_identifier" ):
                listener.exitFunctor_identifier(self)




    def functor_identifier(self):

        localctx = MizarParser.Functor_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functor_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auxiliary_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MizarParser.StatementContext,0)


        def private_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_auxiliary_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuxiliary_item" ):
                listener.enterAuxiliary_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuxiliary_item" ):
                listener.exitAuxiliary_item(self)




    def auxiliary_item(self):

        localctx = MizarParser.Auxiliary_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_auxiliary_item)
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__81, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.statement()
                pass
            elif token in [MizarParser.T__35, MizarParser.T__79, MizarParser.T__80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.private_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_definition(self):
            return self.getTypedRuleContext(MizarParser.Constant_definitionContext,0)


        def private_functor_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_functor_definitionContext,0)


        def private_predicate_definition(self):
            return self.getTypedRuleContext(MizarParser.Private_predicate_definitionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_definition" ):
                listener.enterPrivate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_definition" ):
                listener.exitPrivate_definition(self)




    def private_definition(self):

        localctx = MizarParser.Private_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_private_definition)
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 958
                self.constant_definition()
                pass
            elif token in [MizarParser.T__79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.private_functor_definition()
                pass
            elif token in [MizarParser.T__80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 960
                self.private_predicate_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating_list(self):
            return self.getTypedRuleContext(MizarParser.Equating_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_constant_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_definition" ):
                listener.enterConstant_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_definition" ):
                listener.exitConstant_definition(self)




    def constant_definition(self):

        localctx = MizarParser.Constant_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_constant_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(MizarParser.T__35)
            self.state = 964
            self.equating_list()
            self.state = 965
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equating_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_equating_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquating_list" ):
                listener.enterEquating_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquating_list" ):
                listener.exitEquating_list(self)




    def equating_list(self):

        localctx = MizarParser.Equating_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_equating_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.equating()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 968
                self.match(MizarParser.T__2)
                self.state = 969
                self.equating()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquatingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_equating

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquating" ):
                listener.enterEquating(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquating" ):
                listener.exitEquating(self)




    def equating(self):

        localctx = MizarParser.EquatingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_equating)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.variable_identifier()
            self.state = 976
            self.match(MizarParser.T__58)
            self.state = 977
            self.term_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_functor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def private_functor_pattern(self):
            return self.getTypedRuleContext(MizarParser.Private_functor_patternContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_functor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_functor_definition" ):
                listener.enterPrivate_functor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_functor_definition" ):
                listener.exitPrivate_functor_definition(self)




    def private_functor_definition(self):

        localctx = MizarParser.Private_functor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_private_functor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(MizarParser.T__79)
            self.state = 980
            self.private_functor_pattern()
            self.state = 981
            self.match(MizarParser.T__58)
            self.state = 982
            self.term_expression(0)
            self.state = 983
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_predicate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def private_predicate_pattern(self):
            return self.getTypedRuleContext(MizarParser.Private_predicate_patternContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_predicate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_predicate_definition" ):
                listener.enterPrivate_predicate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_predicate_definition" ):
                listener.exitPrivate_predicate_definition(self)




    def private_predicate_definition(self):

        localctx = MizarParser.Private_predicate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_private_predicate_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(MizarParser.T__80)
            self.state = 986
            self.private_predicate_pattern()
            self.state = 987
            self.match(MizarParser.T__32)
            self.state = 988
            self.sentence()
            self.state = 989
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_functor_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functor_identifier(self):
            return self.getTypedRuleContext(MizarParser.Functor_identifierContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_functor_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_functor_pattern" ):
                listener.enterPrivate_functor_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_functor_pattern" ):
                listener.exitPrivate_functor_pattern(self)




    def private_functor_pattern(self):

        localctx = MizarParser.Private_functor_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_private_functor_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.functor_identifier()
            self.state = 992
            self.match(MizarParser.T__25)
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__61))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 993
                self.type_expression_list()


            self.state = 996
            self.match(MizarParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_predicate_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_identifier(self):
            return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,0)


        def type_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Type_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_private_predicate_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_predicate_pattern" ):
                listener.enterPrivate_predicate_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_predicate_pattern" ):
                listener.exitPrivate_predicate_pattern(self)




    def private_predicate_pattern(self):

        localctx = MizarParser.Private_predicate_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_private_predicate_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.predicate_identifier()
            self.state = 999
            self.match(MizarParser.T__48)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__35) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48) | (1 << MizarParser.T__61))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.MODE_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.ATTRIBUTE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                self.state = 1000
                self.type_expression_list()


            self.state = 1003
            self.match(MizarParser.T__50)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReasoningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Reasoning_itemContext)
            else:
                return self.getTypedRuleContext(MizarParser.Reasoning_itemContext,i)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def case_list(self):
            return self.getTypedRuleContext(MizarParser.Case_listContext,0)


        def suppose_list(self):
            return self.getTypedRuleContext(MizarParser.Suppose_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReasoning" ):
                listener.enterReasoning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReasoning" ):
                listener.exitReasoning(self)




    def reasoning(self):

        localctx = MizarParser.ReasoningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_reasoning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1005
                    self.reasoning_item() 
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__81 or _la==MizarParser.T__82:
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__81:
                    self.state = 1011
                    self.match(MizarParser.T__81)


                self.state = 1014
                self.match(MizarParser.T__82)
                self.state = 1015
                self.match(MizarParser.T__83)
                self.state = 1016
                self.simple_justification()
                self.state = 1017
                self.match(MizarParser.T__3)
                self.state = 1020
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__84]:
                    self.state = 1018
                    self.case_list()
                    pass
                elif token in [MizarParser.T__85]:
                    self.state = 1019
                    self.suppose_list()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.CaseContext)
            else:
                return self.getTypedRuleContext(MizarParser.CaseContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_case_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_list" ):
                listener.enterCase_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_list" ):
                listener.exitCase_list(self)




    def case_list(self):

        localctx = MizarParser.Case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1024
                self.case()
                self.state = 1027 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__84):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase" ):
                listener.enterCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase" ):
                listener.exitCase(self)




    def case(self):

        localctx = MizarParser.CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(MizarParser.T__84)
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1030
                self.proposition()
                pass
            elif token in [MizarParser.T__101]:
                self.state = 1031
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1034
            self.match(MizarParser.T__3)
            self.state = 1035
            self.reasoning()
            self.state = 1036
            self.match(MizarParser.T__18)
            self.state = 1037
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Suppose_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suppose(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.SupposeContext)
            else:
                return self.getTypedRuleContext(MizarParser.SupposeContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_suppose_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuppose_list" ):
                listener.enterSuppose_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuppose_list" ):
                listener.exitSuppose_list(self)




    def suppose_list(self):

        localctx = MizarParser.Suppose_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_suppose_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1039
                self.suppose()
                self.state = 1042 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__85):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupposeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_suppose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuppose" ):
                listener.enterSuppose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuppose" ):
                listener.exitSuppose(self)




    def suppose(self):

        localctx = MizarParser.SupposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_suppose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(MizarParser.T__85)
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.state = 1045
                self.proposition()
                pass
            elif token in [MizarParser.T__101]:
                self.state = 1046
                self.conditions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1049
            self.match(MizarParser.T__3)
            self.state = 1050
            self.reasoning()
            self.state = 1051
            self.match(MizarParser.T__18)
            self.state = 1052
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reasoning_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auxiliary_item(self):
            return self.getTypedRuleContext(MizarParser.Auxiliary_itemContext,0)


        def skeleton_item(self):
            return self.getTypedRuleContext(MizarParser.Skeleton_itemContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reasoning_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReasoning_item" ):
                listener.enterReasoning_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReasoning_item" ):
                listener.exitReasoning_item(self)




    def reasoning_item(self):

        localctx = MizarParser.Reasoning_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_reasoning_item)
        try:
            self.state = 1056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15, MizarParser.T__25, MizarParser.T__35, MizarParser.T__47, MizarParser.T__48, MizarParser.T__58, MizarParser.T__79, MizarParser.T__80, MizarParser.T__81, MizarParser.T__92, MizarParser.T__93, MizarParser.T__96, MizarParser.T__107, MizarParser.T__108, MizarParser.T__109, MizarParser.T__110, MizarParser.T__111, MizarParser.T__114, MizarParser.T__117, MizarParser.T__120, MizarParser.T__123, MizarParser.T__124, MizarParser.T__125, MizarParser.T__126, MizarParser.T__127, MizarParser.T__128, MizarParser.T__129, MizarParser.T__130, MizarParser.T__131, MizarParser.T__132, MizarParser.PREDICATE_SYMBOL, MizarParser.FUNCTOR_SYMBOL, MizarParser.STRUCTURE_SYMBOL, MizarParser.LEFT_FUNCTOR_SYMBOL, MizarParser.IDENTIFIER, MizarParser.NUMERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.auxiliary_item()
                pass
            elif token in [MizarParser.T__21, MizarParser.T__86, MizarParser.T__87, MizarParser.T__88, MizarParser.T__89, MizarParser.T__90, MizarParser.T__91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.skeleton_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Skeleton_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalization(self):
            return self.getTypedRuleContext(MizarParser.GeneralizationContext,0)


        def assumption(self):
            return self.getTypedRuleContext(MizarParser.AssumptionContext,0)


        def conclusion(self):
            return self.getTypedRuleContext(MizarParser.ConclusionContext,0)


        def exemplification(self):
            return self.getTypedRuleContext(MizarParser.ExemplificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_skeleton_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkeleton_item" ):
                listener.enterSkeleton_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkeleton_item" ):
                listener.exitSkeleton_item(self)




    def skeleton_item(self):

        localctx = MizarParser.Skeleton_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_skeleton_item)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.generalization()
                pass
            elif token in [MizarParser.T__86, MizarParser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.assumption()
                pass
            elif token in [MizarParser.T__88, MizarParser.T__89, MizarParser.T__90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.conclusion()
                pass
            elif token in [MizarParser.T__91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.exemplification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_generalization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralization" ):
                listener.enterGeneralization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralization" ):
                listener.exitGeneralization(self)




    def generalization(self):

        localctx = MizarParser.GeneralizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_generalization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(MizarParser.T__21)
            self.state = 1065
            self.qualified_variables()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__22:
                self.state = 1066
                self.match(MizarParser.T__22)
                self.state = 1067
                self.conditions()


            self.state = 1070
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_assumption(self):
            return self.getTypedRuleContext(MizarParser.Single_assumptionContext,0)


        def collective_assumption(self):
            return self.getTypedRuleContext(MizarParser.Collective_assumptionContext,0)


        def existential_assumption(self):
            return self.getTypedRuleContext(MizarParser.Existential_assumptionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssumption" ):
                listener.enterAssumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssumption" ):
                listener.exitAssumption(self)




    def assumption(self):

        localctx = MizarParser.AssumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_assumption)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.single_assumption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.collective_assumption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.existential_assumption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_single_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_assumption" ):
                listener.enterSingle_assumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_assumption" ):
                listener.exitSingle_assumption(self)




    def single_assumption(self):

        localctx = MizarParser.Single_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_single_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(MizarParser.T__86)
            self.state = 1078
            self.proposition()
            self.state = 1079
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collective_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_collective_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollective_assumption" ):
                listener.enterCollective_assumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollective_assumption" ):
                listener.exitCollective_assumption(self)




    def collective_assumption(self):

        localctx = MizarParser.Collective_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_collective_assumption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(MizarParser.T__86)
            self.state = 1082
            self.conditions()
            self.state = 1083
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Existential_assumptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_existential_assumption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistential_assumption" ):
                listener.enterExistential_assumption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistential_assumption" ):
                listener.exitExistential_assumption(self)




    def existential_assumption(self):

        localctx = MizarParser.Existential_assumptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_existential_assumption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(MizarParser.T__87)
            self.state = 1086
            self.qualified_variables()
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__22:
                self.state = 1087
                self.match(MizarParser.T__22)
                self.state = 1088
                self.conditions()


            self.state = 1091
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def iterative_equality(self):
            return self.getTypedRuleContext(MizarParser.Iterative_equalityContext,0)


        def diffuse_conclusion(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_conclusionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_conclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConclusion" ):
                listener.enterConclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConclusion" ):
                listener.exitConclusion(self)




    def conclusion(self):

        localctx = MizarParser.ConclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conclusion)
        self._la = 0 # Token type
        try:
            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__88 or _la==MizarParser.T__89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1094
                    self.compact_statement()
                    pass

                elif la_ == 2:
                    self.state = 1095
                    self.iterative_equality()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.diffuse_conclusion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Diffuse_conclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diffuse_statement(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_statementContext,0)


        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuse_conclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffuse_conclusion" ):
                listener.enterDiffuse_conclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffuse_conclusion" ):
                listener.exitDiffuse_conclusion(self)




    def diffuse_conclusion(self):

        localctx = MizarParser.Diffuse_conclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_diffuse_conclusion)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.match(MizarParser.T__88)
                self.state = 1102
                self.diffuse_statement()
                pass
            elif token in [MizarParser.T__90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(MizarParser.T__90)
                self.state = 1104
                self.reasoning()
                self.state = 1105
                self.match(MizarParser.T__18)
                self.state = 1106
                self.match(MizarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExemplificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def example(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ExampleContext)
            else:
                return self.getTypedRuleContext(MizarParser.ExampleContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_exemplification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExemplification" ):
                listener.enterExemplification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExemplification" ):
                listener.exitExemplification(self)




    def exemplification(self):

        localctx = MizarParser.ExemplificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_exemplification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(MizarParser.T__91)
            self.state = 1111
            self.example()
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1112
                self.match(MizarParser.T__2)
                self.state = 1113
                self.example()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1119
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_example

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExample" ):
                listener.enterExample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExample" ):
                listener.exitExample(self)




    def example(self):

        localctx = MizarParser.ExampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_example)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.term_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.variable_identifier()
                self.state = 1123
                self.match(MizarParser.T__58)
                self.state = 1124
                self.term_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linkable_statement(self):
            return self.getTypedRuleContext(MizarParser.Linkable_statementContext,0)


        def diffuse_statement(self):
            return self.getTypedRuleContext(MizarParser.Diffuse_statementContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = MizarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__81:
                    self.state = 1128
                    self.match(MizarParser.T__81)


                self.state = 1131
                self.linkable_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.diffuse_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Linkable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compact_statement(self):
            return self.getTypedRuleContext(MizarParser.Compact_statementContext,0)


        def choice_statement(self):
            return self.getTypedRuleContext(MizarParser.Choice_statementContext,0)


        def type_changing_statement(self):
            return self.getTypedRuleContext(MizarParser.Type_changing_statementContext,0)


        def iterative_equality(self):
            return self.getTypedRuleContext(MizarParser.Iterative_equalityContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_linkable_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkable_statement" ):
                listener.enterLinkable_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkable_statement" ):
                listener.exitLinkable_statement(self)




    def linkable_statement(self):

        localctx = MizarParser.Linkable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_linkable_statement)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.compact_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.choice_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self.type_changing_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1138
                self.iterative_equality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compact_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self):
            return self.getTypedRuleContext(MizarParser.PropositionContext,0)


        def justification(self):
            return self.getTypedRuleContext(MizarParser.JustificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_compact_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompact_statement" ):
                listener.enterCompact_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompact_statement" ):
                listener.exitCompact_statement(self)




    def compact_statement(self):

        localctx = MizarParser.Compact_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_compact_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.proposition()
            self.state = 1142
            self.justification()
            self.state = 1143
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Choice_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def conditions(self):
            return self.getTypedRuleContext(MizarParser.ConditionsContext,0)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_choice_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_statement" ):
                listener.enterChoice_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_statement" ):
                listener.exitChoice_statement(self)




    def choice_statement(self):

        localctx = MizarParser.Choice_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_choice_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(MizarParser.T__92)
            self.state = 1146
            self.qualified_variables()
            self.state = 1147
            self.match(MizarParser.T__22)
            self.state = 1148
            self.conditions()
            self.state = 1149
            self.simple_justification()
            self.state = 1150
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_changing_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_change_list(self):
            return self.getTypedRuleContext(MizarParser.Type_change_listContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_type_changing_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_changing_statement" ):
                listener.enterType_changing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_changing_statement" ):
                listener.exitType_changing_statement(self)




    def type_changing_statement(self):

        localctx = MizarParser.Type_changing_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_type_changing_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(MizarParser.T__93)
            self.state = 1153
            self.type_change_list()
            self.state = 1154
            self.match(MizarParser.T__94)
            self.state = 1155
            self.type_expression()
            self.state = 1156
            self.simple_justification()
            self.state = 1157
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_change_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equating(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.EquatingContext)
            else:
                return self.getTypedRuleContext(MizarParser.EquatingContext,i)


        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Variable_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_change_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_change_list" ):
                listener.enterType_change_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_change_list" ):
                listener.exitType_change_list(self)




    def type_change_list(self):

        localctx = MizarParser.Type_change_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_type_change_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1159
                self.equating()
                pass

            elif la_ == 2:
                self.state = 1160
                self.variable_identifier()
                pass


            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1163
                self.match(MizarParser.T__2)
                self.state = 1166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.equating()
                    pass

                elif la_ == 2:
                    self.state = 1165
                    self.variable_identifier()
                    pass


                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iterative_equalityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def simple_justification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Simple_justificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.Simple_justificationContext,i)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_iterative_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterative_equality" ):
                listener.enterIterative_equality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterative_equality" ):
                listener.exitIterative_equality(self)




    def iterative_equality(self):

        localctx = MizarParser.Iterative_equalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_iterative_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1173
                self.label_identifier()
                self.state = 1174
                self.match(MizarParser.T__37)


            self.state = 1178
            self.term_expression(0)
            self.state = 1179
            self.match(MizarParser.T__58)
            self.state = 1180
            self.term_expression(0)
            self.state = 1181
            self.simple_justification()
            self.state = 1186 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1182
                self.match(MizarParser.T__95)
                self.state = 1183
                self.term_expression(0)
                self.state = 1184
                self.simple_justification()
                self.state = 1188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MizarParser.T__95):
                    break

            self.state = 1190
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Diffuse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_diffuse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffuse_statement" ):
                listener.enterDiffuse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffuse_statement" ):
                listener.exitDiffuse_statement(self)




    def diffuse_statement(self):

        localctx = MizarParser.Diffuse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_diffuse_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.IDENTIFIER:
                self.state = 1192
                self.label_identifier()
                self.state = 1193
                self.match(MizarParser.T__37)


            self.state = 1197
            self.match(MizarParser.T__96)
            self.state = 1198
            self.reasoning()
            self.state = 1199
            self.match(MizarParser.T__18)
            self.state = 1200
            self.match(MizarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JustificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_justification(self):
            return self.getTypedRuleContext(MizarParser.Simple_justificationContext,0)


        def proof(self):
            return self.getTypedRuleContext(MizarParser.ProofContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_justification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJustification" ):
                listener.enterJustification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJustification" ):
                listener.exitJustification(self)




    def justification(self):

        localctx = MizarParser.JustificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_justification)
        try:
            self.state = 1204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__97, MizarParser.T__98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.simple_justification()
                pass
            elif token in [MizarParser.T__78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.proof()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def straightforward_justification(self):
            return self.getTypedRuleContext(MizarParser.Straightforward_justificationContext,0)


        def scheme_justification(self):
            return self.getTypedRuleContext(MizarParser.Scheme_justificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_simple_justification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_justification" ):
                listener.enterSimple_justification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_justification" ):
                listener.exitSimple_justification(self)




    def simple_justification(self):

        localctx = MizarParser.Simple_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_simple_justification)
        try:
            self.state = 1208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__3, MizarParser.T__95, MizarParser.T__97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.straightforward_justification()
                pass
            elif token in [MizarParser.T__98]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.scheme_justification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProofContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reasoning(self):
            return self.getTypedRuleContext(MizarParser.ReasoningContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProof" ):
                listener.enterProof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProof" ):
                listener.exitProof(self)




    def proof(self):

        localctx = MizarParser.ProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_proof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(MizarParser.T__78)
            self.state = 1211
            self.reasoning()
            self.state = 1212
            self.match(MizarParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Straightforward_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_straightforward_justification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightforward_justification" ):
                listener.enterStraightforward_justification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightforward_justification" ):
                listener.exitStraightforward_justification(self)




    def straightforward_justification(self):

        localctx = MizarParser.Straightforward_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_straightforward_justification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__97:
                self.state = 1214
                self.match(MizarParser.T__97)
                self.state = 1215
                self.references()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_justificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Scheme_referenceContext,0)


        def references(self):
            return self.getTypedRuleContext(MizarParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_justification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_justification" ):
                listener.enterScheme_justification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_justification" ):
                listener.exitScheme_justification(self)




    def scheme_justification(self):

        localctx = MizarParser.Scheme_justificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_scheme_justification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(MizarParser.T__98)
            self.state = 1219
            self.scheme_reference()
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MizarParser.T__25:
                self.state = 1220
                self.match(MizarParser.T__25)
                self.state = 1221
                self.references()
                self.state = 1222
                self.match(MizarParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.ReferenceContext)
            else:
                return self.getTypedRuleContext(MizarParser.ReferenceContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = MizarParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.reference()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1227
                self.match(MizarParser.T__2)
                self.state = 1228
                self.reference()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_reference(self):
            return self.getTypedRuleContext(MizarParser.Local_referenceContext,0)


        def library_reference(self):
            return self.getTypedRuleContext(MizarParser.Library_referenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference" ):
                listener.enterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference" ):
                listener.exitReference(self)




    def reference(self):

        localctx = MizarParser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reference)
        try:
            self.state = 1236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.local_reference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1235
                self.library_reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Local_scheme_referenceContext,0)


        def library_scheme_reference(self):
            return self.getTypedRuleContext(MizarParser.Library_scheme_referenceContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_scheme_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_reference" ):
                listener.enterScheme_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_reference" ):
                listener.exitScheme_reference(self)




    def scheme_reference(self):

        localctx = MizarParser.Scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_scheme_reference)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.local_scheme_reference()
                pass
            elif token in [MizarParser.FILE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1239
                self.library_scheme_reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_local_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_reference" ):
                listener.enterLocal_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_reference" ):
                listener.exitLocal_reference(self)




    def local_reference(self):

        localctx = MizarParser.Local_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_local_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.label_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scheme_identifier(self):
            return self.getTypedRuleContext(MizarParser.Scheme_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_local_scheme_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_scheme_reference" ):
                listener.enterLocal_scheme_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_scheme_reference" ):
                listener.exitLocal_scheme_reference(self)




    def local_scheme_reference(self):

        localctx = MizarParser.Local_scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_local_scheme_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.scheme_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self):
            return self.getTypedRuleContext(MizarParser.Article_nameContext,0)


        def theorem_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Theorem_numberContext)
            else:
                return self.getTypedRuleContext(MizarParser.Theorem_numberContext,i)


        def definition_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Definition_numberContext)
            else:
                return self.getTypedRuleContext(MizarParser.Definition_numberContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_library_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary_reference" ):
                listener.enterLibrary_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary_reference" ):
                listener.exitLibrary_reference(self)




    def library_reference(self):

        localctx = MizarParser.Library_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_library_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.article_name()
            self.state = 1247
            self.match(MizarParser.T__37)
            self.state = 1251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.NUMERAL]:
                self.state = 1248
                self.theorem_number()
                pass
            elif token in [MizarParser.T__99]:
                self.state = 1249
                self.match(MizarParser.T__99)
                self.state = 1250
                self.definition_number()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1253
                    self.match(MizarParser.T__2)
                    self.state = 1257
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MizarParser.NUMERAL]:
                        self.state = 1254
                        self.theorem_number()
                        pass
                    elif token in [MizarParser.T__99]:
                        self.state = 1255
                        self.match(MizarParser.T__99)
                        self.state = 1256
                        self.definition_number()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Library_scheme_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def article_name(self):
            return self.getTypedRuleContext(MizarParser.Article_nameContext,0)


        def scheme_number(self):
            return self.getTypedRuleContext(MizarParser.Scheme_numberContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_library_scheme_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary_scheme_reference" ):
                listener.enterLibrary_scheme_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary_scheme_reference" ):
                listener.exitLibrary_scheme_reference(self)




    def library_scheme_reference(self):

        localctx = MizarParser.Library_scheme_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_library_scheme_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.article_name()
            self.state = 1265
            self.match(MizarParser.T__37)
            self.state = 1266
            self.match(MizarParser.T__100)
            self.state = 1267
            self.scheme_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Theorem_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_theorem_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheorem_number" ):
                listener.enterTheorem_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheorem_number" ):
                listener.exitTheorem_number(self)




    def theorem_number(self):

        localctx = MizarParser.Theorem_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_theorem_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Definition_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_definition_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition_number" ):
                listener.enterDefinition_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition_number" ):
                listener.exitDefinition_number(self)




    def definition_number(self):

        localctx = MizarParser.Definition_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_definition_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scheme_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_scheme_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScheme_number" ):
                listener.enterScheme_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScheme_number" ):
                listener.exitScheme_number(self)




    def scheme_number(self):

        localctx = MizarParser.Scheme_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_scheme_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(MizarParser.NUMERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proposition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PropositionContext)
            else:
                return self.getTypedRuleContext(MizarParser.PropositionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_conditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditions" ):
                listener.enterConditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditions" ):
                listener.exitConditions(self)




    def conditions(self):

        localctx = MizarParser.ConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(MizarParser.T__101)
            self.state = 1276
            self.proposition()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__77:
                self.state = 1277
                self.match(MizarParser.T__77)
                self.state = 1278
                self.proposition()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def label_identifier(self):
            return self.getTypedRuleContext(MizarParser.Label_identifierContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_proposition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProposition" ):
                listener.enterProposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProposition" ):
                listener.exitProposition(self)




    def proposition(self):

        localctx = MizarParser.PropositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_proposition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.label_identifier()
                self.state = 1285
                self.match(MizarParser.T__37)


            self.state = 1289
            self.sentence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SentenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_sentence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSentence" ):
                listener.enterSentence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSentence" ):
                listener.exitSentence(self)




    def sentence(self):

        localctx = MizarParser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_sentence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.formula_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formula_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Formula_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Formula_expressionContext,i)


        def atomic_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Atomic_formula_expressionContext,0)


        def quantified_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Quantified_formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_formula_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormula_expression" ):
                listener.enterFormula_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormula_expression" ):
                listener.exitFormula_expression(self)



    def formula_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.Formula_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_formula_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.match(MizarParser.T__25)
                self.state = 1295
                self.formula_expression(0)
                self.state = 1296
                self.match(MizarParser.T__26)
                pass

            elif la_ == 2:
                self.state = 1298
                self.atomic_formula_expression()
                pass

            elif la_ == 3:
                self.state = 1299
                self.quantified_formula_expression()
                pass

            elif la_ == 4:
                self.state = 1300
                self.match(MizarParser.T__107)
                self.state = 1301
                self.formula_expression(3)
                pass

            elif la_ == 5:
                self.state = 1302
                self.match(MizarParser.T__108)
                pass

            elif la_ == 6:
                self.state = 1303
                self.match(MizarParser.T__109)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1328
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1306
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1307
                        self.match(MizarParser.T__102)
                        self.state = 1308
                        self.formula_expression(10)
                        pass

                    elif la_ == 2:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1309
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1310
                        self.match(MizarParser.T__102)
                        self.state = 1311
                        self.match(MizarParser.T__103)
                        self.state = 1312
                        self.match(MizarParser.T__102)
                        self.state = 1313
                        self.formula_expression(9)
                        pass

                    elif la_ == 3:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1314
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1315
                        self.match(MizarParser.T__104)
                        self.state = 1316
                        self.formula_expression(8)
                        pass

                    elif la_ == 4:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1317
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1318
                        self.match(MizarParser.T__104)
                        self.state = 1319
                        self.match(MizarParser.T__103)
                        self.state = 1320
                        self.match(MizarParser.T__104)
                        self.state = 1321
                        self.formula_expression(7)
                        pass

                    elif la_ == 5:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1322
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1323
                        self.match(MizarParser.T__105)
                        self.state = 1324
                        self.formula_expression(6)
                        pass

                    elif la_ == 6:
                        localctx = MizarParser.Formula_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula_expression)
                        self.state = 1325
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1326
                        self.match(MizarParser.T__106)
                        self.state = 1327
                        self.formula_expression(5)
                        pass

             
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atomic_formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Predicate_symbolContext)
            else:
                return self.getTypedRuleContext(MizarParser.Predicate_symbolContext,i)


        def term_expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expression_listContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expression_listContext,i)


        def predicate_identifier(self):
            return self.getTypedRuleContext(MizarParser.Predicate_identifierContext,0)


        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_atomic_formula_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_formula_expression" ):
                listener.enterAtomic_formula_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_formula_expression" ):
                listener.exitAtomic_formula_expression(self)




    def atomic_formula_expression(self):

        localctx = MizarParser.Atomic_formula_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_atomic_formula_expression)
        self._la = 0 # Token type
        try:
            self.state = 1374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1333
                    self.term_expression_list()


                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__110 or _la==MizarParser.T__111:
                    self.state = 1336
                    _la = self._input.LA(1)
                    if not(_la==MizarParser.T__110 or _la==MizarParser.T__111):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1337
                    self.match(MizarParser.T__107)


                self.state = 1340
                self.predicate_symbol()
                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self.term_expression_list()


                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1346
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MizarParser.T__110 or _la==MizarParser.T__111:
                            self.state = 1344
                            _la = self._input.LA(1)
                            if not(_la==MizarParser.T__110 or _la==MizarParser.T__111):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1345
                            self.match(MizarParser.T__107)


                        self.state = 1348
                        self.predicate_symbol()
                        self.state = 1349
                        self.term_expression_list() 
                    self.state = 1355
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self.predicate_identifier()
                self.state = 1357
                self.match(MizarParser.T__48)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1358
                    self.term_expression_list()


                self.state = 1361
                self.match(MizarParser.T__50)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1363
                self.term_expression(0)
                self.state = 1364
                self.match(MizarParser.T__33)
                self.state = 1366 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1365
                        self.adjective()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1368 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1370
                self.term_expression(0)
                self.state = 1371
                self.match(MizarParser.T__33)
                self.state = 1372
                self.type_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_formula_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Qualified_variablesContext,0)


        def formula_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Formula_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Formula_expressionContext,i)


        def quantified_formula_expression(self):
            return self.getTypedRuleContext(MizarParser.Quantified_formula_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_quantified_formula_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_formula_expression" ):
                listener.enterQuantified_formula_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_formula_expression" ):
                listener.exitQuantified_formula_expression(self)




    def quantified_formula_expression(self):

        localctx = MizarParser.Quantified_formula_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_quantified_formula_expression)
        self._la = 0 # Token type
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.match(MizarParser.T__15)
                self.state = 1377
                self.qualified_variables()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__112:
                    self.state = 1378
                    self.match(MizarParser.T__112)
                    self.state = 1379
                    self.formula_expression(0)


                self.state = 1385
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MizarParser.T__113]:
                    self.state = 1382
                    self.match(MizarParser.T__113)
                    self.state = 1383
                    self.formula_expression(0)
                    pass
                elif token in [MizarParser.T__15, MizarParser.T__114]:
                    self.state = 1384
                    self.quantified_formula_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MizarParser.T__114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387
                self.match(MizarParser.T__114)
                self.state = 1388
                self.qualified_variables()
                self.state = 1389
                self.match(MizarParser.T__112)
                self.state = 1390
                self.formula_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitly_qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Implicitly_qualified_variablesContext,0)


        def explicitly_qualified_variables(self):
            return self.getTypedRuleContext(MizarParser.Explicitly_qualified_variablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualified_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_variables" ):
                listener.enterQualified_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_variables" ):
                listener.exitQualified_variables(self)




    def qualified_variables(self):

        localctx = MizarParser.Qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_qualified_variables)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self.implicitly_qualified_variables()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.explicitly_qualified_variables()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1396
                self.explicitly_qualified_variables()
                self.state = 1397
                self.match(MizarParser.T__2)
                self.state = 1398
                self.implicitly_qualified_variables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicitly_qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_implicitly_qualified_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitly_qualified_variables" ):
                listener.enterImplicitly_qualified_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitly_qualified_variables" ):
                listener.exitImplicitly_qualified_variables(self)




    def implicitly_qualified_variables(self):

        localctx = MizarParser.Implicitly_qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_implicitly_qualified_variables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.variables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicitly_qualified_variablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Qualified_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Qualified_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_explicitly_qualified_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitly_qualified_variables" ):
                listener.enterExplicitly_qualified_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitly_qualified_variables" ):
                listener.exitExplicitly_qualified_variables(self)




    def explicitly_qualified_variables(self):

        localctx = MizarParser.Explicitly_qualified_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_explicitly_qualified_variables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.qualified_segment()
            self.state = 1409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1405
                    self.match(MizarParser.T__2)
                    self.state = 1406
                    self.qualified_segment() 
                self.state = 1411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(MizarParser.VariablesContext,0)


        def qualification(self):
            return self.getTypedRuleContext(MizarParser.QualificationContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualified_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_segment" ):
                listener.enterQualified_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_segment" ):
                listener.exitQualified_segment(self)




    def qualified_segment(self):

        localctx = MizarParser.Qualified_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_qualified_segment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.variables()
            self.state = 1413
            self.qualification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MizarParser.Variable_identifierContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariables" ):
                listener.enterVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariables" ):
                listener.exitVariables(self)




    def variables(self):

        localctx = MizarParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.variable_identifier()
            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1416
                self.match(MizarParser.T__2)
                self.state = 1417
                self.variable_identifier()
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_qualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualification" ):
                listener.enterQualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualification" ):
                listener.exitQualification(self)




    def qualification(self):

        localctx = MizarParser.QualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_qualification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            _la = self._input.LA(1)
            if not(_la==MizarParser.T__115 or _la==MizarParser.T__116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1424
            self.type_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def radix_type(self):
            return self.getTypedRuleContext(MizarParser.Radix_typeContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def adjective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.AdjectiveContext)
            else:
                return self.getTypedRuleContext(MizarParser.AdjectiveContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_expression" ):
                listener.enterType_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_expression" ):
                listener.exitType_expression(self)




    def type_expression(self):

        localctx = MizarParser.Type_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_type_expression)
        try:
            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.match(MizarParser.T__25)
                self.state = 1427
                self.radix_type()
                self.state = 1428
                self.match(MizarParser.T__26)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1430
                        self.adjective()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1433 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 1435
                self.type_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.radix_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structure_type_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def adjective_cluster(self):
            return self.getTypedRuleContext(MizarParser.Adjective_clusterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_structure_type_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructure_type_expression" ):
                listener.enterStructure_type_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructure_type_expression" ):
                listener.exitStructure_type_expression(self)




    def structure_type_expression(self):

        localctx = MizarParser.Structure_type_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_structure_type_expression)
        self._la = 0 # Token type
        try:
            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1440
                self.match(MizarParser.T__25)
                self.state = 1441
                self.structure_symbol()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__27:
                    self.state = 1442
                    self.match(MizarParser.T__27)
                    self.state = 1443
                    self.term_expression_list()


                self.state = 1446
                self.match(MizarParser.T__26)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.adjective_cluster()
                self.state = 1449
                self.structure_symbol()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__27:
                    self.state = 1450
                    self.match(MizarParser.T__27)
                    self.state = 1451
                    self.term_expression_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Radix_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mode_symbol(self):
            return self.getTypedRuleContext(MizarParser.Mode_symbolContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_radix_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadix_type" ):
                listener.enterRadix_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadix_type" ):
                listener.exitRadix_type(self)




    def radix_type(self):

        localctx = MizarParser.Radix_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_radix_type)
        try:
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MizarParser.T__35, MizarParser.MODE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.mode_symbol()
                self.state = 1459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1457
                    self.match(MizarParser.T__34)
                    self.state = 1458
                    self.term_expression_list()


                pass
            elif token in [MizarParser.STRUCTURE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.structure_symbol()
                self.state = 1464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1462
                    self.match(MizarParser.T__27)
                    self.state = 1463
                    self.term_expression_list()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Type_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Type_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_type_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_expression_list" ):
                listener.enterType_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_expression_list" ):
                listener.exitType_expression_list(self)




    def type_expression_list(self):

        localctx = MizarParser.Type_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_type_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.type_expression()
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MizarParser.T__2:
                self.state = 1469
                self.match(MizarParser.T__2)
                self.state = 1470
                self.type_expression()
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Term_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def functor_symbol(self):
            return self.getTypedRuleContext(MizarParser.Functor_symbolContext,0)


        def arguments(self):
            return self.getTypedRuleContext(MizarParser.ArgumentsContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def left_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Left_functor_bracketContext,0)


        def right_functor_bracket(self):
            return self.getTypedRuleContext(MizarParser.Right_functor_bracketContext,0)


        def functor_identifier(self):
            return self.getTypedRuleContext(MizarParser.Functor_identifierContext,0)


        def structure_symbol(self):
            return self.getTypedRuleContext(MizarParser.Structure_symbolContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MizarParser.Variable_identifierContext,0)


        def sentence(self):
            return self.getTypedRuleContext(MizarParser.SentenceContext,0)


        def postqualification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.PostqualificationContext)
            else:
                return self.getTypedRuleContext(MizarParser.PostqualificationContext,i)


        def NUMERAL(self):
            return self.getToken(MizarParser.NUMERAL, 0)

        def selector_symbol(self):
            return self.getTypedRuleContext(MizarParser.Selector_symbolContext,0)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def private_definition_parameter(self):
            return self.getTypedRuleContext(MizarParser.Private_definition_parameterContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_term_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_expression" ):
                listener.enterTerm_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_expression" ):
                listener.exitTerm_expression(self)



    def term_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MizarParser.Term_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 312
        self.enterRecursionRule(localctx, 312, self.RULE_term_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1477
                self.match(MizarParser.T__25)
                self.state = 1478
                self.term_expression(0)
                self.state = 1479
                self.match(MizarParser.T__26)
                pass

            elif la_ == 2:
                self.state = 1481
                self.functor_symbol()
                self.state = 1483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1482
                    self.arguments()


                pass

            elif la_ == 3:
                self.state = 1485
                self.match(MizarParser.T__25)
                self.state = 1486
                self.term_expression_list()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MizarParser.T__26:
                    self.state = 1487
                    self.match(MizarParser.T__26)


                self.state = 1490
                self.functor_symbol()
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.arguments()


                pass

            elif la_ == 4:
                self.state = 1494
                self.left_functor_bracket()
                self.state = 1495
                self.term_expression_list()
                self.state = 1496
                self.right_functor_bracket()
                pass

            elif la_ == 5:
                self.state = 1498
                self.functor_identifier()
                self.state = 1499
                self.match(MizarParser.T__25)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MizarParser.T__25) | (1 << MizarParser.T__47) | (1 << MizarParser.T__48))) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MizarParser.T__117 - 118)) | (1 << (MizarParser.T__120 - 118)) | (1 << (MizarParser.T__123 - 118)) | (1 << (MizarParser.T__124 - 118)) | (1 << (MizarParser.T__125 - 118)) | (1 << (MizarParser.T__126 - 118)) | (1 << (MizarParser.T__127 - 118)) | (1 << (MizarParser.T__128 - 118)) | (1 << (MizarParser.T__129 - 118)) | (1 << (MizarParser.T__130 - 118)) | (1 << (MizarParser.T__131 - 118)) | (1 << (MizarParser.T__132 - 118)) | (1 << (MizarParser.FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.STRUCTURE_SYMBOL - 118)) | (1 << (MizarParser.LEFT_FUNCTOR_SYMBOL - 118)) | (1 << (MizarParser.IDENTIFIER - 118)) | (1 << (MizarParser.NUMERAL - 118)))) != 0):
                    self.state = 1500
                    self.term_expression_list()


                self.state = 1503
                self.match(MizarParser.T__26)
                pass

            elif la_ == 6:
                self.state = 1505
                self.structure_symbol()
                self.state = 1506
                self.match(MizarParser.T__28)
                self.state = 1507
                self.term_expression_list()
                self.state = 1508
                self.match(MizarParser.T__29)
                pass

            elif la_ == 7:
                self.state = 1510
                self.match(MizarParser.T__117)
                self.state = 1511
                self.structure_symbol()
                self.state = 1512
                self.match(MizarParser.T__34)
                self.state = 1513
                self.term_expression(11)
                pass

            elif la_ == 8:
                self.state = 1515
                self.variable_identifier()
                pass

            elif la_ == 9:
                self.state = 1516
                self.match(MizarParser.T__47)
                self.state = 1517
                self.term_expression(0)
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MizarParser.T__121:
                    self.state = 1518
                    self.postqualification()
                    self.state = 1523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1524
                self.match(MizarParser.T__37)
                self.state = 1525
                self.sentence()
                self.state = 1526
                self.match(MizarParser.T__49)
                pass

            elif la_ == 10:
                self.state = 1528
                self.match(MizarParser.T__117)
                self.state = 1529
                self.match(MizarParser.T__35)
                self.state = 1530
                self.match(MizarParser.T__34)
                self.state = 1531
                self.match(MizarParser.T__118)
                self.state = 1532
                self.term_expression(0)
                self.state = 1536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1533
                        self.postqualification() 
                    self.state = 1538
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                pass

            elif la_ == 11:
                self.state = 1539
                self.match(MizarParser.NUMERAL)
                pass

            elif la_ == 12:
                self.state = 1540
                self.match(MizarParser.T__117)
                self.state = 1541
                self.selector_symbol()
                self.state = 1542
                self.match(MizarParser.T__34)
                self.state = 1543
                self.term_expression(5)
                pass

            elif la_ == 13:
                self.state = 1545
                self.match(MizarParser.T__117)
                self.state = 1546
                self.selector_symbol()
                pass

            elif la_ == 14:
                self.state = 1547
                self.match(MizarParser.T__117)
                self.state = 1548
                self.type_expression()
                pass

            elif la_ == 15:
                self.state = 1549
                self.private_definition_parameter()
                pass

            elif la_ == 16:
                self.state = 1550
                self.match(MizarParser.T__120)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1561
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        localctx = MizarParser.Term_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term_expression)
                        self.state = 1553
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1554
                        self.functor_symbol()
                        self.state = 1556
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                        if la_ == 1:
                            self.state = 1555
                            self.arguments()


                        pass

                    elif la_ == 2:
                        localctx = MizarParser.Term_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term_expression)
                        self.state = 1558
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1559
                        self.match(MizarParser.T__119)
                        self.state = 1560
                        self.type_expression()
                        pass

             
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Term_expression_implContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MizarParser.RULE_term_expression_impl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_expression_impl" ):
                listener.enterTerm_expression_impl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_expression_impl" ):
                listener.exitTerm_expression_impl(self)




    def term_expression_impl(self):

        localctx = MizarParser.Term_expression_implContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_term_expression_impl)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self):
            return self.getTypedRuleContext(MizarParser.Term_expressionContext,0)


        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = MizarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_arguments)
        try:
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.term_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(MizarParser.T__25)
                self.state = 1570
                self.term_expression_list()
                self.state = 1571
                self.match(MizarParser.T__26)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Adjective_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression_list(self):
            return self.getTypedRuleContext(MizarParser.Term_expression_listContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_adjective_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdjective_arguments" ):
                listener.enterAdjective_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdjective_arguments" ):
                listener.exitAdjective_arguments(self)




    def adjective_arguments(self):

        localctx = MizarParser.Adjective_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_adjective_arguments)
        try:
            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.term_expression_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.match(MizarParser.T__25)
                self.state = 1577
                self.term_expression_list()
                self.state = 1578
                self.match(MizarParser.T__26)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Term_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Term_expressionContext)
            else:
                return self.getTypedRuleContext(MizarParser.Term_expressionContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_term_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_expression_list" ):
                listener.enterTerm_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_expression_list" ):
                listener.exitTerm_expression_list(self)




    def term_expression_list(self):

        localctx = MizarParser.Term_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_term_expression_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.term_expression(0)
            self.state = 1587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1583
                    self.match(MizarParser.T__2)
                    self.state = 1584
                    self.term_expression(0) 
                self.state = 1589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostqualificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualifying_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Postqualifying_segmentContext)
            else:
                return self.getTypedRuleContext(MizarParser.Postqualifying_segmentContext,i)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualification" ):
                listener.enterPostqualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualification" ):
                listener.exitPostqualification(self)




    def postqualification(self):

        localctx = MizarParser.PostqualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_postqualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.match(MizarParser.T__121)
            self.state = 1591
            self.postqualifying_segment()
            self.state = 1596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1592
                    self.match(MizarParser.T__2)
                    self.state = 1593
                    self.postqualifying_segment() 
                self.state = 1598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postqualifying_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postqualified_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MizarParser.Postqualified_variableContext)
            else:
                return self.getTypedRuleContext(MizarParser.Postqualified_variableContext,i)


        def type_expression(self):
            return self.getTypedRuleContext(MizarParser.Type_expressionContext,0)


        def getRuleIndex(self):
            return MizarParser.RULE_postqualifying_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualifying_segment" ):
                listener.enterPostqualifying_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualifying_segment" ):
                listener.exitPostqualifying_segment(self)




    def postqualifying_segment(self):

        localctx = MizarParser.Postqualifying_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_postqualifying_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.postqualified_variable()
            self.state = 1604
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1600
                    self.match(MizarParser.T__2)
                    self.state = 1601
                    self.postqualified_variable() 
                self.state = 1606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1607
                _la = self._input.LA(1)
                if not(_la==MizarParser.T__33 or _la==MizarParser.T__122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1608
                self.type_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postqualified_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MizarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return MizarParser.RULE_postqualified_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostqualified_variable" ):
                listener.enterPostqualified_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostqualified_variable" ):
                listener.exitPostqualified_variable(self)




    def postqualified_variable(self):

        localctx = MizarParser.Postqualified_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_postqualified_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(MizarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Private_definition_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MizarParser.RULE_private_definition_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_definition_parameter" ):
                listener.enterPrivate_definition_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_definition_parameter" ):
                listener.exitPrivate_definition_parameter(self)




    def private_definition_parameter(self):

        localctx = MizarParser.Private_definition_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_private_definition_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MizarParser.T__123 - 124)) | (1 << (MizarParser.T__124 - 124)) | (1 << (MizarParser.T__125 - 124)) | (1 << (MizarParser.T__126 - 124)) | (1 << (MizarParser.T__127 - 124)) | (1 << (MizarParser.T__128 - 124)) | (1 << (MizarParser.T__129 - 124)) | (1 << (MizarParser.T__130 - 124)) | (1 << (MizarParser.T__131 - 124)) | (1 << (MizarParser.T__132 - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[143] = self.formula_expression_sempred
        self._predicates[156] = self.term_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def formula_expression_sempred(self, localctx:Formula_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def term_expression_sempred(self, localctx:Term_expressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         




